{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file:///home/batman/Workspace/Eatofy/src/app/lib/utils/StringValidator.js"],"sourcesContent":["export default function StringValidators(value) {\n  // Ensure the input is a string\n  if (typeof value !== \"string\") {\n    return false;\n  }\n\n  if (value === null) {\n    return true;\n  }\n\n  // List of forbidden characters\n  const charList = ['/', '\\\\', '\"', ';', \"'\", '+', '`', '^'];\n  let validationFlag = true;\n\n  // Iterate over each character in the list\n  for (let char of charList) {\n\n    // Check if the forbidden character is present in the string\n    if (value.includes(char)) {\n      validationFlag = false;\n      break; // Stop checking further once an invalid character is found\n    }\n  }\n\n  return validationFlag;\n}\n"],"names":[],"mappings":";;;AAAe,SAAS,iBAAiB,KAAK;IAC5C,+BAA+B;IAC/B,IAAI,OAAO,UAAU,UAAU;QAC7B,OAAO;IACT;IAEA,IAAI,UAAU,MAAM;QAClB,OAAO;IACT;IAEA,+BAA+B;IAC/B,MAAM,WAAW;QAAC;QAAK;QAAM;QAAK;QAAK;QAAK;QAAK;QAAK;KAAI;IAC1D,IAAI,iBAAiB;IAErB,0CAA0C;IAC1C,KAAK,IAAI,QAAQ,SAAU;QAEzB,4DAA4D;QAC5D,IAAI,MAAM,QAAQ,CAAC,OAAO;YACxB,iBAAiB;YACjB,OAAO,2DAA2D;QACpE;IACF;IAEA,OAAO;AACT"}},
    {"offset": {"line": 96, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 102, "column": 0}, "map": {"version":3,"sources":["file:///home/batman/Workspace/Eatofy/src/app/lib/models/Staffs.js"],"sourcesContent":["import mongoose from \"mongoose\";\nimport bcrypt from \"bcryptjs\";\nimport StringValidators from \"../utils/StringValidator\";\n\nexport const staffSchema = new mongoose.Schema(\n  {\n    FirstName: {\n      type: String,\n      required: true,\n      validate: {\n        validator: (value) => StringValidators(value)\n      },\n      message: \"First Name should not contain invalid characters like /, \\\\, \\\", ;, ', +, `, or ^\"\n    },\n    LastName: {\n      type: String,\n      required: true,\n      validate: {\n        validator: (value) => StringValidators(value)\n      },\n      message: \"Last Name should not contain invalid characters like /, \\\\, \\\", ;, ', +, `, or ^\"\n    },\n    Address: {\n      type: String,\n      required: true,\n      validate: {\n        validator: (value) => StringValidators(value)\n      },\n      message: \"Address should not contain invalid characters like /, \\\\, \\\", ;, ', +, `, or ^\"\n    },\n    Contact: {\n      type: String,\n      required: true,\n      validate: {\n        validator: (value) => StringValidators(value)\n      },\n      message: \"Contact should not contain invalid characters like /, \\\\, \\\", ;, ', +, `, or ^\"\n    },\n    Email: {\n      type: String,\n      unique: true,\n      required: true,\n      validate: {\n        validator: (value) => StringValidators(value)\n      },\n      message: \"Email should not contain invalid characters like /, \\\\, \\\", ;, ', +, `, or ^\"\n    },\n    Password: {\n      type: String,\n      required: true,\n      minlength: 6,\n    },\n    SaltPassword: {\n      type: String,\n      required: true,\n    },\n    DepartmentName: {\n      type: String,\n      required: true,\n      validate: {\n        validator: (value) => StringValidators(value)\n      },\n      message: \"Department Name should not contain invalid characters like /, \\\\, \\\", ;, ', +, `, or ^\"\n    },\n    Designation: {\n      type: String,\n      required: true,\n      validate: {\n        validator: (value) => StringValidators(value)\n      },\n      message: \"Designation should not contain invalid characters like /, \\\\, \\\", ;, ', +, `, or ^\"\n    },\n    Salary: {\n      type: Number,\n      default: 0.0\n    },\n    Incentive: {\n      type: Number,\n      default: 0.0\n    },\n    HotelId: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"Hotels\", // Reference to the Hotels collection\n    },\n    Role: {\n      type: String,\n      required: true,\n      enum: ['Owner', 'Backoffice', 'Waiter'],\n      default: 'Waiter',\n      validate: {\n        validator: (value) => {\n          return value === \"Owner\" || value === \"Backoffice\" || value === \"Waiter\"\n        }\n      },\n      message: \"Role should not contain invalid characters like /, \\\\, \\\", ;, ', +, `, or ^\"\n    },\n  },\n  {\n    timestamps: true, // Automatically manage `createdAt` and `updatedAt`\n  }\n);\n\n// Unique constraint on InvoiceId and ItemId\nstaffSchema.index({ Contact: 1, HotelId: 1 }, { unique: true });\nstaffSchema.index({ Email: 1, HotelId: 1 }, { unique: true });\n\n// Instance methods\nstaffSchema.methods = {\n  authenticate: async function(plainText) {\n    return await bcrypt.compare(plainText, this.Password);\n  }\n};\n\n// Pre-save hook to hash password\nstaffSchema.pre('save', async function(next) {\n  try {\n\n    if (this.isModified('Password')) {\n      const salt = await bcrypt.genSalt(10);\n      this.Password = await bcrypt.hash(this.Password, salt);\n      this.SaltPassword = salt\n    }\n    next();\n  } catch (error) {\n    console.error('Error in pre-save hook:', error);\n    next(error);\n  }\n});\n\n// Pre-delete middleware for single document\nstaffSchema.pre('deleteOne', { document: true }, async function(next) {\n  try {\n    const Bills = mongoose.model('Bills');\n\n    // Check for active bills\n    const activeBills = await Bills.find({\n      WaiterId: this._id,\n      Status: 'Open'\n    });\n\n    if (activeBills.length > 0) {\n      throw new Error('Cannot delete staff with active bills');\n    }\n\n    // Run cleanup operations in parallel\n    await Promise.all([\n      Bills.deleteMany({ WaiterId: this._id }),\n      mongoose.model('StaffAttendance').deleteMany({ StaffId: this._id })\n    ]);\n\n    next();\n  } catch (error) {\n    next(error);\n  }\n});\n\n// Pre-delete middleware for multiple documents\nstaffSchema.pre('deleteMany', async function(next) {\n  try {\n    const Staffs = mongoose.model('Staffs');\n    const Bills = mongoose.model('Bills');\n\n    // Get staff members to be deleted\n    const staffMembers = await Staffs.find(this.getFilter());\n\n    if (staffMembers.length > 0) {\n      const staffIds = staffMembers.map(staff => staff._id);\n\n      // Check for active bills\n      const activeBills = await Bills.find({\n        WaiterId: { $in: staffIds },\n        Status: 'Open'\n      });\n\n      if (activeBills.length > 0) {\n        throw new Error('Cannot delete staff members with active bills');\n      }\n\n      // Run cleanup operations in parallel\n      await Promise.all([\n        Bills.deleteMany({ WaiterId: { $in: staffIds } }),\n        mongoose.model('StaffAttendance').deleteMany({ StaffId: { $in: staffIds } })\n      ]);\n    }\n\n    next();\n  } catch (error) {\n    next(error);\n  }\n});\n\nexport default mongoose.models.Staffs || mongoose.model(\"Staffs\", staffSchema);\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 310, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 316, "column": 0}, "map": {"version":3,"sources":["file:///home/batman/Workspace/Eatofy/src/app/lib/utils/password.js"],"sourcesContent":["import bcrypt from 'bcryptjs';\n\nconst SALT_ROUNDS = 10;\n\n/**\n * Hash a password with a generated salt\n * @param {string} password - Plain text password to hash\n * @returns {Promise<{hashedPassword: string, salt: string}>} - Hashed password and salt\n */\nexport const hashPassword = async (password) => {\n  try {\n    const salt = await bcrypt.genSalt(SALT_ROUNDS);\n    const hashedPassword = await bcrypt.hash(password, salt);\n    return { hashedPassword, salt };\n  } catch (error) {\n    console.error('Error hashing password:', error);\n    throw error;\n  }\n};\n\n/**\n * Compare a plain text password with a hashed password\n * @param {string} password - Plain text password to compare\n * @param {string} hashedPassword - Hashed password to compare against\n * @param {string} salt - Salt used in hashing\n * @returns {Promise<boolean>} - True if passwords match\n */\nexport const comparePassword = async (password, hashedPassword, salt) => {\n  try {\n    // Hash the input password with the stored salt\n    const hashedInput = await bcrypt.hash(password, salt);\n    // Compare the hashed input with the stored hash\n    return hashedInput === hashedPassword;\n  } catch (error) {\n    console.error('Error comparing passwords:', error);\n    throw error;\n  }\n};\n"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,cAAc;AAOb,MAAM,eAAe,OAAO;IACjC,IAAI;QACF,MAAM,OAAO,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAAC;QAClC,MAAM,iBAAiB,MAAM,mIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU;QACnD,OAAO;YAAE;YAAgB;QAAK;IAChC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;QACzC,MAAM;IACR;AACF;AASO,MAAM,kBAAkB,OAAO,UAAU,gBAAgB;IAC9D,IAAI;QACF,+CAA+C;QAC/C,MAAM,cAAc,MAAM,mIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU;QAChD,gDAAgD;QAChD,OAAO,gBAAgB;IACzB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,MAAM;IACR;AACF"}},
    {"offset": {"line": 347, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 353, "column": 0}, "map": {"version":3,"sources":["file:///home/batman/Workspace/Eatofy/src/app/lib/crud/BaseCrud.js"],"sourcesContent":["export class BaseCrud {\n  constructor(model) {\n    this.model = model;\n  }\n\n  // Create a new document\n  async create(data) {\n    try {\n      const doc = new this.model(data);\n      await doc.save();\n      return {\n        returncode: 200,\n        message: \"Data Created Successfully\",\n        output: doc\n      };\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      };\n    }\n  }\n\n  // Read all documents with optional filters\n  async readMany(filters = {}, options = {}) {\n    try {\n      const {\n        sort = {},\n        populate = [],\n        select = '',\n        skip = 0,\n        limit = 0,\n        lean = false\n      } = options;\n\n      let query = this.model.find(filters);\n\n      // Apply population\n      if (populate.length > 0) {\n        query = query.populate(populate);\n      }\n\n      // Apply sorting\n      if (Object.keys(sort).length > 0) {\n        query = query.sort(sort);\n      }\n\n      // Apply selection\n      if (select) {\n        query = query.select(select);\n      }\n\n      // Apply pagination\n      if (skip > 0) {\n        query = query.skip(skip);\n      }\n      if (limit > 0) {\n        query = query.limit(limit);\n      }\n\n      // Execute query\n      const docs = lean ? await query.lean() : await query.exec();\n\n      return {\n        returncode: 200,\n        message: \"Data Fetched Successfully\",\n        output: docs\n      };\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      };\n    }\n  }\n\n  // Read a single document\n  async readOne(filters = {}, options = {}) {\n    try {\n      const { populate = [], select = '', lean = false } = options;\n\n      let query = this.model.findOne(filters);\n\n      // Apply population\n      if (populate.length > 0) {\n        query = query.populate(populate);\n      }\n\n      // Apply selection\n      if (select) {\n        query = query.select(select);\n      }\n\n      // Execute query\n      const doc = lean ? await query.lean() : await query.exec();\n\n      if (!doc) {\n        return {\n          returncode: 404,\n          message: \"Document Not Found\",\n          output: []\n        };\n      }\n\n      return {\n        returncode: 200,\n        message: \"Data Fetched Successfully\",\n        output: doc\n      };\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      };\n    }\n  }\n\n  // Update a document\n  async update(filters = {}, data = {}, options = { new: true }) {\n    try {\n      const doc = await this.model.findOneAndUpdate(filters, data, options);\n\n      if (!doc) {\n        return {\n          returncode: 404,\n          message: \"Document Not Found\",\n          output: []\n        };\n      }\n\n      return {\n        returncode: 200,\n        message: \"Data Updated Successfully\",\n        output: doc\n      };\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      };\n    }\n  }\n\n  // Delete a document\n  async delete(filters = {}) {\n    try {\n      console.log('BaseCrud.delete called with:', {\n        model: this.model.modelName,\n        filters\n      });\n\n      const doc = await this.model.deleteMany(filters);\n      console.log('BaseCrud.delete result:', doc);\n\n      if (!doc || doc.deletedCount === 0) {\n        console.log('BaseCrud.delete - No documents found');\n        return {\n          returncode: 404,\n          message: \"Document Not Found\",\n          output: []\n        };\n      }\n\n      return {\n        returncode: 200,\n        message: \"Data Deleted Successfully\",\n        output: doc\n      };\n    } catch (error) {\n      console.error('Error in BaseCrud.delete:', error);\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      };\n    }\n  }\n\n  // Check if document exists\n  async exists(filters = {}) {\n    try {\n      const exists = await this.model.exists(filters);\n      return {\n        returncode: 200,\n        message: exists ? \"Document Exists\" : \"Document Not Found\",\n        output: !!exists\n      };\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: false\n      };\n    }\n  }\n\n  // Count documents\n  async count(filters = {}) {\n    try {\n      const count = await this.model.countDocuments(filters);\n      return {\n        returncode: 200,\n        message: \"Count Retrieved Successfully\",\n        output: count\n      };\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: 0\n      };\n    }\n  }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 544, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 550, "column": 0}, "map": {"version":3,"sources":["file:///home/batman/Workspace/Eatofy/src/app/lib/models/Hotels.js"],"sourcesContent":["import mongoose from \"mongoose\";\nimport StringValidators from \"../utils/StringValidator\";\n\nexport const HotelSchema = new mongoose.Schema(\n  {\n    HotelName: {\n      type: String,\n      unique: true,\n      required: true,\n      validate: {\n        validator: (value) => StringValidators(value)\n      },\n      message: \"HotelName should not contain invalid characters like /, \\\\, \\\", ;, ', +, `, or ^\"\n    },\n    Email: {\n      type: String,\n      unique: true,\n      required: true,\n      validate: {\n        validator: (value) => StringValidators(value)\n      },\n      message: \"Email should not contain invalid characters like /, \\\\, \\\", ;, ', +, `, or ^\"\n    },\n    Address: {\n      type: String,\n      required: true,\n      validate: {\n        validator: (value) => StringValidators(value)\n      },\n      message: \"Address should not contain invalid characters like /, \\\\, \\\", ;, ', +, `, or ^\"\n    },\n    Logo: {\n      type: Buffer\n    },\n    Speciality: {\n      type: [String],\n      default: []\n    },\n    Contacts: {\n      type: [String],\n      default: []\n    },\n    Website: {\n      type: String,\n      default: \"https://example.com\"\n    },\n    FSSAICode: {\n      type: String,\n      required: true,\n      validate: {\n        validator: (value) => StringValidators(value)\n      },\n      message: \"FSSAICode should not contain invalid characters like /, \\\\, \\\", ;, ', +, `, or ^\"\n    },\n    GSTIN: {\n      type: String,\n      required: true,\n      validate: {\n        validator: (value) => StringValidators(value)\n      },\n      message: \"GSTIN should not contain invalid characters like /, \\\\, \\\", ;, ', +, `, or ^\"\n    },\n  },\n  { timestamps: true }\n);\n\n// Add pre-remove middleware\nHotelSchema.pre('remove', async function(next) {\n  try {\n    // Get all model references\n    const Bills = mongoose.model('Bills');\n    const Sections = mongoose.model('Sections');\n    const MenuCategory = mongoose.model('MenuCategory');\n    const Suppliers = mongoose.model('Suppliers');\n    const ItemCategories = mongoose.model('ItemCategories');\n    const Staffs = mongoose.model('Staffs');\n\n    const Reservations = mongoose.model('Reservations');\n    const CashDrawer = mongoose.model('CashDrawer');\n    const GstSettings = mongoose.model('GstSettings');\n    const VatSettings = mongoose.model('VatSettings');\n    const KotPrinterSettings = mongoose.model('KotPrinterSettings');\n    const InvoicePrinterSettings = mongoose.model('InvoicePrinterSettings');\n    const EbillEmailSettings = mongoose.model('EbillEmailSettings');\n\n    // Delete all related data in parallel\n    await Promise.all([\n      // Delete Multi-level Operational Data\n      Bills.deleteMany({ HotelId: this._id }),\n      Sections.deleteMany({ HotelId: this._id }),\n      MenuCategory.deleteMany({ HotelId: this._id }),\n      Suppliers.deleteMany({ HotelId: this._id }),\n      ItemCategories.deleteMany({ HotelId: this._id }),\n      Staffs.deleteMany({ HotelId: this._id }),\n\n      // Delete Single-level Operational Data\n      Reservations.deleteMany({ HotelId: this._id }),\n      CashDrawer.deleteMany({ HotelId: this._id }),\n\n      // Delete settings\n      GstSettings.deleteMany({ HotelId: this._id }),\n      VatSettings.deleteMany({ HotelId: this._id }),\n      KotPrinterSettings.deleteMany({ HotelId: this._id }),\n      InvoicePrinterSettings.deleteMany({ HotelId: this._id }),\n      EbillEmailSettings.deleteMany({ HotelId: this._id })\n    ]);\n\n    next();\n  } catch (error) {\n    next(error);\n  }\n});\n\n// Add pre-deleteMany middleware\nHotelSchema.pre('deleteMany', async function(next) {\n  try {\n    // Get the hotels that will be deleted\n    const Hotels = mongoose.model('Hotels');\n    const hotels = await Hotels.find(this.getFilter());\n    const hotelIds = hotels.map(hotel => hotel._id);\n\n    if (hotelIds.length > 0) {\n      // Multi-level\n      const Bills = mongoose.model('Bills');\n      const Sections = mongoose.model('Sections');\n      const MenuCategory = mongoose.model('MenuCategory');\n      const Suppliers = mongoose.model('Suppliers');\n      const Staffs = mongoose.model('Staffs');\n      const Customers = mongoose.model('Customers');\n\n      // Single-Level\n      const Reservations = mongoose.model('Reservations');\n      const CashDrawer = mongoose.model('CashDrawer');\n      const Expenses = mongoose.model('Expenses');\n\n      // Delete settings\n      const GstSettings = mongoose.model('GstSettings');\n      const VatSettings = mongoose.model('VatSettings');\n      const KotPrinterSettings = mongoose.model('KotPrinterSettings');\n      const InvoicePrinterSettings = mongoose.model('InvoicePrinterSettings');\n      const EbillEmailSettings = mongoose.model('EbillEmailSettings');\n      const Notifications = mongoose.model('Notifications');\n\n      // Delete all related data in parallel\n      await Promise.all([\n        // Multi-level\n        Bills.deleteMany({ HotelId: { $in: hotelIds } }),\n        Sections.deleteMany({ HotelId: { $in: hotelIds } }),\n        MenuCategory.deleteMany({ HotelId: { $in: hotelIds } }),\n        Suppliers.deleteMany({ HotelId: { $in: hotelIds } }),\n        Staffs.deleteMany({ HotelId: { $in: hotelIds } }),\n        Customers.deleteMany({ HotelId: { $in: hotelIds } }),\n\n        // Single-Level\n        Reservations.deleteMany({ HotelId: { $in: hotelIds } }),\n        CashDrawer.deleteMany({ HotelId: { $in: hotelIds } }),\n        Expenses.deleteMany({ HotelId: { $in: hotelIds } }),\n\n        // Delete settings\n        GstSettings.deleteMany({ HotelId: { $in: hotelIds } }),\n        VatSettings.deleteMany({ HotelId: { $in: hotelIds } }),\n        KotPrinterSettings.deleteMany({ HotelId: { $in: hotelIds } }),\n        InvoicePrinterSettings.deleteMany({ HotelId: { $in: hotelIds } }),\n        EbillEmailSettings.deleteMany({ HotelId: { $in: hotelIds } }),\n        Notifications.deleteMany({ HotelId: { $in: hotelIds } })\n      ]);\n    }\n\n    next();\n  } catch (error) {\n    next(error);\n  }\n});\n\nconst Hotels = mongoose.models.Hotels || mongoose.model(\"Hotels\", HotelSchema);\nexport default Hotels;\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,MAAM,cAAc,IAAI,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAC5C;IACE,WAAW;QACT,MAAM;QACN,QAAQ;QACR,UAAU;QACV,UAAU;YACR,WAAW,CAAC,QAAU,CAAA,GAAA,+IAAA,CAAA,UAAgB,AAAD,EAAE;QACzC;QACA,SAAS;IACX;IACA,OAAO;QACL,MAAM;QACN,QAAQ;QACR,UAAU;QACV,UAAU;YACR,WAAW,CAAC,QAAU,CAAA,GAAA,+IAAA,CAAA,UAAgB,AAAD,EAAE;QACzC;QACA,SAAS;IACX;IACA,SAAS;QACP,MAAM;QACN,UAAU;QACV,UAAU;YACR,WAAW,CAAC,QAAU,CAAA,GAAA,+IAAA,CAAA,UAAgB,AAAD,EAAE;QACzC;QACA,SAAS;IACX;IACA,MAAM;QACJ,MAAM;IACR;IACA,YAAY;QACV,MAAM;YAAC;SAAO;QACd,SAAS,EAAE;IACb;IACA,UAAU;QACR,MAAM;YAAC;SAAO;QACd,SAAS,EAAE;IACb;IACA,SAAS;QACP,MAAM;QACN,SAAS;IACX;IACA,WAAW;QACT,MAAM;QACN,UAAU;QACV,UAAU;YACR,WAAW,CAAC,QAAU,CAAA,GAAA,+IAAA,CAAA,UAAgB,AAAD,EAAE;QACzC;QACA,SAAS;IACX;IACA,OAAO;QACL,MAAM;QACN,UAAU;QACV,UAAU;YACR,WAAW,CAAC,QAAU,CAAA,GAAA,+IAAA,CAAA,UAAgB,AAAD,EAAE;QACzC;QACA,SAAS;IACX;AACF,GACA;IAAE,YAAY;AAAK;AAGrB,4BAA4B;AAC5B,YAAY,GAAG,CAAC,UAAU,eAAe,IAAI;IAC3C,IAAI;QACF,2BAA2B;QAC3B,MAAM,QAAQ,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;QAC7B,MAAM,WAAW,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;QAChC,MAAM,eAAe,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;QACpC,MAAM,YAAY,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;QACjC,MAAM,iBAAiB,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;QACtC,MAAM,SAAS,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;QAE9B,MAAM,eAAe,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;QACpC,MAAM,aAAa,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;QAClC,MAAM,cAAc,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;QACnC,MAAM,cAAc,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;QACnC,MAAM,qBAAqB,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;QAC1C,MAAM,yBAAyB,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;QAC9C,MAAM,qBAAqB,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;QAE1C,sCAAsC;QACtC,MAAM,QAAQ,GAAG,CAAC;YAChB,sCAAsC;YACtC,MAAM,UAAU,CAAC;gBAAE,SAAS,IAAI,CAAC,GAAG;YAAC;YACrC,SAAS,UAAU,CAAC;gBAAE,SAAS,IAAI,CAAC,GAAG;YAAC;YACxC,aAAa,UAAU,CAAC;gBAAE,SAAS,IAAI,CAAC,GAAG;YAAC;YAC5C,UAAU,UAAU,CAAC;gBAAE,SAAS,IAAI,CAAC,GAAG;YAAC;YACzC,eAAe,UAAU,CAAC;gBAAE,SAAS,IAAI,CAAC,GAAG;YAAC;YAC9C,OAAO,UAAU,CAAC;gBAAE,SAAS,IAAI,CAAC,GAAG;YAAC;YAEtC,uCAAuC;YACvC,aAAa,UAAU,CAAC;gBAAE,SAAS,IAAI,CAAC,GAAG;YAAC;YAC5C,WAAW,UAAU,CAAC;gBAAE,SAAS,IAAI,CAAC,GAAG;YAAC;YAE1C,kBAAkB;YAClB,YAAY,UAAU,CAAC;gBAAE,SAAS,IAAI,CAAC,GAAG;YAAC;YAC3C,YAAY,UAAU,CAAC;gBAAE,SAAS,IAAI,CAAC,GAAG;YAAC;YAC3C,mBAAmB,UAAU,CAAC;gBAAE,SAAS,IAAI,CAAC,GAAG;YAAC;YAClD,uBAAuB,UAAU,CAAC;gBAAE,SAAS,IAAI,CAAC,GAAG;YAAC;YACtD,mBAAmB,UAAU,CAAC;gBAAE,SAAS,IAAI,CAAC,GAAG;YAAC;SACnD;QAED;IACF,EAAE,OAAO,OAAO;QACd,KAAK;IACP;AACF;AAEA,gCAAgC;AAChC,YAAY,GAAG,CAAC,cAAc,eAAe,IAAI;IAC/C,IAAI;QACF,sCAAsC;QACtC,MAAM,SAAS,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;QAC9B,MAAM,SAAS,MAAM,OAAO,IAAI,CAAC,IAAI,CAAC,SAAS;QAC/C,MAAM,WAAW,OAAO,GAAG,CAAC,CAAA,QAAS,MAAM,GAAG;QAE9C,IAAI,SAAS,MAAM,GAAG,GAAG;YACvB,cAAc;YACd,MAAM,QAAQ,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;YAC7B,MAAM,WAAW,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;YAChC,MAAM,eAAe,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;YACpC,MAAM,YAAY,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;YACjC,MAAM,SAAS,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;YAC9B,MAAM,YAAY,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;YAEjC,eAAe;YACf,MAAM,eAAe,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;YACpC,MAAM,aAAa,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;YAClC,MAAM,WAAW,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;YAEhC,kBAAkB;YAClB,MAAM,cAAc,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;YACnC,MAAM,cAAc,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;YACnC,MAAM,qBAAqB,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;YAC1C,MAAM,yBAAyB,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;YAC9C,MAAM,qBAAqB,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;YAC1C,MAAM,gBAAgB,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;YAErC,sCAAsC;YACtC,MAAM,QAAQ,GAAG,CAAC;gBAChB,cAAc;gBACd,MAAM,UAAU,CAAC;oBAAE,SAAS;wBAAE,KAAK;oBAAS;gBAAE;gBAC9C,SAAS,UAAU,CAAC;oBAAE,SAAS;wBAAE,KAAK;oBAAS;gBAAE;gBACjD,aAAa,UAAU,CAAC;oBAAE,SAAS;wBAAE,KAAK;oBAAS;gBAAE;gBACrD,UAAU,UAAU,CAAC;oBAAE,SAAS;wBAAE,KAAK;oBAAS;gBAAE;gBAClD,OAAO,UAAU,CAAC;oBAAE,SAAS;wBAAE,KAAK;oBAAS;gBAAE;gBAC/C,UAAU,UAAU,CAAC;oBAAE,SAAS;wBAAE,KAAK;oBAAS;gBAAE;gBAElD,eAAe;gBACf,aAAa,UAAU,CAAC;oBAAE,SAAS;wBAAE,KAAK;oBAAS;gBAAE;gBACrD,WAAW,UAAU,CAAC;oBAAE,SAAS;wBAAE,KAAK;oBAAS;gBAAE;gBACnD,SAAS,UAAU,CAAC;oBAAE,SAAS;wBAAE,KAAK;oBAAS;gBAAE;gBAEjD,kBAAkB;gBAClB,YAAY,UAAU,CAAC;oBAAE,SAAS;wBAAE,KAAK;oBAAS;gBAAE;gBACpD,YAAY,UAAU,CAAC;oBAAE,SAAS;wBAAE,KAAK;oBAAS;gBAAE;gBACpD,mBAAmB,UAAU,CAAC;oBAAE,SAAS;wBAAE,KAAK;oBAAS;gBAAE;gBAC3D,uBAAuB,UAAU,CAAC;oBAAE,SAAS;wBAAE,KAAK;oBAAS;gBAAE;gBAC/D,mBAAmB,UAAU,CAAC;oBAAE,SAAS;wBAAE,KAAK;oBAAS;gBAAE;gBAC3D,cAAc,UAAU,CAAC;oBAAE,SAAS;wBAAE,KAAK;oBAAS;gBAAE;aACvD;QACH;QAEA;IACF,EAAE,OAAO,OAAO;QACd,KAAK;IACP;AACF;AAEA,MAAM,SAAS,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,MAAM,IAAI,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,UAAU;uCACnD"}},
    {"offset": {"line": 805, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 811, "column": 0}, "map": {"version":3,"sources":["file:///home/batman/Workspace/Eatofy/src/app/lib/utils/BooleanValidator.js"],"sourcesContent":["export default function BooleanValidator(value) {\n  if (typeof value != \"boolean\") {\n    return false;\n  }\n  else {\n    return true;\n  }\n}\n"],"names":[],"mappings":";;;AAAe,SAAS,iBAAiB,KAAK;IAC5C,IAAI,OAAO,SAAS,WAAW;QAC7B,OAAO;IACT,OACK;QACH,OAAO;IACT;AACF"}},
    {"offset": {"line": 821, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 827, "column": 0}, "map": {"version":3,"sources":["file:///home/batman/Workspace/Eatofy/src/app/lib/utils/SpecialStringsValidator.js"],"sourcesContent":["export function SubscriptionStatusValidator(value) {\n\n  let validation_flag = false;\n  var list = [\"Waiting\", \"On Going\", \"Expired\", \"About to Expire\"];\n\n  list.map((item) => {\n    if (value === item) {\n      validation_flag = true;\n    }\n  });\n\n  return validation_flag;\n}\n\nexport function PaymentStatusValidator(value) {\n\n  let validation_flag = false;\n  var list = [\"Paid\", \"Unpaid\", \"Part-Paid\"];\n\n  list.map((item) => {\n    if (value === item) {\n      validation_flag = true;\n    }\n  });\n\n  return validation_flag;\n}\n\nexport function PaymentModeValidator(value) {\n\n  let validation_flag = false;\n  var list = [\"Cash\", \"UPI\", \"Credit-Card\", \"Due\", \"Part\"];\n\n  list.map((item) => {\n    if (value === item) {\n      validation_flag = true;\n    }\n  });\n\n  return validation_flag;\n}\n\nexport function OrderTypeValidator(value) {\n\n  let validation_flag = false;\n  var list = [\"Takeaway\", \"Delivery\", \"Dine-In\", \"Swiggy\", \"Zomato\", \"QR-Orders\"];\n\n  list.map((item) => {\n    if (value === item) {\n      validation_flag = true;\n    }\n  });\n\n  return validation_flag;\n}\n\nexport function TableStatusValidator(value) {\n\n  let validation_flag = false;\n  var list = [\"Booked\", \"Bill Pending\", \"Open\"];\n\n  list.map((item) => {\n    if (value === item) {\n      validation_flag = true;\n    }\n  });\n\n  return validation_flag;\n}\n\nexport function StockStatusValidator(value) {\n\n  let validation_flag = false;\n  var list = [\"Available\", \"Low Stock\", \"Unavailable\"];\n\n  list.map((item) => {\n    if (value === item) {\n      validation_flag = true;\n    }\n  });\n\n  return validation_flag;\n}\n\nexport function AttendanceValidator(value) {\n\n  let validation_flag = false;\n  var list = [\"Absent\", \"Present\", \"Half-Day\"];\n\n  list.map((item) => {\n    if (value === item) {\n      validation_flag = true;\n    }\n  });\n\n  return validation_flag;\n}\n\nexport function ExpenseCategoryValidator(value) {\n\n  let validation_flag = false;\n  var list = [\"Salary\", \"Purchases\", \"Miscellaneous\"];\n\n  list.map((item) => {\n    if (value === item) {\n      validation_flag = true;\n    }\n  });\n\n  return validation_flag;\n}\n"],"names":[],"mappings":";;;;;;;;;;AAAO,SAAS,4BAA4B,KAAK;IAE/C,IAAI,kBAAkB;IACtB,IAAI,OAAO;QAAC;QAAW;QAAY;QAAW;KAAkB;IAEhE,KAAK,GAAG,CAAC,CAAC;QACR,IAAI,UAAU,MAAM;YAClB,kBAAkB;QACpB;IACF;IAEA,OAAO;AACT;AAEO,SAAS,uBAAuB,KAAK;IAE1C,IAAI,kBAAkB;IACtB,IAAI,OAAO;QAAC;QAAQ;QAAU;KAAY;IAE1C,KAAK,GAAG,CAAC,CAAC;QACR,IAAI,UAAU,MAAM;YAClB,kBAAkB;QACpB;IACF;IAEA,OAAO;AACT;AAEO,SAAS,qBAAqB,KAAK;IAExC,IAAI,kBAAkB;IACtB,IAAI,OAAO;QAAC;QAAQ;QAAO;QAAe;QAAO;KAAO;IAExD,KAAK,GAAG,CAAC,CAAC;QACR,IAAI,UAAU,MAAM;YAClB,kBAAkB;QACpB;IACF;IAEA,OAAO;AACT;AAEO,SAAS,mBAAmB,KAAK;IAEtC,IAAI,kBAAkB;IACtB,IAAI,OAAO;QAAC;QAAY;QAAY;QAAW;QAAU;QAAU;KAAY;IAE/E,KAAK,GAAG,CAAC,CAAC;QACR,IAAI,UAAU,MAAM;YAClB,kBAAkB;QACpB;IACF;IAEA,OAAO;AACT;AAEO,SAAS,qBAAqB,KAAK;IAExC,IAAI,kBAAkB;IACtB,IAAI,OAAO;QAAC;QAAU;QAAgB;KAAO;IAE7C,KAAK,GAAG,CAAC,CAAC;QACR,IAAI,UAAU,MAAM;YAClB,kBAAkB;QACpB;IACF;IAEA,OAAO;AACT;AAEO,SAAS,qBAAqB,KAAK;IAExC,IAAI,kBAAkB;IACtB,IAAI,OAAO;QAAC;QAAa;QAAa;KAAc;IAEpD,KAAK,GAAG,CAAC,CAAC;QACR,IAAI,UAAU,MAAM;YAClB,kBAAkB;QACpB;IACF;IAEA,OAAO;AACT;AAEO,SAAS,oBAAoB,KAAK;IAEvC,IAAI,kBAAkB;IACtB,IAAI,OAAO;QAAC;QAAU;QAAW;KAAW;IAE5C,KAAK,GAAG,CAAC,CAAC;QACR,IAAI,UAAU,MAAM;YAClB,kBAAkB;QACpB;IACF;IAEA,OAAO;AACT;AAEO,SAAS,yBAAyB,KAAK;IAE5C,IAAI,kBAAkB;IACtB,IAAI,OAAO;QAAC;QAAU;QAAa;KAAgB;IAEnD,KAAK,GAAG,CAAC,CAAC;QACR,IAAI,UAAU,MAAM;YAClB,kBAAkB;QACpB;IACF;IAEA,OAAO;AACT"}},
    {"offset": {"line": 955, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 961, "column": 0}, "map": {"version":3,"sources":["file:///home/batman/Workspace/Eatofy/src/app/lib/models/HotelSubscription.js"],"sourcesContent":["import mongoose from \"mongoose\";\nimport BooleanValidator from \"../utils/BooleanValidator\";\nimport { SubscriptionStatusValidator, PaymentStatusValidator, PaymentModeValidator } from \"../utils/SpecialStringsValidator\";\n\nexport const HotelSubscriptionSchema = new mongoose.Schema(\n  {\n    HotelId: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"Hotels\", // Reference to the Hotels collection\n      required: true,\n    },\n    SubscriptionId: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"Subscriptions\", // Reference to the Subscriptions collection\n      required: true,\n    },\n    isValid: {\n      type: Boolean,\n      default: true,\n      validate: {\n        validator: (value) => BooleanValidator(value)\n      },\n      message: \"isValid should be either true or false\"\n    },\n    StartDate: {\n      type: String, // Stored as a string (e.g., \"YYYY-MM-DD\")\n      required: true,\n    },\n    EndDate: {\n      type: String, // Stored as a string (e.g., \"YYYY-MM-DD\")\n      required: true,\n    },\n    Status: {\n      type: String,\n      default: \"On Going\",\n      validate: {\n        validator: (value) => SubscriptionStatusValidator(value)\n      },\n      message: \"Status must be one of:- 'Waiting', 'On Going', 'Expired', 'About to Expire'.\"\n    },\n    PaymentStatus: {\n      type: String,\n      default: \"Paid\",\n      validate: {\n        validator: (value) => PaymentStatusValidator(value)\n      },\n      message: \"Payment Status must be one of:- 'Paid', 'Unpaid', 'Part-Paid'.\"\n    },\n    PaymentMode: {\n      type: String,\n      default: \"Cash\",\n      validate: {\n        validator: (value) => PaymentModeValidator(value)\n      },\n      message: \"Payment Mode must be one of:- 'Cash', 'UPI', 'Credit-Card', 'Due', 'Part'.\"\n    },\n    Cash: {\n      type: Number,\n      default: 0.0\n    },\n    UPI: {\n      type: Number,\n      default: 0.0\n    },\n    CreditCard: {\n      type: Number,\n      default: 0.0\n    },\n  },\n  { timestamps: true }\n);\n\nexport default mongoose.models.HotelSubscription \n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAEO,MAAM,0BAA0B,IAAI,iGAAA,CAAA,UAAQ,CAAC,MAAM,CACxD;IACE,SAAS;QACP,MAAM,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,KAAK;QACL,UAAU;IACZ;IACA,gBAAgB;QACd,MAAM,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,KAAK;QACL,UAAU;IACZ;IACA,SAAS;QACP,MAAM;QACN,SAAS;QACT,UAAU;YACR,WAAW,CAAC,QAAU,CAAA,GAAA,gJAAA,CAAA,UAAgB,AAAD,EAAE;QACzC;QACA,SAAS;IACX;IACA,WAAW;QACT,MAAM;QACN,UAAU;IACZ;IACA,SAAS;QACP,MAAM;QACN,UAAU;IACZ;IACA,QAAQ;QACN,MAAM;QACN,SAAS;QACT,UAAU;YACR,WAAW,CAAC,QAAU,CAAA,GAAA,uJAAA,CAAA,8BAA2B,AAAD,EAAE;QACpD;QACA,SAAS;IACX;IACA,eAAe;QACb,MAAM;QACN,SAAS;QACT,UAAU;YACR,WAAW,CAAC,QAAU,CAAA,GAAA,uJAAA,CAAA,yBAAsB,AAAD,EAAE;QAC/C;QACA,SAAS;IACX;IACA,aAAa;QACX,MAAM;QACN,SAAS;QACT,UAAU;YACR,WAAW,CAAC,QAAU,CAAA,GAAA,uJAAA,CAAA,uBAAoB,AAAD,EAAE;QAC7C;QACA,SAAS;IACX;IACA,MAAM;QACJ,MAAM;QACN,SAAS;IACX;IACA,KAAK;QACH,MAAM;QACN,SAAS;IACX;IACA,YAAY;QACV,MAAM;QACN,SAAS;IACX;AACF,GACA;IAAE,YAAY;AAAK;uCAGN,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,iBAAiB"}},
    {"offset": {"line": 1038, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1044, "column": 0}, "map": {"version":3,"sources":["file:///home/batman/Workspace/Eatofy/src/app/lib/crud/HotelSubscription.js"],"sourcesContent":["import HotelSubscription from \"../models/HotelSubscription\";\nimport { BaseCrud } from \"./BaseCrud\";\nimport mongoose from \"mongoose\";\n\nclass HotelSubscriptionCrud extends BaseCrud {\n  constructor() {\n    super(HotelSubscription);\n  }\n\n  // Helper function to compare dates that could be in either format\n  _compareDates(dateStr1, dateStr2) {\n    try {\n      // Try parsing as ISO format first\n      const date1 = new Date(dateStr1);\n      const date2 = new Date(dateStr2);\n\n      // Check if both dates are valid in ISO format\n      if (!isNaN(date1) && !isNaN(date2)) {\n        return date1.getTime() - date2.getTime();\n      }\n\n      // If not ISO format, try parsing the custom format \"DD Month YYYY\"\n      const parseCustomDate = (dateStr) => {\n        const [day, month, year] = dateStr.split(' ');\n        const monthIndex = new Date(Date.parse(month + \" 1, 2000\")).getMonth();\n        return new Date(parseInt(year), monthIndex, parseInt(day));\n      };\n\n      const customDate1 = parseCustomDate(dateStr1);\n      const customDate2 = parseCustomDate(dateStr2);\n\n      return customDate1.getTime() - customDate2.getTime();\n    } catch (error) {\n      console.error('Date comparison error:', error);\n      return 0; // Return 0 if comparison fails\n    }\n  }\n\n  // Helper function to check if a subscription is currently valid\n  _isSubscriptionValid(subscription, currentDate) {\n    try {\n      const startDateCompare = this._compareDates(subscription.StartDate, currentDate);\n      const endDateCompare = this._compareDates(subscription.EndDate, currentDate);\n\n      return subscription.isValid && startDateCompare <= 0 && endDateCompare >= 0;\n    } catch (error) {\n      console.error('Subscription validation error:', error);\n      return false;\n    }\n  }\n\n  // Get hotels with valid subscriptions\n  async getHotelsWithValidSubscription() {\n    try {\n      const currentDate = new Date().toLocaleDateString('en-GB', {\n        day: 'numeric',\n        month: 'long',\n        year: 'numeric'\n      });\n\n      // First get all subscriptions\n      const allSubscriptions = await this.model.aggregate([\n        {\n          $lookup: {\n            from: \"hotels\",\n            localField: \"HotelId\",\n            foreignField: \"_id\",\n            as: \"hotel\"\n          }\n        },\n        {\n          $unwind: \"$hotel\"\n        }\n      ]);\n\n      // Filter and group valid subscriptions by hotel\n      const validHotels = new Map();\n\n      allSubscriptions.forEach(subscription => {\n        const hotelId = subscription.HotelId.toString();\n\n        if (this._isSubscriptionValid(subscription, currentDate)) {\n          // If we haven't seen this hotel before, or if this subscription is newer\n          if (!validHotels.has(hotelId) ||\n            this._compareDates(subscription.EndDate, validHotels.get(hotelId).EndDate) > 0) {\n            validHotels.set(hotelId, {\n              hotel: subscription.hotel,\n              EndDate: subscription.EndDate\n            });\n          }\n        }\n      });\n\n      return {\n        returncode: 200,\n        message: \"Successfully fetched hotels with valid subscriptions\",\n        output: Array.from(validHotels.values()).map(item => item.hotel)\n      };\n    } catch (error) {\n      console.error('Error in getHotelsWithValidSubscription:', error);\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      };\n    }\n  }\n\n  // Get hotels with invalid or no subscriptions\n  async getHotelsWithInvalidOrNoSubscription() {\n    try {\n      const currentDate = new Date().toLocaleDateString('en-GB', {\n        day: 'numeric',\n        month: 'long',\n        year: 'numeric'\n      });\n\n      // Get all subscriptions\n      const allSubscriptions = await this.model.aggregate([\n        {\n          $lookup: {\n            from: \"hotels\",\n            localField: \"HotelId\",\n            foreignField: \"_id\",\n            as: \"hotel\"\n          }\n        },\n        {\n          $unwind: \"$hotel\"\n        }\n      ]);\n\n      // Keep track of hotels with valid and invalid subscriptions\n      const validHotelIds = new Set();\n      const invalidHotels = new Map();\n\n      allSubscriptions.forEach(subscription => {\n        const hotelId = subscription.HotelId.toString();\n\n        if (this._isSubscriptionValid(subscription, currentDate)) {\n          validHotelIds.add(hotelId);\n          invalidHotels.delete(hotelId); // Remove from invalid if it was there\n        } else if (!validHotelIds.has(hotelId)) {\n          // Only add to invalid if we haven't found a valid subscription for this hotel\n          if (!invalidHotels.has(hotelId) ||\n            this._compareDates(subscription.EndDate, invalidHotels.get(hotelId).EndDate) > 0) {\n            invalidHotels.set(hotelId, {\n              hotel: subscription.hotel,\n              EndDate: subscription.EndDate\n            });\n          }\n        }\n      });\n\n      // Get hotels that don't have any subscription entries\n      const allHotels = await mongoose.model('Hotels').find({\n        _id: { $nin: await this.model.distinct('HotelId') }\n      });\n\n      // Combine hotels with invalid subscriptions and hotels with no subscriptions\n      const combinedResults = [\n        ...Array.from(invalidHotels.values()).map(item => item.hotel),\n        ...allHotels\n      ];\n\n      return {\n        returncode: 200,\n        message: \"Successfully fetched hotels with invalid or no subscriptions\",\n        output: combinedResults\n      };\n    } catch (error) {\n      console.error('Error in getHotelsWithInvalidOrNoSubscription:', error);\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      };\n    }\n  }\n\n  // Create\n  async createHotelSubscription(data) {\n    try {\n      // Normalize field names to match schema\n      const normalizedData = {\n        HotelId: data.hotel_id,\n        SubscriptionId: data.subscription_id,\n        isValid: data.is_valid,\n        StartDate: data.start_date,\n        EndDate: data.end_date,\n        PaymentStatus: data.payment_status,\n        PaymentMode: data.payment_mode,\n        Cash: data.cash,\n        UPI: data.upi,\n        CreditCard: data.credit_card\n      }\n\n      const result = await this.create(normalizedData);\n      return result;\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      };\n    }\n  }\n\n  async readSubscription(hotel_id) {\n    try {\n\n      const result = await this.readMany(\n        { HotelId: hotel_id, isValid: true }\n      );\n\n      return result;\n\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      };\n    }\n  }\n\n  // Subscription Payment\n  async updateSubscriptionPayment(data) {\n    try {\n\n      const updateData = {\n        isValid: true,\n        PaymentStatus: data.payment_status,\n        PaymentMode: data.payment_mode,\n        Cash: data.cash,\n        UPI: data.upi,\n        CreditCard: data.credit_card\n      };\n\n      const hotel_subscription_id = data.hotel_subscription_id;\n      const result = await this.update(\n        { _id: hotel_subscription_id },\n        updateData,\n        { new: true }\n      );\n\n      return result;\n\n    } catch (error) {\n\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      };\n    }\n  }\n\n\n  // Deactivate an account\n  async deactivateAccount(data) {\n    try {\n\n      const updateData = {\n        isValid: data.is_valid,\n        Status: data.status\n      };\n\n      const hotel_subscription_id = data.hotel_subscription_id;\n      const result = await this.update(\n        { _id: hotel_subscription_id },\n        updateData,\n        { new: true }\n      );\n\n      return result;\n\n    } catch (error) {\n\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      };\n    }\n  }\n\n  // Delete by Filter\n  async deleteByFilter(filter) {\n    const session = await mongoose.startSession();\n    session.startTransaction();\n    try {\n\n      const result = await this.delete(filter);\n      await session.commitTransaction();\n      return result;\n\n    } catch (error) {\n\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      };\n    }\n  }\n}\n\nconst hotelSubscriptionCrud = new HotelSubscriptionCrud();\nexport default hotelSubscriptionCrud;\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1315, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1321, "column": 0}, "map": {"version":3,"sources":["file:///home/batman/Workspace/Eatofy/src/app/lib/crud/Hotels.js"],"sourcesContent":["import { BaseCrud } from \"./BaseCrud\";\nimport Hotels from \"../models/Hotels\";\nimport mongoose from \"mongoose\";\nimport hotelSubscriptionCrud from \"./HotelSubscription\";\n\nclass HotelsCrud extends BaseCrud {\n  constructor() {\n    super(Hotels);\n  }\n\n  // Create new Hotel with logo\n  async createHotel(hotelData) {\n    try {\n\n      // Normalize field names to match schema\n      const normalizedData = {\n        HotelName: hotelData.hotel_name,\n        Email: hotelData.email,\n        Address: hotelData.address,\n        Speciality: hotelData.speciality,\n        Logo: hotelData.logo,\n        Contacts: hotelData.contacts,\n        Website: hotelData.website,\n        FSSAICode: hotelData.fssai_code,\n        GSTIN: hotelData.gstin\n      };\n\n      const result = await this.create(normalizedData);\n      return result;\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      };\n    }\n  }\n\n  // Update hotel logo\n  async updateHotelLogo(hotel_id, logoData) {\n    try {\n      // Get existing hotel to delete old logo\n      const result = await this.update(\n        { _id: hotel_id },\n        { Logo: logoData },\n        { new: true }\n      );\n\n      return result;\n\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      };\n    }\n  }\n\n  // Read Hotel By ID \n  async readHotelByID(hotel_id) {\n    try {\n      const hotel = await this.readOne({ _id: hotel_id });\n      if (hotel.returncode !== 200) {\n        return {\n          returncode: 401,\n          message: \"Hotel doesn't exist\",\n          output: []\n        };\n      }\n\n      return hotel;\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      };\n    }\n  }\n\n  // Read Hotel By Name\n  async readHotelByName(hotel_name) {\n    try {\n      const hotel = await this.readOne({ HotelName: hotel_name });\n      if (!hotel) {\n        return {\n          returncode: 401,\n          message: \"Hotel doesn't exist\",\n          output: []\n        };\n      }\n\n      return hotel;\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      };\n    }\n  }\n\n  // Check if hotel exists\n  async doesHotelExists(hotel_name) {\n    try {\n      const hotel = await this.readOne({ HotelName: hotel_name }, {});\n      if (hotel.returncode !== 200) {\n        return {\n          returncode: 401,\n          message: \"Hotel doesn't exist\",\n          output: []\n        };\n      }\n\n      return hotel;\n\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      };\n    }\n  }\n\n  // Read All Hotels\n  async readAllHotels() {\n    try {\n      const hotels = await this.readMany(\n        {}, // filters\n        {\n          sort: { HotelName: 1 },\n          lean: true\n        }\n      );\n\n      return {\n        returncode: 200,\n        message: \"Data fetched successfully\",\n        output: hotels.output\n      };\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      };\n    }\n  }\n\n  // Update Hotel Info\n  async updateHotelInfo(hotelData) {\n    try {\n      const updateData = {\n        HotelName: hotelData.hotel_name,\n        Email: hotelData.email,\n        Address: hotelData.address,\n        Speciality: hotelData.speciality,\n        Contacts: hotelData.contacts,\n        Website: hotelData.website,\n        FSSAICode: hotelData.fssai_code,\n        GSTIN: hotelData.gstin\n      };\n\n      const result = await this.update(\n        { _id: hotelData.hotel_id },\n        updateData,\n        { new: true }\n      );\n\n      return result;\n\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      };\n    }\n  }\n\n  // Delete Hotel\n  async deleteHotel(hotel_id) {\n    try {\n\n      // Extract ID from object if needed\n      const id = typeof hotel_id === 'object' ? hotel_id.hotel_id : hotel_id;\n\n      // Ensure hotel_id is a valid ObjectId\n      if (!mongoose.Types.ObjectId.isValid(id)) {\n        return {\n          returncode: 400,\n          message: \"Invalid hotel ID format\",\n          output: []\n        };\n      }\n\n      const hotel = await this.readOne({ _id: id });\n\n      if (!hotel) {\n        return {\n          returncode: 404,\n          message: \"Hotel not found\",\n          output: []\n        };\n      }\n\n      // Delete all related data in a transaction\n      if (hotel.returncode === 200) {\n\n        // Delete the Hotel\n        await this.delete({ _id: id });\n\n        return {\n          returncode: 200,\n          message: \"Hotel deleted successfully\",\n          output: []\n        };\n      }\n\n      return {\n        returncode: 400,\n        message: \"Hotel not Found\",\n        output: []\n      };\n\n\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: `Failed to delete hotel: ${error.message}`,\n        output: []\n      };\n    }\n  }\n\n}\n\nconst hotelsCrud = new HotelsCrud();\nexport default hotelsCrud;\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1547, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1553, "column": 0}, "map": {"version":3,"sources":["file:///home/batman/Workspace/Eatofy/src/app/lib/crud/Staffs.js"],"sourcesContent":["import Staffs from \"../models/Staffs\";\nimport { comparePassword } from \"../utils/password\";\nimport { BaseCrud } from \"./BaseCrud\";\nimport hotelsCrud from \"./Hotels\";\n\nclass StaffCrud extends BaseCrud {\n  constructor() {\n    super(Staffs);\n  }\n\n  async createStaff(data) {\n    try {\n      const normalizedData = {\n        FirstName: data.first_name,\n        LastName: data.last_name,\n        Address: data.address,\n        Contact: data.contact,\n        Email: data.email,\n        Password: data.password,\n        SaltPassword: 10,\n        DepartmentName: data.department_name,\n        Designation: data.designation,\n        Salary: data.salary,\n        Incentive: data.incentives,\n        HotelId: data.hotel_id,\n        Role: data.role\n      }\n      const result = await this.create(normalizedData);\n      return result;\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      };\n    }\n  }\n\n  async login(email, password) {\n    try {\n      const staff = await this.readOne({ Email: email });\n      if (staff.returncode !== 200) {\n        return {\n          returncode: 401,\n          message: \"Staff doesn't exist\",\n          output: []\n        };\n      }\n      // Verify password\n      const isValid = await comparePassword(password, staff.output.Password, staff.output.SaltPassword);\n      if (!isValid) {\n        return {\n          returncode: 401,\n          message: 'Invalid credentials',\n          output: []\n        };\n      }\n      // Get hotel information\n      const hotel = await hotelsCrud.readHotelByID(staff.output.HotelId);\n      if (!hotel) {\n        return {\n          returncode: 404,\n          message: 'Associated hotel not found',\n          output: []\n        };\n      }\n      // Return staff data with hotel information\n      const userData = {\n        hotelId: hotel.output._id,\n        hotelName: hotel.output.HotelName,\n        role: staff.output.Role,\n        staff_info: staff.output\n      };\n      return {\n        returncode: 200,\n        message: 'Login successful',\n        output: [userData]\n      };\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      };\n    }\n  }\n\n  async fetchStaffByHotelId(hotel_id) {\n    try {\n      const staff = await this.readMany({ HotelId: hotel_id });\n      if (staff.returncode !== 200) {\n        return {\n          returncode: 401,\n          message: \"Staffs doesn't exist\",\n          output: []\n        };\n      }\n      return staff;\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      };\n    }\n  }\n\n  async fetchStaffByEmail(email) {\n    try {\n      const staff = await this.readOne({ Email: email });\n      if (staff.returncode !== 200) {\n        return {\n          returncode: 401,\n          message: \"Staff doesn't exist\",\n          output: []\n        };\n      }\n      return staff;\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      };\n    }\n  }\n\n  // Check if staff exists\n  async doesStaffExists(first_name, last_name, contact) {\n    try {\n      const hotel = await this.readOne({ FirstName: first_name, LastName: last_name, Contact: contact }, {});\n      if (hotel.returncode !== 200) {\n        return {\n          returncode: 401,\n          message: \"Hotel doesn't exist\",\n          output: []\n        };\n      }\n      return hotel;\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      };\n    }\n  }\n\n  async updatePassword(data) {\n    try {\n      const updateData = {\n        Password: data.hashedPassword,\n        SaltPassword: data.salt\n      };\n      const result = await this.update(\n        { _id: data.staff_id },\n        updateData,\n        { new: true }\n      );\n      return result;\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      };\n    }\n  }\n\n  async updateStaffInfo(data) {\n    try {\n      const updateData = {\n        FirstName: data.first_name,\n        LastName: data.last_name,\n        Address: data.address,\n        Contact: data.contact,\n        Email: data.email,\n        Password: data.password,\n        DepartmentName: data.department_name,\n        Designation: data.designation,\n        Salary: data.salary,\n        Incentive: data.incentives,\n        Role: data.role\n      }\n      const result = await this.update(\n        { _id: data.staff_id },\n        updateData,\n        { new: true }\n      );\n      return result;\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      };\n    }\n  }\n\n  async deleteStaff(filter) {\n    try {\n      const result = await this.delete(filter);\n      return result;\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      };\n    }\n\n  }\n\n  async deleteStaffById(staff_id) {\n    try {\n      // Finally, delete the staff itself\n      const deleteResult = await this.delete({ _id: staff_id });\n      return deleteResult;\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      };\n    }\n  }\n\n}\n\nconst staffCrud = new StaffCrud();\nexport default staffCrud;\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1792, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1798, "column": 0}, "map": {"version":3,"sources":["file:///home/batman/Workspace/Eatofy/src/app/api/sync/Staffs/pull/controller.js"],"sourcesContent":["import staffCrud from \"@/app/lib/crud/Staffs\";\n\nexport async function fetch_staff(tokenData) {\n\ttry {\n\n\t\tconst hotel_id = await tokenData.hotelId;\n\t\tconst existing_staffs = await staffCrud.fetchStaffByHotelId(hotel_id);\n\n\t\tif (existing_staffs.returncode === 404) {\n\t\t\treturn {\n\t\t\t\treturncode: 409,\n\t\t\t\tmessage: \"No Staffs to be displayed\",\n\t\t\t\toutput: []\n\t\t\t};\n\t\t}\n\n\t\treturn existing_staffs;\n\n\t} catch (error) {\n\t\treturn {\n\t\t\treturncode: 500,\n\t\t\tmessage: error.message,\n\t\t\toutput: []\n\t\t};\n\t}\n}\n"],"names":[],"mappings":";;;AAAA;;AAEO,eAAe,YAAY,SAAS;IAC1C,IAAI;QAEH,MAAM,WAAW,MAAM,UAAU,OAAO;QACxC,MAAM,kBAAkB,MAAM,qIAAA,CAAA,UAAS,CAAC,mBAAmB,CAAC;QAE5D,IAAI,gBAAgB,UAAU,KAAK,KAAK;YACvC,OAAO;gBACN,YAAY;gBACZ,SAAS;gBACT,QAAQ,EAAE;YACX;QACD;QAEA,OAAO;IAER,EAAE,OAAO,OAAO;QACf,OAAO;YACN,YAAY;YACZ,SAAS,MAAM,OAAO;YACtB,QAAQ,EAAE;QACX;IACD;AACD"}},
    {"offset": {"line": 1823, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1853, "column": 0}, "map": {"version":3,"sources":["file:///home/batman/Workspace/Eatofy/src/app/lib/utils/jwt.js"],"sourcesContent":["import jwt from 'jsonwebtoken';\n\nconst JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key'; // In production, always use environment variable\nconst JWT_EXPIRES_IN = '24h';\n\nexport const createToken = (payload) => {\n  return jwt.sign(payload, JWT_SECRET, { expiresIn: JWT_EXPIRES_IN });\n};\n\nexport const verifyToken = (token) => {\n  try {\n    return jwt.verify(token, JWT_SECRET);\n  } catch (error) {\n    return null;\n  }\n};\n\nexport const updateToken = (token, newData) => {\n  try {\n    const decoded = jwt.verify(token, JWT_SECRET);\n    const updatedPayload = { ...decoded, ...newData };\n    // Remove the exp claim to generate a fresh expiration\n    delete updatedPayload.exp;\n    return jwt.sign(updatedPayload, JWT_SECRET, { expiresIn: JWT_EXPIRES_IN });\n  } catch (error) {\n    return null;\n  }\n};\n\nexport const decodeToken = (token) => {\n  try {\n    return jwt.decode(token);\n  } catch (error) {\n    return null;\n  }\n};\n"],"names":[],"mappings":";;;;;;AAAA;;AAEA,MAAM,aAAa,QAAQ,GAAG,CAAC,UAAU,IAAI,mBAAmB,iDAAiD;AACjH,MAAM,iBAAiB;AAEhB,MAAM,cAAc,CAAC;IAC1B,OAAO,uIAAA,CAAA,UAAG,CAAC,IAAI,CAAC,SAAS,YAAY;QAAE,WAAW;IAAe;AACnE;AAEO,MAAM,cAAc,CAAC;IAC1B,IAAI;QACF,OAAO,uIAAA,CAAA,UAAG,CAAC,MAAM,CAAC,OAAO;IAC3B,EAAE,OAAO,OAAO;QACd,OAAO;IACT;AACF;AAEO,MAAM,cAAc,CAAC,OAAO;IACjC,IAAI;QACF,MAAM,UAAU,uIAAA,CAAA,UAAG,CAAC,MAAM,CAAC,OAAO;QAClC,MAAM,iBAAiB;YAAE,GAAG,OAAO;YAAE,GAAG,OAAO;QAAC;QAChD,sDAAsD;QACtD,OAAO,eAAe,GAAG;QACzB,OAAO,uIAAA,CAAA,UAAG,CAAC,IAAI,CAAC,gBAAgB,YAAY;YAAE,WAAW;QAAe;IAC1E,EAAE,OAAO,OAAO;QACd,OAAO;IACT;AACF;AAEO,MAAM,cAAc,CAAC;IAC1B,IAAI;QACF,OAAO,uIAAA,CAAA,UAAG,CAAC,MAAM,CAAC;IACpB,EAAE,OAAO,OAAO;QACd,OAAO;IACT;AACF"}},
    {"offset": {"line": 1898, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1904, "column": 0}, "map": {"version":3,"sources":["file:///home/batman/Workspace/Eatofy/src/app/api/sync/Staffs/pull/route.js"],"sourcesContent":["import { fetch_staff } from './controller';\nimport { NextResponse } from 'next/server';\nimport { verifyToken } from '@/app/lib/utils/jwt';\n\nexport async function GET(request) {\n\ttry {\n\n\t\t// Get token from cookie\n\t\tconst token = request.cookies.get('hotel_auth_token')?.value;\n\t\tif (!token) {\n\t\t\treturn NextResponse.json({\n\t\t\t\treturncode: 401,\n\t\t\t\tmessage: \"No token provided\",\n\t\t\t\toutput: []\n\t\t\t}, { status: 401, statusText: \"No token provided\" });\n\t\t}\n\n\t\t// Verify the token\n\t\tconst userData = verifyToken(token);\n\t\tif (!userData) {\n\t\t\treturn NextResponse.json({\n\t\t\t\treturncode: 401,\n\t\t\t\tmessage: \"Invalid or expired token\",\n\t\t\t\toutput: []\n\t\t\t}, { status: 401, statusText: \"Invalid or expired token\" });\n\t\t}\n\n\t\t// Proceed with hotel fetch if token is valid\n\t\tconst result = await fetch_staff(userData);\n\n\t\treturn NextResponse.json({\n\t\t\treturncode: result.returncode,\n\t\t\tmessage: result.message,\n\t\t\toutput: result.output\n\t\t}, {\n\t\t\tstatus: result.returncode,\n\t\t});\n\n\t} catch (error) {\n\t\treturn NextResponse.json(\n\t\t\t{\n\t\t\t\treturncode: 500,\n\t\t\t\tmessage: error.message,\n\t\t\t\toutput: []\n\t\t\t},\n\t\t\t{ status: 500 }\n\t\t);\n\t}\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEO,eAAe,IAAI,OAAO;IAChC,IAAI;QAEH,wBAAwB;QACxB,MAAM,QAAQ,QAAQ,OAAO,CAAC,GAAG,CAAC,qBAAqB;QACvD,IAAI,CAAC,OAAO;YACX,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACxB,YAAY;gBACZ,SAAS;gBACT,QAAQ,EAAE;YACX,GAAG;gBAAE,QAAQ;gBAAK,YAAY;YAAoB;QACnD;QAEA,mBAAmB;QACnB,MAAM,WAAW,CAAA,GAAA,mIAAA,CAAA,cAAW,AAAD,EAAE;QAC7B,IAAI,CAAC,UAAU;YACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACxB,YAAY;gBACZ,SAAS;gBACT,QAAQ,EAAE;YACX,GAAG;gBAAE,QAAQ;gBAAK,YAAY;YAA2B;QAC1D;QAEA,6CAA6C;QAC7C,MAAM,SAAS,MAAM,CAAA,GAAA,2JAAA,CAAA,cAAW,AAAD,EAAE;QAEjC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACxB,YAAY,OAAO,UAAU;YAC7B,SAAS,OAAO,OAAO;YACvB,QAAQ,OAAO,MAAM;QACtB,GAAG;YACF,QAAQ,OAAO,UAAU;QAC1B;IAED,EAAE,OAAO,OAAO;QACf,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACvB;YACC,YAAY;YACZ,SAAS,MAAM,OAAO;YACtB,QAAQ,EAAE;QACX,GACA;YAAE,QAAQ;QAAI;IAEhB;AACD"}},
    {"offset": {"line": 1958, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}