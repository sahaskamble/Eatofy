{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///home/batman/Workspace/Eatofy/src/app/lib/utils/SpecialStringsValidator.js"],"sourcesContent":["export function SubscriptionStatusValidator(value) {\n\n  let validation_flag = false;\n  var list = [\"Waiting\", \"On Going\", \"Expired\", \"About to Expire\"];\n\n  list.map((item) => {\n    if (value === item) {\n      validation_flag = true;\n    }\n  });\n\n  return validation_flag;\n}\n\nexport function PaymentStatusValidator(value) {\n\n  let validation_flag = false;\n  var list = [\"Paid\", \"Unpaid\", \"Part-Paid\"];\n\n  list.map((item) => {\n    if (value === item) {\n      validation_flag = true;\n    }\n  });\n\n  return validation_flag;\n}\n\nexport function PaymentModeValidator(value) {\n\n  let validation_flag = false;\n  var list = [\"Cash\", \"UPI\", \"Credit-Card\", \"Due\", \"Part\"];\n\n  list.map((item) => {\n    if (value === item) {\n      validation_flag = true;\n    }\n  });\n\n  return validation_flag;\n}\n\nexport function OrderTypeValidator(value) {\n\n  let validation_flag = false;\n  var list = [\"Takeaway\", \"Delivery\", \"Dine-In\", \"Swiggy\", \"Zomato\", \"QR-Orders\"];\n\n  list.map((item) => {\n    if (value === item) {\n      validation_flag = true;\n    }\n  });\n\n  return validation_flag;\n}\n\nexport function TableStatusValidator(value) {\n\n  let validation_flag = false;\n  var list = [\"Booked\", \"Bill Pending\", \"Open\"];\n\n  list.map((item) => {\n    if (value === item) {\n      validation_flag = true;\n    }\n  });\n\n  return validation_flag;\n}\n\nexport function StockStatusValidator(value) {\n\n  let validation_flag = false;\n  var list = [\"Available\", \"Low Stock\", \"Unavailable\"];\n\n  list.map((item) => {\n    if (value === item) {\n      validation_flag = true;\n    }\n  });\n\n  return validation_flag;\n}\n\nexport function AttendanceValidator(value) {\n\n  let validation_flag = false;\n  var list = [\"Absent\", \"Present\", \"Half-Day\"];\n\n  list.map((item) => {\n    if (value === item) {\n      validation_flag = true;\n    }\n  });\n\n  return validation_flag;\n}\n\nexport function ExpenseCategoryValidator(value) {\n\n  let validation_flag = false;\n  var list = [\"Salary\", \"Purchases\", \"Miscellaneous\"];\n\n  list.map((item) => {\n    if (value === item) {\n      validation_flag = true;\n    }\n  });\n\n  return validation_flag;\n}\n"],"names":[],"mappings":";;;;;;;;;;AAAO,SAAS,4BAA4B,KAAK;IAE/C,IAAI,kBAAkB;IACtB,IAAI,OAAO;QAAC;QAAW;QAAY;QAAW;KAAkB;IAEhE,KAAK,GAAG,CAAC,CAAC;QACR,IAAI,UAAU,MAAM;YAClB,kBAAkB;QACpB;IACF;IAEA,OAAO;AACT;AAEO,SAAS,uBAAuB,KAAK;IAE1C,IAAI,kBAAkB;IACtB,IAAI,OAAO;QAAC;QAAQ;QAAU;KAAY;IAE1C,KAAK,GAAG,CAAC,CAAC;QACR,IAAI,UAAU,MAAM;YAClB,kBAAkB;QACpB;IACF;IAEA,OAAO;AACT;AAEO,SAAS,qBAAqB,KAAK;IAExC,IAAI,kBAAkB;IACtB,IAAI,OAAO;QAAC;QAAQ;QAAO;QAAe;QAAO;KAAO;IAExD,KAAK,GAAG,CAAC,CAAC;QACR,IAAI,UAAU,MAAM;YAClB,kBAAkB;QACpB;IACF;IAEA,OAAO;AACT;AAEO,SAAS,mBAAmB,KAAK;IAEtC,IAAI,kBAAkB;IACtB,IAAI,OAAO;QAAC;QAAY;QAAY;QAAW;QAAU;QAAU;KAAY;IAE/E,KAAK,GAAG,CAAC,CAAC;QACR,IAAI,UAAU,MAAM;YAClB,kBAAkB;QACpB;IACF;IAEA,OAAO;AACT;AAEO,SAAS,qBAAqB,KAAK;IAExC,IAAI,kBAAkB;IACtB,IAAI,OAAO;QAAC;QAAU;QAAgB;KAAO;IAE7C,KAAK,GAAG,CAAC,CAAC;QACR,IAAI,UAAU,MAAM;YAClB,kBAAkB;QACpB;IACF;IAEA,OAAO;AACT;AAEO,SAAS,qBAAqB,KAAK;IAExC,IAAI,kBAAkB;IACtB,IAAI,OAAO;QAAC;QAAa;QAAa;KAAc;IAEpD,KAAK,GAAG,CAAC,CAAC;QACR,IAAI,UAAU,MAAM;YAClB,kBAAkB;QACpB;IACF;IAEA,OAAO;AACT;AAEO,SAAS,oBAAoB,KAAK;IAEvC,IAAI,kBAAkB;IACtB,IAAI,OAAO;QAAC;QAAU;QAAW;KAAW;IAE5C,KAAK,GAAG,CAAC,CAAC;QACR,IAAI,UAAU,MAAM;YAClB,kBAAkB;QACpB;IACF;IAEA,OAAO;AACT;AAEO,SAAS,yBAAyB,KAAK;IAE5C,IAAI,kBAAkB;IACtB,IAAI,OAAO;QAAC;QAAU;QAAa;KAAgB;IAEnD,KAAK,GAAG,CAAC,CAAC;QACR,IAAI,UAAU,MAAM;YAClB,kBAAkB;QACpB;IACF;IAEA,OAAO;AACT"}},
    {"offset": {"line": 183, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 189, "column": 0}, "map": {"version":3,"sources":["file:///home/batman/Workspace/Eatofy/src/app/lib/utils/StringValidator.js"],"sourcesContent":["export default function StringValidators(value) {\n  // Ensure the input is a string\n  if (typeof value !== \"string\") {\n    return false;\n  }\n\n  if (value === null) {\n    return true;\n  }\n\n  // List of forbidden characters\n  const charList = ['/', '\\\\', '\"', ';', \"'\", '+', '`', '^'];\n  let validationFlag = true;\n\n  // Iterate over each character in the list\n  for (let char of charList) {\n\n    // Check if the forbidden character is present in the string\n    if (value.includes(char)) {\n      validationFlag = false;\n      break; // Stop checking further once an invalid character is found\n    }\n  }\n\n  return validationFlag;\n}\n"],"names":[],"mappings":";;;AAAe,SAAS,iBAAiB,KAAK;IAC5C,+BAA+B;IAC/B,IAAI,OAAO,UAAU,UAAU;QAC7B,OAAO;IACT;IAEA,IAAI,UAAU,MAAM;QAClB,OAAO;IACT;IAEA,+BAA+B;IAC/B,MAAM,WAAW;QAAC;QAAK;QAAM;QAAK;QAAK;QAAK;QAAK;QAAK;KAAI;IAC1D,IAAI,iBAAiB;IAErB,0CAA0C;IAC1C,KAAK,IAAI,QAAQ,SAAU;QAEzB,4DAA4D;QAC5D,IAAI,MAAM,QAAQ,CAAC,OAAO;YACxB,iBAAiB;YACjB,OAAO,2DAA2D;QACpE;IACF;IAEA,OAAO;AACT"}},
    {"offset": {"line": 222, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 228, "column": 0}, "map": {"version":3,"sources":["file:///home/batman/Workspace/Eatofy/src/app/lib/models/Sections.js"],"sourcesContent":["import mongoose from \"mongoose\";\nimport { OrderTypeValidator } from \"../utils/SpecialStringsValidator\";\nimport StringValidators from \"../utils/StringValidator\";\n\nexport const SectionsSchema = new mongoose.Schema(\n  {\n    SectionName: {\n      type: String,\n      required: true,\n      validate: {\n        validator: (value) => StringValidators(value)\n      },\n      message: \"Section Name should not contain invalid characters like /, \\\\, \\\", ;, ', +, `, or ^\"\n\n    },\n    HotelId: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"Hotels\", // Reference to the Hotels collection\n      required: true,\n    },\n    Type: {\n      type: String,\n      default: \"Dine-In\",\n      validate: {\n        validator: (value) => OrderTypeValidator(value)\n      },\n      message: \"Section Type must be one of:- 'Takeaway', 'Delivery', 'Dine-In', 'Swiggy', 'Zomato', 'QR-Orders'.\"\n    },\n\n    // Children Relationship\n    Menus: [\n      {\n        type: mongoose.Schema.Types.ObjectId,\n        ref: \"Menus\", // Reference to the Menus collection\n      },\n    ],\n    Tables: [\n      {\n        type: mongoose.Schema.Types.ObjectId,\n        ref: \"Tables\", // Reference to the Tables collection\n      },\n    ],\n  },\n  { timestamps: true }\n);\n\n// Unique constraint on HotelId and SectionName\nSectionsSchema.index({ HotelId: 1, SectionName: 1 }, { unique: true });\n\n// Add pre-remove middleware\nSectionsSchema.pre('remove', async function(next) {\n  try {\n    // Check for and delete related menus\n    const Menus = mongoose.model('Menus');\n    await Menus.deleteMany({ SectionId: this._id });\n\n    // Check for and delete related tables\n    const Tables = mongoose.model('Tables');\n    await Tables.deleteMany({ SectionId: this._id });\n\n    next();\n  } catch (error) {\n    next(error);\n  }\n});\n\n// Add pre-deleteMany middleware\nSectionsSchema.pre('deleteMany', async function(next) {\n  try {\n    // Get the sections that will be deleted\n    const Sections = mongoose.model('Sections');\n    const sections = await Sections.find(this.getFilter());\n    const sectionIds = sections.map(section => section._id);\n\n    if (sectionIds.length > 0) {\n      // Delete all related menus\n      const Menus = mongoose.model('Menus');\n      await Menus.deleteMany({ SectionId: { $in: sectionIds } });\n\n      // Update tables to remove section references\n      const Tables = mongoose.model('Tables');\n      await Tables.deleteMany({ SectionId: { $in: sectionIds } });\n    }\n\n    next();\n  } catch (error) {\n    next(error);\n  }\n});\n\nexport default mongoose.models.Sections || mongoose.model(\"Sections\", SectionsSchema);\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAEO,MAAM,iBAAiB,IAAI,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAC/C;IACE,aAAa;QACX,MAAM;QACN,UAAU;QACV,UAAU;YACR,WAAW,CAAC,QAAU,CAAA,GAAA,+IAAA,CAAA,UAAgB,AAAD,EAAE;QACzC;QACA,SAAS;IAEX;IACA,SAAS;QACP,MAAM,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,KAAK;QACL,UAAU;IACZ;IACA,MAAM;QACJ,MAAM;QACN,SAAS;QACT,UAAU;YACR,WAAW,CAAC,QAAU,CAAA,GAAA,uJAAA,CAAA,qBAAkB,AAAD,EAAE;QAC3C;QACA,SAAS;IACX;IAEA,wBAAwB;IACxB,OAAO;QACL;YACE,MAAM,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;YACpC,KAAK;QACP;KACD;IACD,QAAQ;QACN;YACE,MAAM,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;YACpC,KAAK;QACP;KACD;AACH,GACA;IAAE,YAAY;AAAK;AAGrB,+CAA+C;AAC/C,eAAe,KAAK,CAAC;IAAE,SAAS;IAAG,aAAa;AAAE,GAAG;IAAE,QAAQ;AAAK;AAEpE,4BAA4B;AAC5B,eAAe,GAAG,CAAC,UAAU,eAAe,IAAI;IAC9C,IAAI;QACF,qCAAqC;QACrC,MAAM,QAAQ,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;QAC7B,MAAM,MAAM,UAAU,CAAC;YAAE,WAAW,IAAI,CAAC,GAAG;QAAC;QAE7C,sCAAsC;QACtC,MAAM,SAAS,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;QAC9B,MAAM,OAAO,UAAU,CAAC;YAAE,WAAW,IAAI,CAAC,GAAG;QAAC;QAE9C;IACF,EAAE,OAAO,OAAO;QACd,KAAK;IACP;AACF;AAEA,gCAAgC;AAChC,eAAe,GAAG,CAAC,cAAc,eAAe,IAAI;IAClD,IAAI;QACF,wCAAwC;QACxC,MAAM,WAAW,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;QAChC,MAAM,WAAW,MAAM,SAAS,IAAI,CAAC,IAAI,CAAC,SAAS;QACnD,MAAM,aAAa,SAAS,GAAG,CAAC,CAAA,UAAW,QAAQ,GAAG;QAEtD,IAAI,WAAW,MAAM,GAAG,GAAG;YACzB,2BAA2B;YAC3B,MAAM,QAAQ,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;YAC7B,MAAM,MAAM,UAAU,CAAC;gBAAE,WAAW;oBAAE,KAAK;gBAAW;YAAE;YAExD,6CAA6C;YAC7C,MAAM,SAAS,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;YAC9B,MAAM,OAAO,UAAU,CAAC;gBAAE,WAAW;oBAAE,KAAK;gBAAW;YAAE;QAC3D;QAEA;IACF,EAAE,OAAO,OAAO;QACd,KAAK;IACP;AACF;uCAEe,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,QAAQ,IAAI,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,YAAY"}},
    {"offset": {"line": 330, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 336, "column": 0}, "map": {"version":3,"sources":["file:///home/batman/Workspace/Eatofy/src/app/lib/crud/BaseCrud.js"],"sourcesContent":["export class BaseCrud {\n  constructor(model) {\n    this.model = model;\n  }\n\n  // Create a new document\n  async create(data) {\n    try {\n      const doc = new this.model(data);\n      await doc.save();\n      return {\n        returncode: 200,\n        message: \"Data Created Successfully\",\n        output: doc\n      };\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      };\n    }\n  }\n\n  // Read all documents with optional filters\n  async readMany(filters = {}, options = {}) {\n    try {\n      const {\n        sort = {},\n        populate = [],\n        select = '',\n        skip = 0,\n        limit = 0,\n        lean = false\n      } = options;\n\n      let query = this.model.find(filters);\n\n      // Apply population\n      if (populate.length > 0) {\n        query = query.populate(populate);\n      }\n\n      // Apply sorting\n      if (Object.keys(sort).length > 0) {\n        query = query.sort(sort);\n      }\n\n      // Apply selection\n      if (select) {\n        query = query.select(select);\n      }\n\n      // Apply pagination\n      if (skip > 0) {\n        query = query.skip(skip);\n      }\n      if (limit > 0) {\n        query = query.limit(limit);\n      }\n\n      // Execute query\n      const docs = lean ? await query.lean() : await query.exec();\n\n      return {\n        returncode: 200,\n        message: \"Data Fetched Successfully\",\n        output: docs\n      };\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      };\n    }\n  }\n\n  // Read a single document\n  async readOne(filters = {}, options = {}) {\n    try {\n      const { populate = [], select = '', lean = false } = options;\n\n      let query = this.model.findOne(filters);\n\n      // Apply population\n      if (populate.length > 0) {\n        query = query.populate(populate);\n      }\n\n      // Apply selection\n      if (select) {\n        query = query.select(select);\n      }\n\n      // Execute query\n      const doc = lean ? await query.lean() : await query.exec();\n\n      if (!doc) {\n        return {\n          returncode: 404,\n          message: \"Document Not Found\",\n          output: []\n        };\n      }\n\n      return {\n        returncode: 200,\n        message: \"Data Fetched Successfully\",\n        output: doc\n      };\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      };\n    }\n  }\n\n  // Update a document\n  async update(filters = {}, data = {}, options = { new: true }) {\n    try {\n      const doc = await this.model.findOneAndUpdate(filters, data, options);\n\n      if (!doc) {\n        return {\n          returncode: 404,\n          message: \"Document Not Found\",\n          output: []\n        };\n      }\n\n      return {\n        returncode: 200,\n        message: \"Data Updated Successfully\",\n        output: doc\n      };\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      };\n    }\n  }\n\n  // Delete a document\n  async delete(filters = {}) {\n    try {\n      console.log('BaseCrud.delete called with:', {\n        model: this.model.modelName,\n        filters\n      });\n\n      const doc = await this.model.deleteMany(filters);\n      console.log('BaseCrud.delete result:', doc);\n\n      if (!doc || doc.deletedCount === 0) {\n        console.log('BaseCrud.delete - No documents found');\n        return {\n          returncode: 404,\n          message: \"Document Not Found\",\n          output: []\n        };\n      }\n\n      return {\n        returncode: 200,\n        message: \"Data Deleted Successfully\",\n        output: doc\n      };\n    } catch (error) {\n      console.error('Error in BaseCrud.delete:', error);\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      };\n    }\n  }\n\n  // Check if document exists\n  async exists(filters = {}) {\n    try {\n      const exists = await this.model.exists(filters);\n      return {\n        returncode: 200,\n        message: exists ? \"Document Exists\" : \"Document Not Found\",\n        output: !!exists\n      };\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: false\n      };\n    }\n  }\n\n  // Count documents\n  async count(filters = {}) {\n    try {\n      const count = await this.model.countDocuments(filters);\n      return {\n        returncode: 200,\n        message: \"Count Retrieved Successfully\",\n        output: count\n      };\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: 0\n      };\n    }\n  }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 527, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 533, "column": 0}, "map": {"version":3,"sources":["file:///home/batman/Workspace/Eatofy/src/app/lib/crud/Sections.js"],"sourcesContent":["import Sections from \"../models/Sections\";\nimport { BaseCrud } from \"./BaseCrud\";\n\nclass SectionsCrud extends BaseCrud {\n  constructor() {\n    super(Sections);\n  }\n\n  async createSections(data) {\n    try {\n      const normalizedData = {\n        SectionName: data.section_name,\n        HotelId: data.hotel_id,\n        Type: data.type\n      };\n      const result = await this.create(normalizedData);\n      return result;\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      }\n    }\n  }\n\n  async readDineInSections(hotel_id) {\n    try {\n      const sections = await this.readMany({ HotelId: hotel_id, Type: \"Dine-In\" });\n      return sections;\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      }\n    }\n  }\n\n  async readTakeawaySections(hotel_id) {\n    try {\n      const sections = await this.readMany({ HotelId: hotel_id, Type: \"Takeaway\" });\n      return sections;\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      }\n    }\n  }\n\n  async readDeliverySections(hotel_id) {\n    try {\n      const sections = await this.readMany({ HotelId: hotel_id, Type: \"Delivery\" });\n      return sections;\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      }\n    }\n  }\n\n  async readSwiggySections(hotel_id) {\n    try {\n      const sections = await this.readMany({ HotelId: hotel_id, Type: \"Swiggy\" });\n      return sections;\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      }\n    }\n  }\n\n  async readZomatoSections(hotel_id) {\n    try {\n      const sections = await this.readMany({ HotelId: hotel_id, Type: \"Zomato\" });\n      return sections;\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      }\n    }\n  }\n\n  async readQRSections(hotel_id) {\n    try {\n      const sections = await this.readMany({ HotelId: hotel_id, Type: \"QR-Orders\" });\n      return sections;\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      }\n    }\n  }\n\n  async readAllSections(hotel_id) {\n    try {\n      const sections = await this.readMany({ HotelId: hotel_id });\n      return sections;\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      }\n    }\n  }\n\n  async doesSectionExists(section_name, hotel_id) {\n    try {\n      const sections = await this.readMany({ HotelId: hotel_id, SectionName: section_name });\n      return sections;\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      }\n    }\n  }\n\n  async updateSections(data) {\n    try {\n      const updateData = {\n        SectionName: data.section_name,\n        Type: data.type\n      };\n      const section_id = data.section_id;\n      const result = await this.update(\n        { _id: section_id },\n        updateData,\n        { new: true }\n      );\n      return result;\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      }\n    }\n  }\n\n  async deleteSections(filter) {\n    try {\n      // Finally, delete the staff itself\n      const deleteResult = await this.delete(filter);\n      if (deleteResult.returncode === 200) {\n        return {\n          returncode: 200,\n          message: \"Section and all related data deleted successfully\",\n          output: []\n        };\n      }\n      return deleteResult;\n    } catch (error) {\n      console.error('Error in deleteStaffById:', error);\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      };\n    }\n  }\n\n  async deleteSectionsByID(section_id) {\n    try {\n      // Finally, delete the staff itself\n      const deleteResult = await this.delete({ _id: section_id });\n      if (deleteResult.returncode === 200) {\n        return {\n          returncode: 200,\n          message: \"Section and all related data deleted successfully\",\n          output: []\n        };\n      }\n      return deleteResult;\n    } catch (error) {\n      console.error('Error in deleteStaffById:', error);\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      };\n    }\n  }\n\n}\n\nconst sectionsCrud = new SectionsCrud();\nexport default sectionsCrud;\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 748, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 754, "column": 0}, "map": {"version":3,"sources":["file:///home/batman/Workspace/Eatofy/src/app/api/sync/Sections/pull/controller.js"],"sourcesContent":["import sectionsCrud from \"@/app/lib/crud/Sections\";\n\nexport async function fetch_sections(tokenData) {\n\ttry {\n\n\t\tconst hotel_id = await tokenData.hotelId;\n\t\tconst existing_sections = await sectionsCrud.readAllSections(hotel_id);\n\n\t\tif (existing_sections.returncode === 200 && existing_sections.output.length === 0) {\n\t\t\treturn {\n\t\t\t\treturncode: 409,\n\t\t\t\tmessage: \"No Sections to be displayed\",\n\t\t\t\toutput: []\n\t\t\t};\n\t\t}\n\n\t\treturn existing_sections;\n\n\t} catch (error) {\n\t\treturn {\n\t\t\treturncode: 500,\n\t\t\tmessage: error.message,\n\t\t\toutput: []\n\t\t};\n\t}\n}\n"],"names":[],"mappings":";;;AAAA;;AAEO,eAAe,eAAe,SAAS;IAC7C,IAAI;QAEH,MAAM,WAAW,MAAM,UAAU,OAAO;QACxC,MAAM,oBAAoB,MAAM,uIAAA,CAAA,UAAY,CAAC,eAAe,CAAC;QAE7D,IAAI,kBAAkB,UAAU,KAAK,OAAO,kBAAkB,MAAM,CAAC,MAAM,KAAK,GAAG;YAClF,OAAO;gBACN,YAAY;gBACZ,SAAS;gBACT,QAAQ,EAAE;YACX;QACD;QAEA,OAAO;IAER,EAAE,OAAO,OAAO;QACf,OAAO;YACN,YAAY;YACZ,SAAS,MAAM,OAAO;YACtB,QAAQ,EAAE;QACX;IACD;AACD"}},
    {"offset": {"line": 779, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 817, "column": 0}, "map": {"version":3,"sources":["file:///home/batman/Workspace/Eatofy/src/app/lib/utils/jwt.js"],"sourcesContent":["import jwt from 'jsonwebtoken';\n\nconst JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key'; // In production, always use environment variable\nconst JWT_EXPIRES_IN = '24h';\n\nexport const createToken = (payload) => {\n  return jwt.sign(payload, JWT_SECRET, { expiresIn: JWT_EXPIRES_IN });\n};\n\nexport const verifyToken = (token) => {\n  try {\n    return jwt.verify(token, JWT_SECRET);\n  } catch (error) {\n    return null;\n  }\n};\n\nexport const updateToken = (token, newData) => {\n  try {\n    const decoded = jwt.verify(token, JWT_SECRET);\n    const updatedPayload = { ...decoded, ...newData };\n    // Remove the exp claim to generate a fresh expiration\n    delete updatedPayload.exp;\n    return jwt.sign(updatedPayload, JWT_SECRET, { expiresIn: JWT_EXPIRES_IN });\n  } catch (error) {\n    return null;\n  }\n};\n\nexport const decodeToken = (token) => {\n  try {\n    return jwt.decode(token);\n  } catch (error) {\n    return null;\n  }\n};\n"],"names":[],"mappings":";;;;;;AAAA;;AAEA,MAAM,aAAa,QAAQ,GAAG,CAAC,UAAU,IAAI,mBAAmB,iDAAiD;AACjH,MAAM,iBAAiB;AAEhB,MAAM,cAAc,CAAC;IAC1B,OAAO,uIAAA,CAAA,UAAG,CAAC,IAAI,CAAC,SAAS,YAAY;QAAE,WAAW;IAAe;AACnE;AAEO,MAAM,cAAc,CAAC;IAC1B,IAAI;QACF,OAAO,uIAAA,CAAA,UAAG,CAAC,MAAM,CAAC,OAAO;IAC3B,EAAE,OAAO,OAAO;QACd,OAAO;IACT;AACF;AAEO,MAAM,cAAc,CAAC,OAAO;IACjC,IAAI;QACF,MAAM,UAAU,uIAAA,CAAA,UAAG,CAAC,MAAM,CAAC,OAAO;QAClC,MAAM,iBAAiB;YAAE,GAAG,OAAO;YAAE,GAAG,OAAO;QAAC;QAChD,sDAAsD;QACtD,OAAO,eAAe,GAAG;QACzB,OAAO,uIAAA,CAAA,UAAG,CAAC,IAAI,CAAC,gBAAgB,YAAY;YAAE,WAAW;QAAe;IAC1E,EAAE,OAAO,OAAO;QACd,OAAO;IACT;AACF;AAEO,MAAM,cAAc,CAAC;IAC1B,IAAI;QACF,OAAO,uIAAA,CAAA,UAAG,CAAC,MAAM,CAAC;IACpB,EAAE,OAAO,OAAO;QACd,OAAO;IACT;AACF"}},
    {"offset": {"line": 862, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 868, "column": 0}, "map": {"version":3,"sources":["file:///home/batman/Workspace/Eatofy/src/app/api/sync/Sections/pull/route.js"],"sourcesContent":["import { fetch_sections } from './controller';\nimport { NextResponse } from 'next/server';\nimport { verifyToken } from '@/app/lib/utils/jwt';\n\nexport async function GET(request) {\n\ttry {\n\n\t\t// Get token from cookie\n\t\tconst token = request.cookies.get('hotel_auth_token')?.value;\n\t\tif (!token) {\n\t\t\treturn NextResponse.json({\n\t\t\t\treturncode: 401,\n\t\t\t\tmessage: \"No token provided\",\n\t\t\t\toutput: []\n\t\t\t}, { status: 401, statusText: \"No token provided\" });\n\t\t}\n\n\t\t// Verify the token\n\t\tconst userData = verifyToken(token);\n\t\tif (!userData) {\n\t\t\treturn NextResponse.json({\n\t\t\t\treturncode: 401,\n\t\t\t\tmessage: \"Invalid or expired token\",\n\t\t\t\toutput: []\n\t\t\t}, { status: 401, statusText: \"Invalid or expired token\" });\n\t\t}\n\n\t\tconst result = await fetch_sections(userData);\n\n\t\treturn NextResponse.json({\n\t\t\treturncode: result.returncode,\n\t\t\tmessage: result.message,\n\t\t\toutput: result.output\n\t\t}, {\n\t\t\tstatus: result.returncode,\n\t\t});\n\n\t} catch (error) {\n\t\treturn NextResponse.json(\n\t\t\t{\n\t\t\t\treturncode: 500,\n\t\t\t\tmessage: error.message,\n\t\t\t\toutput: []\n\t\t\t},\n\t\t\t{ status: 500 }\n\t\t);\n\t}\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEO,eAAe,IAAI,OAAO;IAChC,IAAI;QAEH,wBAAwB;QACxB,MAAM,QAAQ,QAAQ,OAAO,CAAC,GAAG,CAAC,qBAAqB;QACvD,IAAI,CAAC,OAAO;YACX,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACxB,YAAY;gBACZ,SAAS;gBACT,QAAQ,EAAE;YACX,GAAG;gBAAE,QAAQ;gBAAK,YAAY;YAAoB;QACnD;QAEA,mBAAmB;QACnB,MAAM,WAAW,CAAA,GAAA,mIAAA,CAAA,cAAW,AAAD,EAAE;QAC7B,IAAI,CAAC,UAAU;YACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACxB,YAAY;gBACZ,SAAS;gBACT,QAAQ,EAAE;YACX,GAAG;gBAAE,QAAQ;gBAAK,YAAY;YAA2B;QAC1D;QAEA,MAAM,SAAS,MAAM,CAAA,GAAA,6JAAA,CAAA,iBAAc,AAAD,EAAE;QAEpC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACxB,YAAY,OAAO,UAAU;YAC7B,SAAS,OAAO,OAAO;YACvB,QAAQ,OAAO,MAAM;QACtB,GAAG;YACF,QAAQ,OAAO,UAAU;QAC1B;IAED,EAAE,OAAO,OAAO;QACf,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACvB;YACC,YAAY;YACZ,SAAS,MAAM,OAAO;YACtB,QAAQ,EAAE;QACX,GACA;YAAE,QAAQ;QAAI;IAEhB;AACD"}},
    {"offset": {"line": 921, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}