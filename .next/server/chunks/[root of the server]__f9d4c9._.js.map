{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///home/shado/Workspace/Eatofy/src/app/lib/db.js"],"sourcesContent":["import mongoose from 'mongoose'\n\nconst MONGODB_URI = process.env.MONGO_URI || 'mongodb://admin:admin@localhost:27017/admin?authSource=admin';\n\nif (!MONGODB_URI) {\n  throw new Error(\n    'Please define the MONGODB_URI environment variable inside .env.local',\n  )\n}\n\nlet cached = global.mongoose\n\nif (!cached) {\n  cached = global.mongoose = { conn: null, promise: null }\n}\n\nasync function dbConnect() {\n  if (cached.conn) {\n    console.log(\"This is Existing connection\");\n    return cached.conn\n  }\n  if (!cached.promise) {\n    const opts = {\n      bufferCommands: false,\n    }\n    cached.promise = mongoose.connect(MONGODB_URI, opts).then(mongoose => {\n      console.log('Db connected')\n      return mongoose\n    })\n  }\n  try {\n    cached.conn = await cached.promise\n  } catch (e) {\n    cached.promise = null\n    throw e\n  }\n\n  console.log(\"This is New connection\");\n  return cached.conn\n}\n\nexport default dbConnect\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,cAAc,QAAQ,GAAG,CAAC,SAAS,IAAI;AAE7C,uCAAkB;;AAIlB;AAEA,IAAI,SAAS,OAAO,QAAQ;AAE5B,IAAI,CAAC,QAAQ;IACX,SAAS,OAAO,QAAQ,GAAG;QAAE,MAAM;QAAM,SAAS;IAAK;AACzD;AAEA,eAAe;IACb,IAAI,OAAO,IAAI,EAAE;QACf,QAAQ,GAAG,CAAC;QACZ,OAAO,OAAO,IAAI;IACpB;IACA,IAAI,CAAC,OAAO,OAAO,EAAE;QACnB,MAAM,OAAO;YACX,gBAAgB;QAClB;QACA,OAAO,OAAO,GAAG,iGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,aAAa,MAAM,IAAI,CAAC,CAAA;YACxD,QAAQ,GAAG,CAAC;YACZ,OAAO;QACT;IACF;IACA,IAAI;QACF,OAAO,IAAI,GAAG,MAAM,OAAO,OAAO;IACpC,EAAE,OAAO,GAAG;QACV,OAAO,OAAO,GAAG;QACjB,MAAM;IACR;IAEA,QAAQ,GAAG,CAAC;IACZ,OAAO,OAAO,IAAI;AACpB;uCAEe"}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 61, "column": 0}, "map": {"version":3,"sources":["file:///home/shado/Workspace/Eatofy/src/app/lib/utils/SpecialStringsValidator.js"],"sourcesContent":["export function SubscriptionStatusValidator(value) {\n\n  let validation_flag = false;\n  var list = [\"Waiting\", \"On Going\", \"Expired\", \"About to Expire\"];\n\n  list.map((item) => {\n    if (value === item) {\n      validation_flag = true;\n    }\n  });\n\n  return validation_flag;\n}\n\nexport function PaymentStatusValidator(value) {\n\n  let validation_flag = false;\n  var list = [\"Paid\", \"Unpaid\", \"Part-Paid\"];\n\n  list.map((item) => {\n    if (value === item) {\n      validation_flag = true;\n    }\n  });\n\n  return validation_flag;\n}\n\nexport function PaymentModeValidator(value) {\n\n  let validation_flag = false;\n  var list = [\"Cash\", \"UPI\", \"Credit-Card\", \"Due\", \"Part\"];\n\n  list.map((item) => {\n    if (value === item) {\n      validation_flag = true;\n    }\n  });\n\n  return validation_flag;\n}\n\nexport function OrderTypeValidator(value) {\n\n  let validation_flag = false;\n  var list = [\"Takeaway\", \"Delivery\", \"Dine-In\", \"Swiggy\", \"Zomato\", \"QR-Orders\"];\n\n  list.map((item) => {\n    if (value === item) {\n      validation_flag = true;\n    }\n  });\n\n  return validation_flag;\n}\n\nexport function TableStatusValidator(value) {\n\n  let validation_flag = false;\n  var list = [\"Booked\", \"Bill Pending\", \"Open\"];\n\n  list.map((item) => {\n    if (value === item) {\n      validation_flag = true;\n    }\n  });\n\n  return validation_flag;\n}\n\nexport function StockStatusValidator(value) {\n\n  let validation_flag = false;\n  var list = [\"Available\", \"Low Stock\", \"Unavailable\"];\n\n  list.map((item) => {\n    if (value === item) {\n      validation_flag = true;\n    }\n  });\n\n  return validation_flag;\n}\n\nexport function AttendanceValidator(value) {\n\n  let validation_flag = false;\n  var list = [\"Absent\", \"Present\", \"Half-Day\"];\n\n  list.map((item) => {\n    if (value === item) {\n      validation_flag = true;\n    }\n  });\n\n  return validation_flag;\n}\n\nexport function ExpenseCategoryValidator(value) {\n\n  let validation_flag = false;\n  var list = [\"Salary\", \"Purchases\", \"Miscellaneous\"];\n\n  list.map((item) => {\n    if (value === item) {\n      validation_flag = true;\n    }\n  });\n\n  return validation_flag;\n}\n"],"names":[],"mappings":";;;;;;;;;;AAAO,SAAS,4BAA4B,KAAK;IAE/C,IAAI,kBAAkB;IACtB,IAAI,OAAO;QAAC;QAAW;QAAY;QAAW;KAAkB;IAEhE,KAAK,GAAG,CAAC,CAAC;QACR,IAAI,UAAU,MAAM;YAClB,kBAAkB;QACpB;IACF;IAEA,OAAO;AACT;AAEO,SAAS,uBAAuB,KAAK;IAE1C,IAAI,kBAAkB;IACtB,IAAI,OAAO;QAAC;QAAQ;QAAU;KAAY;IAE1C,KAAK,GAAG,CAAC,CAAC;QACR,IAAI,UAAU,MAAM;YAClB,kBAAkB;QACpB;IACF;IAEA,OAAO;AACT;AAEO,SAAS,qBAAqB,KAAK;IAExC,IAAI,kBAAkB;IACtB,IAAI,OAAO;QAAC;QAAQ;QAAO;QAAe;QAAO;KAAO;IAExD,KAAK,GAAG,CAAC,CAAC;QACR,IAAI,UAAU,MAAM;YAClB,kBAAkB;QACpB;IACF;IAEA,OAAO;AACT;AAEO,SAAS,mBAAmB,KAAK;IAEtC,IAAI,kBAAkB;IACtB,IAAI,OAAO;QAAC;QAAY;QAAY;QAAW;QAAU;QAAU;KAAY;IAE/E,KAAK,GAAG,CAAC,CAAC;QACR,IAAI,UAAU,MAAM;YAClB,kBAAkB;QACpB;IACF;IAEA,OAAO;AACT;AAEO,SAAS,qBAAqB,KAAK;IAExC,IAAI,kBAAkB;IACtB,IAAI,OAAO;QAAC;QAAU;QAAgB;KAAO;IAE7C,KAAK,GAAG,CAAC,CAAC;QACR,IAAI,UAAU,MAAM;YAClB,kBAAkB;QACpB;IACF;IAEA,OAAO;AACT;AAEO,SAAS,qBAAqB,KAAK;IAExC,IAAI,kBAAkB;IACtB,IAAI,OAAO;QAAC;QAAa;QAAa;KAAc;IAEpD,KAAK,GAAG,CAAC,CAAC;QACR,IAAI,UAAU,MAAM;YAClB,kBAAkB;QACpB;IACF;IAEA,OAAO;AACT;AAEO,SAAS,oBAAoB,KAAK;IAEvC,IAAI,kBAAkB;IACtB,IAAI,OAAO;QAAC;QAAU;QAAW;KAAW;IAE5C,KAAK,GAAG,CAAC,CAAC;QACR,IAAI,UAAU,MAAM;YAClB,kBAAkB;QACpB;IACF;IAEA,OAAO;AACT;AAEO,SAAS,yBAAyB,KAAK;IAE5C,IAAI,kBAAkB;IACtB,IAAI,OAAO;QAAC;QAAU;QAAa;KAAgB;IAEnD,KAAK,GAAG,CAAC,CAAC;QACR,IAAI,UAAU,MAAM;YAClB,kBAAkB;QACpB;IACF;IAEA,OAAO;AACT"}},
    {"offset": {"line": 189, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 195, "column": 0}, "map": {"version":3,"sources":["file:///home/shado/Workspace/Eatofy/src/app/lib/models/Bills.js"],"sourcesContent":["import mongoose from \"mongoose\";\nimport { OrderTypeValidator, PaymentModeValidator, PaymentStatusValidator } from \"../utils/SpecialStringsValidator\";\n\nexport const billsSchema = new mongoose.Schema(\n  {\n    Type: {\n      type: String,\n      required: true, // Type of bill (e.g., Dine-in, Takeaway, Delivery)\n      validate: {\n        validator: (value) => OrderTypeValidator(value)\n      },\n      message: \"Bill Type must be one of:- 'Takeaway', 'Delivery', 'Dine-In', 'Swiggy', 'Zomato', 'QR-Orders'.\"\n    },\n    TableId: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"Tables\", // Reference to the Tables model (optional)\n    },\n    WaiterId: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"Staffs\", // Reference to the Staffs model (optional)\n    },\n    HotelId: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"Hotels\", // Reference to the Hotels model (optional)\n      required: true,\n    },\n    CustomerId: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"Customers\", // Reference to the Customers model (optional)\n    },\n    VatRate: {\n      type: String, // VAT rate (optional)\n      default: \"0 %\",\n    },\n    VatAmount: {\n      type: Number, // VAT amount (optional)\n      default: 0.0,\n    },\n    TotalAmount: {\n      type: Number,\n      default: 0.0, // Total bill amount\n    },\n    CGSTRate: {\n      type: String,\n      default: \"0 %\", // Central GST rate\n    },\n    SGSTRate: {\n      type: String,\n      default: \"0 %\", // State GST rate\n    },\n    SGSTAmount: {\n      type: Number,\n      default: 0.0, // State GST amount\n    },\n    CGSTAmount: {\n      type: Number,\n      default: 0.0, // Central GST amount\n    },\n    EatocoinsRate: {\n      type: String, // Rate of Eatocoins usage (optional)\n      default: \"0 %\",\n    },\n    EatocoinsAmount: {\n      type: Number, // Amount deducted using Eatocoins (optional)\n      default: 0.0,\n    },\n    MenuTotal: {\n      type: Number,\n      default: 0.0, // Total amount for menu items\n    },\n    Amount: {\n      type: Number,\n      default: 0.0, // Net bill amount\n    },\n    BalanceAmount: {\n      type: Number,\n      default: 0.0, // Balance to be paid\n    },\n    DeliveryChargesRate: {\n      type: String, // Rate for delivery charges (optional)\n      default: \"0 %\",\n    },\n    DeliveryChargesAmount: {\n      type: Number, // Delivery charges amount (optional)\n      default: 0.0,\n    },\n    DiscountRate: {\n      type: String, // Discount rate (optional)\n      default: \"0 %\",\n    },\n    DiscountPrice: {\n      type: Number, // Discount price (optional)\n      default: 0.0,\n    },\n    PaymentMode: {\n      type: String,\n      default: \"Cash\",\n      validate: {\n        validator: (value) => PaymentModeValidator(value)\n      },\n      message: \"Payment Mode must be one of:- 'Cash', 'UPI', 'Credit-Card', 'Due', 'Part'.\"\n    },\n    PaymentStatus: {\n      type: String,\n      default: \"Paid\",\n      validate: {\n        validator: (value) => PaymentStatusValidator(value)\n      },\n      message: \"Payment Status must be one of:- 'Paid', 'Unpaid', 'Part-Paid'.\"\n    },\n    Status: {\n      type: String,\n      default: \"Open\",\n      validate: {\n        validator: (value) => { [\"Open\", \"Closed\"].includes(value); }\n      },\n      message: \"Bil Status must be either 'Open' or 'Closed'.\"\n    },\n    Orders: [\n      {\n        type: mongoose.Schema.Types.ObjectId,\n        ref: \"Orders\", // Reference to the Orders model\n      },\n    ],\n  },\n  {\n    timestamps: true, // Automatically add createdAt and updatedAt fields\n  }\n);\n\n// Pre-remove middleware for single document\nbillsSchema.pre('deleteOne', { document: true }, async function(next) {\n  try {\n    const Orders = mongoose.model('Orders');\n\n    // Delete all related orders\n    await Orders.deleteMany({ BillId: this._id });\n\n    // Update table status if exists\n    if (this.TableId) {\n      const Tables = mongoose.model('Tables');\n      await Tables.findByIdAndUpdate(\n        this.TableId,\n        { Status: \"Available\" }\n      );\n    }\n\n    next();\n  } catch (error) {\n    next(error);\n  }\n});\n\n// Pre-deleteMany middleware for multiple documents\nbillsSchema.pre('deleteMany', async function(next) {\n  try {\n    const Bills = mongoose.model('Bills');\n    const bills = await Bills.find(this.getFilter());\n\n    if (bills.length > 0) {\n      const billIds = bills.map(bill => bill._id);\n      const tableIds = bills.filter(bill => bill.TableId).map(bill => bill.TableId);\n\n      // Delete all related orders\n      const Orders = mongoose.model('Orders');\n      await Orders.deleteMany({ BillId: { $in: billIds } });\n\n      // Update table statuses\n      if (tableIds.length > 0) {\n        const Tables = mongoose.model('Tables');\n        await Tables.updateMany(\n          { _id: { $in: tableIds } },\n          { Status: \"Available\" }\n        );\n      }\n    }\n\n    next();\n  } catch (error) {\n    next(error);\n  }\n});\n\nexport default mongoose.models.Bills || mongoose.model(\"Bills\", billsSchema);\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 386, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 392, "column": 0}, "map": {"version":3,"sources":["file:///home/shado/Workspace/Eatofy/src/app/lib/models/CashDrawer.js"],"sourcesContent":["import mongoose from \"mongoose\";\n\nexport const cashDrawerSchema = new mongoose.Schema(\n  {\n    OpeningBalance: {\n      type: Number,\n      default: 0.0, // The opening balance for the drawer\n    },\n    ClosingBalance: {\n      type: Number,\n      default: 0.0, // The closing balance for the drawer\n    },\n    TotalSales: {\n      type: Number,\n      required: false, // Total sales amount (optional)\n    },\n    SalesAmount: {\n      type: Number,\n      default: 0.0, // Amount from sales transactions\n    },\n    DroppedCash: {\n      type: Number,\n      default: 0.0, // Cash dropped into the drawer\n    },\n    CashWithdrawn: {\n      type: Number,\n      default: 0.0, // Amount of cash withdrawn\n    },\n    Refunds: {\n      type: Number,\n      default: 0.0, // Total refunds processed\n    },\n    TotalExpenses: {\n      type: Number,\n      required: false, // Total expenses recorded (optional)\n    },\n    ExpensesAmount: {\n      type: Number,\n      default: 0.0, // Total expenses amount\n    },\n    Date: {\n      type: String,\n      required: false, // Date of the cash drawer record (optional)\n    },\n    HotelId: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"Hotels\", // Reference to the Hotels model\n      required: true, // Relates this drawer record to a hotel\n    },\n  },\n  {\n    timestamps: true, // Automatically manage createdAt and updatedAt fields\n  }\n);\n\nexport default mongoose.models.CashDrawer \n"],"names":[],"mappings":";;;;AAAA;;AAEO,MAAM,mBAAmB,IAAI,iGAAA,CAAA,UAAQ,CAAC,MAAM,CACjD;IACE,gBAAgB;QACd,MAAM;QACN,SAAS;IACX;IACA,gBAAgB;QACd,MAAM;QACN,SAAS;IACX;IACA,YAAY;QACV,MAAM;QACN,UAAU;IACZ;IACA,aAAa;QACX,MAAM;QACN,SAAS;IACX;IACA,aAAa;QACX,MAAM;QACN,SAAS;IACX;IACA,eAAe;QACb,MAAM;QACN,SAAS;IACX;IACA,SAAS;QACP,MAAM;QACN,SAAS;IACX;IACA,eAAe;QACb,MAAM;QACN,UAAU;IACZ;IACA,gBAAgB;QACd,MAAM;QACN,SAAS;IACX;IACA,MAAM;QACJ,MAAM;QACN,UAAU;IACZ;IACA,SAAS;QACP,MAAM,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,KAAK;QACL,UAAU;IACZ;AACF,GACA;IACE,YAAY;AACd;uCAGa,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,UAAU"}},
    {"offset": {"line": 448, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 454, "column": 0}, "map": {"version":3,"sources":["file:///home/shado/Workspace/Eatofy/src/app/lib/utils/StringValidator.js"],"sourcesContent":["export default function StringValidators(value) {\n  // Ensure the input is a string\n  if (typeof value !== \"string\") {\n    return false;\n  }\n\n  if (value === null) {\n    return true;\n  }\n\n  // List of forbidden characters\n  const charList = ['/', '\\\\', '\"', ';', \"'\", '+', '`', '^'];\n  let validationFlag = true;\n\n  // Iterate over each character in the list\n  for (let char of charList) {\n\n    // Check if the forbidden character is present in the string\n    if (value.includes(char)) {\n      validationFlag = false;\n      break; // Stop checking further once an invalid character is found\n    }\n  }\n\n  return validationFlag;\n}\n"],"names":[],"mappings":";;;AAAe,SAAS,iBAAiB,KAAK;IAC5C,+BAA+B;IAC/B,IAAI,OAAO,UAAU,UAAU;QAC7B,OAAO;IACT;IAEA,IAAI,UAAU,MAAM;QAClB,OAAO;IACT;IAEA,+BAA+B;IAC/B,MAAM,WAAW;QAAC;QAAK;QAAM;QAAK;QAAK;QAAK;QAAK;QAAK;KAAI;IAC1D,IAAI,iBAAiB;IAErB,0CAA0C;IAC1C,KAAK,IAAI,QAAQ,SAAU;QAEzB,4DAA4D;QAC5D,IAAI,MAAM,QAAQ,CAAC,OAAO;YACxB,iBAAiB;YACjB,OAAO,2DAA2D;QACpE;IACF;IAEA,OAAO;AACT"}},
    {"offset": {"line": 487, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 493, "column": 0}, "map": {"version":3,"sources":["file:///home/shado/Workspace/Eatofy/src/app/lib/models/Reservation.js"],"sourcesContent":["import mongoose from \"mongoose\";\n\nexport const ReservationSchema = new mongoose.Schema(\n  {\n    Date: {\n      type: String, // Storing date as a string for flexibility (e.g., \"YYYY-MM-DD\")\n      required: true,\n    },\n    Time: {\n      type: String, // Storing time as a string for flexibility (e.g., \"HH:mm\")\n      required: true,\n    },\n    Note: {\n      type: String,\n      default: null, // Optional note field\n    },\n    NoOfPersons: {\n      type: Number,\n      default: 0, // Optional number of persons\n    },\n    CustomerId: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"Customers\", // Reference to the `Customers` collection\n      required: true,\n    },\n    HotelId: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"Hotels\", // Reference to the `Hotels` collection\n      required: true,\n    },\n  },\n  { timestamps: true }\n);\n\nexport default mongoose.models.Reservations \n"],"names":[],"mappings":";;;;AAAA;;AAEO,MAAM,oBAAoB,IAAI,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAClD;IACE,MAAM;QACJ,MAAM;QACN,UAAU;IACZ;IACA,MAAM;QACJ,MAAM;QACN,UAAU;IACZ;IACA,MAAM;QACJ,MAAM;QACN,SAAS;IACX;IACA,aAAa;QACX,MAAM;QACN,SAAS;IACX;IACA,YAAY;QACV,MAAM,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,KAAK;QACL,UAAU;IACZ;IACA,SAAS;QACP,MAAM,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,KAAK;QACL,UAAU;IACZ;AACF,GACA;IAAE,YAAY;AAAK;uCAGN,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,YAAY"}},
    {"offset": {"line": 530, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 536, "column": 0}, "map": {"version":3,"sources":["file:///home/shado/Workspace/Eatofy/src/app/lib/models/Customers.js"],"sourcesContent":["import mongoose from \"mongoose\";\nimport StringValidators from \"../utils/StringValidator\";\nimport Reservation from \"./Reservation\";\n\nexport const customerSchema = new mongoose.Schema(\n  {\n    CustomerName: {\n      type: String,\n      required: true,\n      validate: {\n        validator: (value) => StringValidators(value)\n      },\n      message: \"Customer Name should not contain invalid characters like /, \\\\, \\\", ;, ', +, `, or ^\"\n    },\n    Contact: {\n      type: String,\n      required: false,\n    },\n    Email: {\n      type: String,\n      required: false,\n    },\n    HotelId: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"Hotels\", // Reference to the Hotel model\n      required: true,\n    },\n    EatocoinsWallet: {\n      type: Number,\n      default: 0, // Default to 0 if not provided\n    },\n    StreetAddress: {\n      type: String,\n      required: false,\n    },\n    Apartment: {\n      type: String,\n      required: false,\n    },\n    City: {\n      type: String,\n      required: false,\n    },\n    State: {\n      type: String,\n      required: false,\n    },\n    Landmark: {\n      type: String,\n      required: false,\n    },\n    ZipCode: {\n      type: String,\n      required: false,\n    },\n    Birthday: {\n      type: String,\n      required: false,\n    },\n    Anniversary: {\n      type: String,\n      required: false,\n    },\n\n    // Child Relationship\n    Bills: [{\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"Bills\", // Reference to the Bill model\n    }],\n    Reservation: [{\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"Reservations\", // Reference to the TableReservation model\n    }],\n  },\n  {\n    timestamps: true, // Automatically adds `createdAt` and `updatedAt` fields\n  }\n);\n\n// Add pre-remove middleware\ncustomerSchema.pre('remove', async function(next) {\n  try {\n    // Check for active bills\n    const Bills = mongoose.model('Bills');\n    const activeBills = await Bills.find({\n      CustomerId: this._id,\n      Status: 'Open'\n    });\n\n    if (activeBills.length > 0) {\n      throw new Error('Cannot delete customer with active bills');\n    }\n\n    // Update completed bills to remove customer reference\n    await Bills.deleteMany({ CustomerId: this._id });\n\n    // Delete any reservations\n    const Reservation = mongoose.model('Reservations');\n    await Reservation.deleteMany({ CustomerId: this._id });\n\n    next();\n  } catch (error) {\n    next(error);\n  }\n});\n\n// Add pre-deleteMany middleware\ncustomerSchema.pre('deleteMany', async function(next) {\n  try {\n    // Get customers to be deleted\n    const Customers = mongoose.model('Customers');\n    const customers = await Customers.find(this.getFilter());\n    const customerIds = customers.map(customer => customer._id);\n\n    if (customerIds.length > 0) {\n      // Check for active bills\n      const Bills = mongoose.model('Bills');\n      const activeBills = await Bills.find({\n        CustomerId: { $in: customerIds },\n        Status: 'Open'\n      });\n\n      if (activeBills.length > 0) {\n        throw new Error('Cannot delete customers with active bills');\n      }\n\n      // Update completed bills and delete reservations in parallel\n      await Promise.all([\n        Bills.deleteMany({ CustomerId: { $in: customerIds } }),\n        Reservation.deleteMany({ CustomerId: { $in: customerIds } })\n      ]);\n    }\n\n    next();\n  } catch (error) {\n    next(error);\n  }\n});\n\nexport default mongoose.models.Customers || mongoose.model(\"Customers\", customerSchema);\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 685, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 691, "column": 0}, "map": {"version":3,"sources":["file:///home/shado/Workspace/Eatofy/src/app/lib/models/Dishes.js"],"sourcesContent":["import mongoose from \"mongoose\";\nimport StringValidators from \"../utils/StringValidator\";\n\nexport const dishesSchema = new mongoose.Schema(\n  {\n    DishName: {\n      type: String,\n      required: true,\n      validate: {\n        validator: (value) => StringValidators(value)\n      },\n      message: \"Dish Name should not contain invalid characters like /, \\\\, \\\", ;, ', +, `, or ^\"\n    },\n    Code: {\n      type: String,\n      required: true,\n    },\n    Description: {\n      type: String,\n      default: null, // For Combos Specification eg;(2 Burgers & 1 Pepsi)\n    },\n    Type: {\n      type: String,\n      required: true, // Dish type (e.g., Veg, Non-veg)\n      validate: {\n        validator: (value) => StringValidators(value)\n      },\n      message: \"Dish Type should not contain invalid characters like /, \\\\, \\\", ;, ', +, `, or ^\"\n    },\n    CategoryId: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"MenuCategory\", // Reference to `MenuCategory` collection\n      required: true,\n    },\n    HotelId: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"Hotels\", // Reference to `Hotels` collection\n      required: true,\n    },\n\n    // Child Relationship\n    Menus: [\n      {\n        type: mongoose.Schema.Types.ObjectId,\n        ref: \"Menus\", // Reference to `Menus` collection\n      },\n    ],\n  },\n  { timestamps: true }\n);\n\n// Unique constraint on HotelId and Code\ndishesSchema.index({ HotelId: 1, Code: 1 }, { unique: true });\n\n// Add pre-remove middleware\ndishesSchema.pre('remove', async function(next) {\n  try {\n    const Menus = mongoose.model('Menus');\n    const Orders = mongoose.model('Orders');\n\n    // Check if dish has any active orders\n    const activeOrders = await Orders.find({\n      'Items.DishId': this._id,\n      Status: { $in: ['Pending', 'Processing', 'Ready'] }\n    });\n\n    if (activeOrders.length > 0) {\n      throw new Error('Cannot delete dish with active orders');\n    }\n\n    // Delete all related menus\n    await Menus.deleteMany({ DishId: this._id });\n\n    // Update completed orders to mark deleted dishes\n    await Orders.updateMany(\n      { 'Items.DishId': this._id, Status: 'Completed' },\n      { $set: { 'Items.$[elem].Deleted': true } },\n      { arrayFilters: [{ 'elem.DishId': this._id }] }\n    );\n\n    // Remove from MenuCategory's Dishes array\n    const MenuCategory = mongoose.model('MenuCategory');\n    await MenuCategory.updateMany(\n      { Dishes: this._id },\n      { $pull: { Dishes: this._id } }\n    );\n\n    next();\n  } catch (error) {\n    next(error);\n  }\n});\n\n// Add pre-deleteMany middleware\ndishesSchema.pre('deleteMany', async function(next) {\n  try {\n    const Dishes = mongoose.model('Dishes');\n    const dishes = await Dishes.find(this.getFilter());\n    const dishIds = dishes.map(dish => dish._id);\n\n    if (dishIds.length > 0) {\n      const [Orders, Menus, MenuCategory] = await Promise.all([\n        mongoose.model('Orders'),\n        mongoose.model('Menus'),\n        mongoose.model('MenuCategory')\n      ]);\n\n      // Check for active orders\n      const activeOrders = await Orders.find({\n        'Items.DishId': { $in: dishIds },\n        Status: { $in: ['Pending', 'Processing', 'Ready'] }\n      });\n\n      if (activeOrders.length > 0) {\n        throw new Error('Cannot delete dishes with active orders');\n      }\n\n      // Run cleanup operations in parallel\n      await Promise.all([\n        // Delete related menus\n        Menus.deleteMany({ DishId: { $in: dishIds } }),\n        // Update completed orders\n        Orders.updateMany(\n          { 'Items.DishId': { $in: dishIds }, Status: 'Completed' },\n          { $unset: { ItemId: 1 } }\n        ),\n        // Remove from MenuCategory's Dishes arrays\n        MenuCategory.updateMany(\n          { Dishes: { $in: dishIds } },\n          { $pull: { Dishes: { $in: dishIds } } }\n        )\n      ]);\n    }\n\n    next();\n  } catch (error) {\n    next(error);\n  }\n});\n\nexport default mongoose.models.Dishes || mongoose.model(\"Dishes\", dishesSchema);\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 870, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 876, "column": 0}, "map": {"version":3,"sources":["file:///home/shado/Workspace/Eatofy/src/app/lib/utils/BooleanValidator.js"],"sourcesContent":["export default function BooleanValidator(value) {\n  if (typeof value != \"boolean\") {\n    return false;\n  }\n  else {\n    return true;\n  }\n}\n"],"names":[],"mappings":";;;AAAe,SAAS,iBAAiB,KAAK;IAC5C,IAAI,OAAO,SAAS,WAAW;QAC7B,OAAO;IACT,OACK;QACH,OAAO;IACT;AACF"}},
    {"offset": {"line": 886, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 892, "column": 0}, "map": {"version":3,"sources":["file:///home/shado/Workspace/Eatofy/src/app/lib/models/EatoCoinsSettings.js"],"sourcesContent":["import mongoose from \"mongoose\";\nimport BooleanValidator from \"../utils/BooleanValidator\";\n\nexport const eatocoinsSettingsSchema = new mongoose.Schema(\n  {\n    Visibility: {\n      type: Boolean,\n      default: false, // Determines if Eatocoins are enabled\n      validate: {\n        validator: (value) => BooleanValidator(value)\n      },\n      message: \"Visibility should be either true or false\"\n    },\n    CreditLimitAmt: {\n      type: Number,\n      default: 0, // Minimum purchase amount required to credit coins to the wallet\n    },\n    CreditLimitPercent: {\n      type: Number,\n      default: 0, // Percentage of the purchase amount credited to the wallet\n    },\n    RedeemLimitAmount: {\n      type: Number,\n      default: 0, // Minimum amount above which wallet coins can be redeemed\n    },\n    RedeemLimitPercent: {\n      type: Number,\n      default: 0, // Maximum percentage of discount allowed via Eatocoins\n    },\n    Rate: {\n      type: Number,\n      default: 0, // Conversion rate for Eatocoins\n    },\n    HotelId: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"Hotels\", // Reference to the Hotels model\n      required: true,\n      unique: true\n    },\n  },\n  {\n    timestamps: true, // Automatically manage createdAt and updatedAt fields\n  }\n);\n\nexport default mongoose.models.EatocoinsSettings || mongoose.model(\"EatocoinsSettings\", eatocoinsSettingsSchema);\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,MAAM,0BAA0B,IAAI,iGAAA,CAAA,UAAQ,CAAC,MAAM,CACxD;IACE,YAAY;QACV,MAAM;QACN,SAAS;QACT,UAAU;YACR,WAAW,CAAC,QAAU,CAAA,GAAA,2JAAA,CAAA,UAAgB,AAAD,EAAE;QACzC;QACA,SAAS;IACX;IACA,gBAAgB;QACd,MAAM;QACN,SAAS;IACX;IACA,oBAAoB;QAClB,MAAM;QACN,SAAS;IACX;IACA,mBAAmB;QACjB,MAAM;QACN,SAAS;IACX;IACA,oBAAoB;QAClB,MAAM;QACN,SAAS;IACX;IACA,MAAM;QACJ,MAAM;QACN,SAAS;IACX;IACA,SAAS;QACP,MAAM,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,KAAK;QACL,UAAU;QACV,QAAQ;IACV;AACF,GACA;IACE,YAAY;AACd;uCAGa,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,iBAAiB,IAAI,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,qBAAqB"}},
    {"offset": {"line": 939, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 945, "column": 0}, "map": {"version":3,"sources":["file:///home/shado/Workspace/Eatofy/src/app/lib/models/EbillEmailSettings.js"],"sourcesContent":["import mongoose from \"mongoose\";\nimport BooleanValidator from \"../utils/BooleanValidator\";\n\nexport const ebillEmailSettingsSchema = new mongoose.Schema(\n  {\n    Visibility: {\n      type: Boolean,\n      default: false, // Determines if the Ebill email settings are enabled\n      validate: {\n        validator: (value) => BooleanValidator(value)\n      },\n      message: \"Visibility should be either true or false\"\n    },\n    Email: {\n      type: String,\n      default: null,// Email used for Ebill email notifications\n    },\n    AppPassword: {\n      type: String,\n      default: null, // App password for email account\n    },\n    UPIID: {\n      type: String,\n      default: null, // UPI ID for transactions\n    },\n    MerchantName: {\n      type: String,\n      default: null, // Name of the merchant for the Ebill email\n    },\n    HotelId: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"Hotels\", // Reference to the Hotels model\n      required: true,\n    },\n  },\n  {\n    timestamps: true, // Automatically manage createdAt and updatedAt fields\n  }\n);\n\nexport default mongoose.models.EbillEmailSettings \n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,MAAM,2BAA2B,IAAI,iGAAA,CAAA,UAAQ,CAAC,MAAM,CACzD;IACE,YAAY;QACV,MAAM;QACN,SAAS;QACT,UAAU;YACR,WAAW,CAAC,QAAU,CAAA,GAAA,2JAAA,CAAA,UAAgB,AAAD,EAAE;QACzC;QACA,SAAS;IACX;IACA,OAAO;QACL,MAAM;QACN,SAAS;IACX;IACA,aAAa;QACX,MAAM;QACN,SAAS;IACX;IACA,OAAO;QACL,MAAM;QACN,SAAS;IACX;IACA,cAAc;QACZ,MAAM;QACN,SAAS;IACX;IACA,SAAS;QACP,MAAM,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,KAAK;QACL,UAAU;IACZ;AACF,GACA;IACE,YAAY;AACd;uCAGa,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,kBAAkB"}},
    {"offset": {"line": 987, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 993, "column": 0}, "map": {"version":3,"sources":["file:///home/shado/Workspace/Eatofy/src/app/lib/utils/FloatValidator.js"],"sourcesContent":["export default function FloatValidator(value) {\n  // First convert to number if it's a string\n  const num = typeof value === 'string' ? Number(value) : value;\n  \n  // Check if it's a valid number and greater than 0\n  return !isNaN(num) && num > 0;\n}\n"],"names":[],"mappings":";;;AAAe,SAAS,eAAe,KAAK;IAC1C,2CAA2C;IAC3C,MAAM,MAAM,OAAO,UAAU,WAAW,OAAO,SAAS;IAExD,kDAAkD;IAClD,OAAO,CAAC,MAAM,QAAQ,MAAM;AAC9B"}},
    {"offset": {"line": 1002, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1008, "column": 0}, "map": {"version":3,"sources":["file:///home/shado/Workspace/Eatofy/src/app/lib/models/Expenses.js"],"sourcesContent":["import mongoose from \"mongoose\";\nimport StringValidators from \"../utils/StringValidator\";\nimport { ExpenseCategoryValidator, PaymentModeValidator, PaymentStatusValidator } from \"../utils/SpecialStringsValidator\";\nimport FloatValidator from \"../utils/FloatValidator\";\n\nexport const expensesSchema = new mongoose.Schema(\n  {\n    ExpenseName: {\n      type: String,\n      required: true, // Name of the expense (e.g., electricity, rent, etc.)\n      validate: {\n        validator: (value) => ExpenseCategoryValidator(value)\n      },\n      message: \"Expense Category must be one of:- 'Salary', 'Purchases', 'Miscellaneous'.\"\n\n    },\n    Note: {\n      type: String, // Optional additional details about the expense\n    },\n    Date: {\n      type: String,\n      required: true, // Date of the expense in string format\n    },\n    PayableTo: {\n      type: String,\n      required: true, // The recipient of the payment\n      validate: {\n        validator: (value) => StringValidators(value)\n      },\n      message: \"Bearer Name should not contain invalid characters like /, \\\\, \\\", ;, ', +, `, or ^\"\n\n    },\n    AmountPayable: {\n      type: Number,\n      default: 0.0, // The balance amount payable\n    },\n    AmountPaid: {\n      type: Number,\n      required: true, // The amount that has been paid so far\n      validate: {\n        validator: (value) => FloatValidator(value)\n      },\n      message: \"Amount Paid must be a non-negative number.\"\n    },\n    HotelId: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"Hotels\", // Reference to the Hotels model\n      required: true,\n    },\n    PaymentMode: {\n      type: String,\n      default: \"Cash\",\n      validate: {\n        validator: (value) => PaymentModeValidator(value)\n      },\n      message: \"Payment Mode must be one of:- 'Cash', 'UPI', 'Credit-Card', 'Due', 'Part'.\"\n    },\n    PaymentStatus: {\n      type: String,\n      default: \"Paid\",\n      validate: {\n        validator: (value) => PaymentStatusValidator(value)\n      },\n      message: \"Payment Status must be one of:- 'Paid', 'Unpaid', 'Part-Paid'.\"\n    },\n    Cash: {\n      type: Number,\n      default: 0.0\n    },\n    UPI: {\n      type: Number,\n      default: 0.0\n    },\n    CreditCard: {\n      type: Number,\n      default: 0.0\n    },\n  },\n  {\n    timestamps: true, // Automatically manage createdAt and updatedAt fields\n  }\n);\n\nexport default mongoose.models.Expenses \n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;;;;;AAEO,MAAM,iBAAiB,IAAI,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAC/C;IACE,aAAa;QACX,MAAM;QACN,UAAU;QACV,UAAU;YACR,WAAW,CAAC,QAAU,CAAA,GAAA,kKAAA,CAAA,2BAAwB,AAAD,EAAE;QACjD;QACA,SAAS;IAEX;IACA,MAAM;QACJ,MAAM;IACR;IACA,MAAM;QACJ,MAAM;QACN,UAAU;IACZ;IACA,WAAW;QACT,MAAM;QACN,UAAU;QACV,UAAU;YACR,WAAW,CAAC,QAAU,CAAA,GAAA,0JAAA,CAAA,UAAgB,AAAD,EAAE;QACzC;QACA,SAAS;IAEX;IACA,eAAe;QACb,MAAM;QACN,SAAS;IACX;IACA,YAAY;QACV,MAAM;QACN,UAAU;QACV,UAAU;YACR,WAAW,CAAC,QAAU,CAAA,GAAA,yJAAA,CAAA,UAAc,AAAD,EAAE;QACvC;QACA,SAAS;IACX;IACA,SAAS;QACP,MAAM,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,KAAK;QACL,UAAU;IACZ;IACA,aAAa;QACX,MAAM;QACN,SAAS;QACT,UAAU;YACR,WAAW,CAAC,QAAU,CAAA,GAAA,kKAAA,CAAA,uBAAoB,AAAD,EAAE;QAC7C;QACA,SAAS;IACX;IACA,eAAe;QACb,MAAM;QACN,SAAS;QACT,UAAU;YACR,WAAW,CAAC,QAAU,CAAA,GAAA,kKAAA,CAAA,yBAAsB,AAAD,EAAE;QAC/C;QACA,SAAS;IACX;IACA,MAAM;QACJ,MAAM;QACN,SAAS;IACX;IACA,KAAK;QACH,MAAM;QACN,SAAS;IACX;IACA,YAAY;QACV,MAAM;QACN,SAAS;IACX;AACF,GACA;IACE,YAAY;AACd;uCAGa,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,QAAQ"}},
    {"offset": {"line": 1093, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1099, "column": 0}, "map": {"version":3,"sources":["file:///home/shado/Workspace/Eatofy/src/app/lib/models/GstSettings.js"],"sourcesContent":["import mongoose from \"mongoose\";\nimport BooleanValidator from \"../utils/BooleanValidator\";\n\nexport const gstSettingsSchema = new mongoose.Schema(\n  {\n    Visibility: {\n      type: Boolean,\n      default: false, // Determines whether GST is applied or not\n      validate: {\n        validator: (value) => BooleanValidator(value)\n      },\n      message: \"Visibility should be either true or false\"\n    },\n    GSTPercent: {\n      type: Number,\n      default: 0.0, // Percentage value of GST\n    },\n    HotelId: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"Hotels\", // Reference to the Hotels model\n      required: true,\n      unique: true\n    },\n  },\n  {\n    timestamps: true, // Automatically manage createdAt and updatedAt fields\n  }\n);\n\n// Add pre-remove middleware\ngstSettingsSchema.pre('remove', async function(next) {\n  try {\n    // Update all bills to remove GST references\n    const Bills = mongoose.model('Bills');\n    await Bills.updateMany(\n      { HotelId: this.HotelId },\n      { \n        $set: { \n          CGSTRate: '0 %',\n          SGSTRate: '0 %',\n          CGSTAmount: 0,\n          SGSTAmount: 0\n        } \n      }\n    );\n    \n    next();\n  } catch (error) {\n    next(error);\n  }\n});\n\n// Add pre-deleteMany middleware\ngstSettingsSchema.pre('deleteMany', async function(next) {\n  try {\n    // Get the settings that will be deleted\n    const GstSettings = mongoose.model('GstSettings');\n    const settings = await GstSettings.find(this.getFilter());\n    const hotelIds = settings.map(setting => setting.HotelId);\n\n    if (hotelIds.length > 0) {\n      // Update all bills to remove GST references\n      const Bills = mongoose.model('Bills');\n      await Bills.updateMany(\n        { HotelId: { $in: hotelIds } },\n        { \n          $set: { \n            CGSTRate: '0 %',\n            SGSTRate: '0 %',\n            CGSTAmount: 0,\n            SGSTAmount: 0\n          } \n        }\n      );\n    }\n    \n    next();\n  } catch (error) {\n    next(error);\n  }\n});\n\nexport default mongoose.models.GstSettings || mongoose.model(\"GstSettings\", gstSettingsSchema);\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,MAAM,oBAAoB,IAAI,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAClD;IACE,YAAY;QACV,MAAM;QACN,SAAS;QACT,UAAU;YACR,WAAW,CAAC,QAAU,CAAA,GAAA,2JAAA,CAAA,UAAgB,AAAD,EAAE;QACzC;QACA,SAAS;IACX;IACA,YAAY;QACV,MAAM;QACN,SAAS;IACX;IACA,SAAS;QACP,MAAM,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,KAAK;QACL,UAAU;QACV,QAAQ;IACV;AACF,GACA;IACE,YAAY;AACd;AAGF,4BAA4B;AAC5B,kBAAkB,GAAG,CAAC,UAAU,eAAe,IAAI;IACjD,IAAI;QACF,4CAA4C;QAC5C,MAAM,QAAQ,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;QAC7B,MAAM,MAAM,UAAU,CACpB;YAAE,SAAS,IAAI,CAAC,OAAO;QAAC,GACxB;YACE,MAAM;gBACJ,UAAU;gBACV,UAAU;gBACV,YAAY;gBACZ,YAAY;YACd;QACF;QAGF;IACF,EAAE,OAAO,OAAO;QACd,KAAK;IACP;AACF;AAEA,gCAAgC;AAChC,kBAAkB,GAAG,CAAC,cAAc,eAAe,IAAI;IACrD,IAAI;QACF,wCAAwC;QACxC,MAAM,cAAc,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;QACnC,MAAM,WAAW,MAAM,YAAY,IAAI,CAAC,IAAI,CAAC,SAAS;QACtD,MAAM,WAAW,SAAS,GAAG,CAAC,CAAA,UAAW,QAAQ,OAAO;QAExD,IAAI,SAAS,MAAM,GAAG,GAAG;YACvB,4CAA4C;YAC5C,MAAM,QAAQ,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;YAC7B,MAAM,MAAM,UAAU,CACpB;gBAAE,SAAS;oBAAE,KAAK;gBAAS;YAAE,GAC7B;gBACE,MAAM;oBACJ,UAAU;oBACV,UAAU;oBACV,YAAY;oBACZ,YAAY;gBACd;YACF;QAEJ;QAEA;IACF,EAAE,OAAO,OAAO;QACd,KAAK;IACP;AACF;uCAEe,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,WAAW,IAAI,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,eAAe"}},
    {"offset": {"line": 1178, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1184, "column": 0}, "map": {"version":3,"sources":["file:///home/shado/Workspace/Eatofy/src/app/lib/models/HotelSubscription.js"],"sourcesContent":["import mongoose from \"mongoose\";\nimport BooleanValidator from \"../utils/BooleanValidator\";\nimport { SubscriptionStatusValidator, PaymentStatusValidator, PaymentModeValidator } from \"../utils/SpecialStringsValidator\";\n\nexport const HotelSubscriptionSchema = new mongoose.Schema(\n  {\n    HotelId: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"Hotels\", // Reference to the Hotels collection\n      required: true,\n    },\n    SubscriptionId: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"Subscriptions\", // Reference to the Subscriptions collection\n      required: true,\n    },\n    isValid: {\n      type: Boolean,\n      default: true,\n      validate: {\n        validator: (value) => BooleanValidator(value)\n      },\n      message: \"isValid should be either true or false\"\n    },\n    StartDate: {\n      type: String, // Stored as a string (e.g., \"YYYY-MM-DD\")\n      required: true,\n    },\n    EndDate: {\n      type: String, // Stored as a string (e.g., \"YYYY-MM-DD\")\n      required: true,\n    },\n    Status: {\n      type: String,\n      default: \"On Going\",\n      validate: {\n        validator: (value) => SubscriptionStatusValidator(value)\n      },\n      message: \"Status must be one of:- 'Waiting', 'On Going', 'Expired', 'About to Expire'.\"\n    },\n    PaymentStatus: {\n      type: String,\n      default: \"Paid\",\n      validate: {\n        validator: (value) => PaymentStatusValidator(value)\n      },\n      message: \"Payment Status must be one of:- 'Paid', 'Unpaid', 'Part-Paid'.\"\n    },\n    PaymentMode: {\n      type: String,\n      default: \"Cash\",\n      validate: {\n        validator: (value) => PaymentModeValidator(value)\n      },\n      message: \"Payment Mode must be one of:- 'Cash', 'UPI', 'Credit-Card', 'Due', 'Part'.\"\n    },\n    Cash: {\n      type: Number,\n      default: 0.0\n    },\n    UPI: {\n      type: Number,\n      default: 0.0\n    },\n    CreditCard: {\n      type: Number,\n      default: 0.0\n    },\n  },\n  { timestamps: true }\n);\n\nexport default mongoose.models.HotelSubscription \n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAEO,MAAM,0BAA0B,IAAI,iGAAA,CAAA,UAAQ,CAAC,MAAM,CACxD;IACE,SAAS;QACP,MAAM,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,KAAK;QACL,UAAU;IACZ;IACA,gBAAgB;QACd,MAAM,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,KAAK;QACL,UAAU;IACZ;IACA,SAAS;QACP,MAAM;QACN,SAAS;QACT,UAAU;YACR,WAAW,CAAC,QAAU,CAAA,GAAA,2JAAA,CAAA,UAAgB,AAAD,EAAE;QACzC;QACA,SAAS;IACX;IACA,WAAW;QACT,MAAM;QACN,UAAU;IACZ;IACA,SAAS;QACP,MAAM;QACN,UAAU;IACZ;IACA,QAAQ;QACN,MAAM;QACN,SAAS;QACT,UAAU;YACR,WAAW,CAAC,QAAU,CAAA,GAAA,kKAAA,CAAA,8BAA2B,AAAD,EAAE;QACpD;QACA,SAAS;IACX;IACA,eAAe;QACb,MAAM;QACN,SAAS;QACT,UAAU;YACR,WAAW,CAAC,QAAU,CAAA,GAAA,kKAAA,CAAA,yBAAsB,AAAD,EAAE;QAC/C;QACA,SAAS;IACX;IACA,aAAa;QACX,MAAM;QACN,SAAS;QACT,UAAU;YACR,WAAW,CAAC,QAAU,CAAA,GAAA,kKAAA,CAAA,uBAAoB,AAAD,EAAE;QAC7C;QACA,SAAS;IACX;IACA,MAAM;QACJ,MAAM;QACN,SAAS;IACX;IACA,KAAK;QACH,MAAM;QACN,SAAS;IACX;IACA,YAAY;QACV,MAAM;QACN,SAAS;IACX;AACF,GACA;IAAE,YAAY;AAAK;uCAGN,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,iBAAiB"}},
    {"offset": {"line": 1261, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1267, "column": 0}, "map": {"version":3,"sources":["file:///home/shado/Workspace/Eatofy/src/app/lib/models/Hotels.js"],"sourcesContent":["import mongoose from \"mongoose\";\nimport StringValidators from \"../utils/StringValidator\";\n\nexport const HotelSchema = new mongoose.Schema(\n  {\n    HotelName: {\n      type: String,\n      unique: true,\n      required: true,\n      validate: {\n        validator: (value) => StringValidators(value)\n      },\n      message: \"HotelName should not contain invalid characters like /, \\\\, \\\", ;, ', +, `, or ^\"\n    },\n    Email: {\n      type: String,\n      unique: true,\n      required: true,\n      validate: {\n        validator: (value) => StringValidators(value)\n      },\n      message: \"Email should not contain invalid characters like /, \\\\, \\\", ;, ', +, `, or ^\"\n    },\n    Address: {\n      type: String,\n      required: true,\n      validate: {\n        validator: (value) => StringValidators(value)\n      },\n      message: \"Address should not contain invalid characters like /, \\\\, \\\", ;, ', +, `, or ^\"\n    },\n    Logo: {\n      type: Buffer\n    },\n    Speciality: {\n      type: [String],\n      default: []\n    },\n    Contacts: {\n      type: [String],\n      default: []\n    },\n    Website: {\n      type: String,\n      default: \"https://example.com\"\n    },\n    FSSAICode: {\n      type: String,\n      required: true,\n      validate: {\n        validator: (value) => StringValidators(value)\n      },\n      message: \"FSSAICode should not contain invalid characters like /, \\\\, \\\", ;, ', +, `, or ^\"\n    },\n    GSTIN: {\n      type: String,\n      required: true,\n      validate: {\n        validator: (value) => StringValidators(value)\n      },\n      message: \"GSTIN should not contain invalid characters like /, \\\\, \\\", ;, ', +, `, or ^\"\n    },\n  },\n  { timestamps: true }\n);\n\n// Add pre-remove middleware\nHotelSchema.pre('remove', async function(next) {\n  try {\n    // Get all model references\n    const Bills = mongoose.model('Bills');\n    const Sections = mongoose.model('Sections');\n    const MenuCategory = mongoose.model('MenuCategory');\n    const Suppliers = mongoose.model('Suppliers');\n    const ItemCategories = mongoose.model('ItemCategories');\n    const Staffs = mongoose.model('Staffs');\n\n    const Reservations = mongoose.model('Reservations');\n    const CashDrawer = mongoose.model('CashDrawer');\n    const GstSettings = mongoose.model('GstSettings');\n    const VatSettings = mongoose.model('VatSettings');\n    const KotPrinterSettings = mongoose.model('KotPrinterSettings');\n    const InvoicePrinterSettings = mongoose.model('InvoicePrinterSettings');\n    const EbillEmailSettings = mongoose.model('EbillEmailSettings');\n\n    // Delete all related data in parallel\n    await Promise.all([\n      // Delete Multi-level Operational Data\n      Bills.deleteMany({ HotelId: this._id }),\n      Sections.deleteMany({ HotelId: this._id }),\n      MenuCategory.deleteMany({ HotelId: this._id }),\n      Suppliers.deleteMany({ HotelId: this._id }),\n      ItemCategories.deleteMany({ HotelId: this._id }),\n      Staffs.deleteMany({ HotelId: this._id }),\n\n      // Delete Single-level Operational Data\n      Reservations.deleteMany({ HotelId: this._id }),\n      CashDrawer.deleteMany({ HotelId: this._id }),\n\n      // Delete settings\n      GstSettings.deleteMany({ HotelId: this._id }),\n      VatSettings.deleteMany({ HotelId: this._id }),\n      KotPrinterSettings.deleteMany({ HotelId: this._id }),\n      InvoicePrinterSettings.deleteMany({ HotelId: this._id }),\n      EbillEmailSettings.deleteMany({ HotelId: this._id })\n    ]);\n\n    next();\n  } catch (error) {\n    next(error);\n  }\n});\n\n// Add pre-deleteMany middleware\nHotelSchema.pre('deleteMany', async function(next) {\n  try {\n    // Get the hotels that will be deleted\n    const Hotels = mongoose.model('Hotels');\n    const hotels = await Hotels.find(this.getFilter());\n    const hotelIds = hotels.map(hotel => hotel._id);\n\n    if (hotelIds.length > 0) {\n      // Multi-level\n      const Bills = mongoose.model('Bills');\n      const Sections = mongoose.model('Sections');\n      const MenuCategory = mongoose.model('MenuCategory');\n      const Suppliers = mongoose.model('Suppliers');\n      const Staffs = mongoose.model('Staffs');\n      const Customers = mongoose.model('Customers');\n\n      // Single-Level\n      const Reservations = mongoose.model('Reservations');\n      const CashDrawer = mongoose.model('CashDrawer');\n      const Expenses = mongoose.model('Expenses');\n\n      // Delete settings\n      const GstSettings = mongoose.model('GstSettings');\n      const VatSettings = mongoose.model('VatSettings');\n      const KotPrinterSettings = mongoose.model('KotPrinterSettings');\n      const InvoicePrinterSettings = mongoose.model('InvoicePrinterSettings');\n      const EbillEmailSettings = mongoose.model('EbillEmailSettings');\n      const Notifications = mongoose.model('Notifications');\n\n      // Delete all related data in parallel\n      await Promise.all([\n        // Multi-level\n        Bills.deleteMany({ HotelId: { $in: hotelIds } }),\n        Sections.deleteMany({ HotelId: { $in: hotelIds } }),\n        MenuCategory.deleteMany({ HotelId: { $in: hotelIds } }),\n        Suppliers.deleteMany({ HotelId: { $in: hotelIds } }),\n        Staffs.deleteMany({ HotelId: { $in: hotelIds } }),\n        Customers.deleteMany({ HotelId: { $in: hotelIds } }),\n\n        // Single-Level\n        Reservations.deleteMany({ HotelId: { $in: hotelIds } }),\n        CashDrawer.deleteMany({ HotelId: { $in: hotelIds } }),\n        Expenses.deleteMany({ HotelId: { $in: hotelIds } }),\n\n        // Delete settings\n        GstSettings.deleteMany({ HotelId: { $in: hotelIds } }),\n        VatSettings.deleteMany({ HotelId: { $in: hotelIds } }),\n        KotPrinterSettings.deleteMany({ HotelId: { $in: hotelIds } }),\n        InvoicePrinterSettings.deleteMany({ HotelId: { $in: hotelIds } }),\n        EbillEmailSettings.deleteMany({ HotelId: { $in: hotelIds } }),\n        Notifications.deleteMany({ HotelId: { $in: hotelIds } })\n      ]);\n    }\n\n    next();\n  } catch (error) {\n    next(error);\n  }\n});\n\nconst Hotels = mongoose.models.Hotels || mongoose.model(\"Hotels\", HotelSchema);\nexport default Hotels;\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1522, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1528, "column": 0}, "map": {"version":3,"sources":["file:///home/shado/Workspace/Eatofy/src/app/lib/models/InventoryStock.js"],"sourcesContent":["import mongoose from \"mongoose\";\nimport FloatValidator from \"../utils/FloatValidator\";\nimport StringValidators from \"../utils/StringValidator\";\nimport { StockStatusValidator } from \"../utils/SpecialStringsValidator\";\n\nexport const inventoryStockSchema = new mongoose.Schema(\n  {\n    HotelId: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"Hotels\", // Reference to the `Hotels` collection\n      required: true,\n    },\n    ItemId: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"Items\", // Reference to the `Items` collection\n      required: true,\n    },\n    Quantity: {\n      type: Number,\n      required: true, // Quantity is mandatory\n      validate: {\n        validator: (value) => FloatValidator(value)\n      },\n      message: \"Quantity must be a non-negative number.\"\n    },\n    Unit: {\n      type: String, // KG, LTR, etc.\n      required: true,\n      validate: {\n        validator: (value) => StringValidators(value)\n      },\n      message: \"Unit should not contain invalid characters like /, \\\\, \\\", ;, ', +, `, or ^\"\n    },\n    Status: {\n      type: String,\n      default: \"Available\", // Default status is \"Available\"\n      validate: {\n        validator: (value) => StockStatusValidator(value)\n      },\n      message: \"Stock Status must be one of:- 'Available', 'Low Stock', 'Unavailable'.\"\n    },\n  },\n  {\n    timestamps: true, // Automatically manage `createdAt` and `updatedAt`\n  }\n);\n\nexport default mongoose.models.InventoryStock \n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;;;;;AAEO,MAAM,uBAAuB,IAAI,iGAAA,CAAA,UAAQ,CAAC,MAAM,CACrD;IACE,SAAS;QACP,MAAM,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,KAAK;QACL,UAAU;IACZ;IACA,QAAQ;QACN,MAAM,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,KAAK;QACL,UAAU;IACZ;IACA,UAAU;QACR,MAAM;QACN,UAAU;QACV,UAAU;YACR,WAAW,CAAC,QAAU,CAAA,GAAA,yJAAA,CAAA,UAAc,AAAD,EAAE;QACvC;QACA,SAAS;IACX;IACA,MAAM;QACJ,MAAM;QACN,UAAU;QACV,UAAU;YACR,WAAW,CAAC,QAAU,CAAA,GAAA,0JAAA,CAAA,UAAgB,AAAD,EAAE;QACzC;QACA,SAAS;IACX;IACA,QAAQ;QACN,MAAM;QACN,SAAS;QACT,UAAU;YACR,WAAW,CAAC,QAAU,CAAA,GAAA,kKAAA,CAAA,uBAAoB,AAAD,EAAE;QAC7C;QACA,SAAS;IACX;AACF,GACA;IACE,YAAY;AACd;uCAGa,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,cAAc"}},
    {"offset": {"line": 1579, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1585, "column": 0}, "map": {"version":3,"sources":["file:///home/shado/Workspace/Eatofy/src/app/lib/models/InvoicePrinterSettings.js"],"sourcesContent":["import mongoose from \"mongoose\";\nimport BooleanValidator from \"../utils/BooleanValidator\";\n\nexport const invoicePrinterSettingsSchema = new mongoose.Schema(\n  {\n    Visibility: {\n      type: Boolean,\n      default: false, // Determines if the Invoice printer settings are enabled\n      validate: {\n        validator: (value) => BooleanValidator(value)\n      },\n      message: \"Visibility should be either true or false\"\n    },\n    NetworkIP: {\n      type: String,\n      default: null, // IP address for network printers\n    },\n    Encoding: {\n      type: String,\n      default: null, // Encoding for the printer\n    },\n    BluetoothMac: {\n      type: String,\n      default: null, // MAC address for Bluetooth printers\n    },\n    HotelId: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"Hotels\", // Reference to the Hotels model\n      required: true,\n      unique: true\n    },\n    Status: {\n      type: String,\n      default: \"Active\", // Status of the invoice printer settings\n    },\n  },\n  {\n    timestamps: true, // Automatically manage createdAt and updatedAt fields\n  }\n);\n\nexport default mongoose.models.InvoicePrinterSettings \n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,MAAM,+BAA+B,IAAI,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAC7D;IACE,YAAY;QACV,MAAM;QACN,SAAS;QACT,UAAU;YACR,WAAW,CAAC,QAAU,CAAA,GAAA,2JAAA,CAAA,UAAgB,AAAD,EAAE;QACzC;QACA,SAAS;IACX;IACA,WAAW;QACT,MAAM;QACN,SAAS;IACX;IACA,UAAU;QACR,MAAM;QACN,SAAS;IACX;IACA,cAAc;QACZ,MAAM;QACN,SAAS;IACX;IACA,SAAS;QACP,MAAM,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,KAAK;QACL,UAAU;QACV,QAAQ;IACV;IACA,QAAQ;QACN,MAAM;QACN,SAAS;IACX;AACF,GACA;IACE,YAAY;AACd;uCAGa,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,sBAAsB"}},
    {"offset": {"line": 1628, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1634, "column": 0}, "map": {"version":3,"sources":["file:///home/shado/Workspace/Eatofy/src/app/lib/models/ItemCategories.js"],"sourcesContent":["import mongoose from \"mongoose\";\nimport StringValidators from \"../utils/StringValidator\";\n\nexport const itemCategorySchema = new mongoose.Schema(\n  {\n    CategoryName: {\n      type: String,\n      required: true, // CategoryName is mandatory\n      validate: {\n        validator: (value) => StringValidators(value)\n      },\n      message: \"Category Name should not contain invalid characters like /, \\\\, \\\", ;, ', +, `, or ^\"\n    },\n    Unit: {\n      type: String, // KG, LTR, etc.\n      required: true,\n      validate: {\n        validator: (value) => StringValidators(value)\n      },\n      message: \"Unit should not contain invalid characters like /, \\\\, \\\", ;, ', +, `, or ^\"\n    },\n    HotelId: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"Hotels\", // Reference to the `Hotels` collection\n      required: true, // HotelId is mandatory\n    },\n\n    // Child Relationship\n    Items: [\n      {\n        type: mongoose.Schema.Types.ObjectId,\n        ref: \"Items\", // Reference to `Items` collection\n      },\n    ],\n  },\n  {\n    timestamps: true, // Automatically manage `createdAt` and `updatedAt` fields\n  }\n);\n\n// Unique constraint on HotelId and CategoryName\nitemCategorySchema.index({ HotelId: 1, CategoryName: 1 }, { unique: true });\n\n// Add pre-remove middleware\nitemCategorySchema.pre('remove', async function(next) {\n  try {\n    // Delete all items in this category\n    const Items = mongoose.model('Items');\n    await Items.deleteMany({ CategoryId: this._id });\n\n    // Update inventory stock to remove category reference\n    const InventoryStock = mongoose.model('InventoryStock');\n    await InventoryStock.updateMany(\n      { CategoryId: this._id },\n      { $unset: { CategoryId: 1 } }\n    );\n    \n    next();\n  } catch (error) {\n    next(error);\n  }\n});\n\n// Add pre-deleteMany middleware\nitemCategorySchema.pre('deleteMany', async function(next) {\n  try {\n    // Get categories to be deleted\n    const ItemCategories = mongoose.model('ItemCategories');\n    const categories = await ItemCategories.find(this.getFilter());\n    const categoryIds = categories.map(category => category._id);\n\n    if (categoryIds.length > 0) {\n      // Run cleanup operations in parallel\n      await Promise.all([\n        // Delete all items in these categories\n        mongoose.model('Items').deleteMany({ CategoryId: { $in: categoryIds } }),\n        // Update inventory stock to remove category references\n        mongoose.model('InventoryStock').updateMany(\n          { CategoryId: { $in: categoryIds } },\n          { $unset: { CategoryId: 1 } }\n        )\n      ]);\n    }\n    \n    next();\n  } catch (error) {\n    next(error);\n  }\n});\n\nexport default mongoose.models.ItemCategories || mongoose.model(\"ItemCategories\", itemCategorySchema);\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,MAAM,qBAAqB,IAAI,iGAAA,CAAA,UAAQ,CAAC,MAAM,CACnD;IACE,cAAc;QACZ,MAAM;QACN,UAAU;QACV,UAAU;YACR,WAAW,CAAC,QAAU,CAAA,GAAA,0JAAA,CAAA,UAAgB,AAAD,EAAE;QACzC;QACA,SAAS;IACX;IACA,MAAM;QACJ,MAAM;QACN,UAAU;QACV,UAAU;YACR,WAAW,CAAC,QAAU,CAAA,GAAA,0JAAA,CAAA,UAAgB,AAAD,EAAE;QACzC;QACA,SAAS;IACX;IACA,SAAS;QACP,MAAM,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,KAAK;QACL,UAAU;IACZ;IAEA,qBAAqB;IACrB,OAAO;QACL;YACE,MAAM,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;YACpC,KAAK;QACP;KACD;AACH,GACA;IACE,YAAY;AACd;AAGF,gDAAgD;AAChD,mBAAmB,KAAK,CAAC;IAAE,SAAS;IAAG,cAAc;AAAE,GAAG;IAAE,QAAQ;AAAK;AAEzE,4BAA4B;AAC5B,mBAAmB,GAAG,CAAC,UAAU,eAAe,IAAI;IAClD,IAAI;QACF,oCAAoC;QACpC,MAAM,QAAQ,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;QAC7B,MAAM,MAAM,UAAU,CAAC;YAAE,YAAY,IAAI,CAAC,GAAG;QAAC;QAE9C,sDAAsD;QACtD,MAAM,iBAAiB,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;QACtC,MAAM,eAAe,UAAU,CAC7B;YAAE,YAAY,IAAI,CAAC,GAAG;QAAC,GACvB;YAAE,QAAQ;gBAAE,YAAY;YAAE;QAAE;QAG9B;IACF,EAAE,OAAO,OAAO;QACd,KAAK;IACP;AACF;AAEA,gCAAgC;AAChC,mBAAmB,GAAG,CAAC,cAAc,eAAe,IAAI;IACtD,IAAI;QACF,+BAA+B;QAC/B,MAAM,iBAAiB,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;QACtC,MAAM,aAAa,MAAM,eAAe,IAAI,CAAC,IAAI,CAAC,SAAS;QAC3D,MAAM,cAAc,WAAW,GAAG,CAAC,CAAA,WAAY,SAAS,GAAG;QAE3D,IAAI,YAAY,MAAM,GAAG,GAAG;YAC1B,qCAAqC;YACrC,MAAM,QAAQ,GAAG,CAAC;gBAChB,uCAAuC;gBACvC,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,SAAS,UAAU,CAAC;oBAAE,YAAY;wBAAE,KAAK;oBAAY;gBAAE;gBACtE,uDAAuD;gBACvD,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,kBAAkB,UAAU,CACzC;oBAAE,YAAY;wBAAE,KAAK;oBAAY;gBAAE,GACnC;oBAAE,QAAQ;wBAAE,YAAY;oBAAE;gBAAE;aAE/B;QACH;QAEA;IACF,EAAE,OAAO,OAAO;QACd,KAAK;IACP;AACF;uCAEe,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,cAAc,IAAI,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,kBAAkB"}},
    {"offset": {"line": 1737, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1743, "column": 0}, "map": {"version":3,"sources":["file:///home/shado/Workspace/Eatofy/src/app/lib/models/Items.js"],"sourcesContent":["import mongoose from \"mongoose\";\nimport StringValidators from \"../utils/StringValidator\";\n\nexport const itemSchema = new mongoose.Schema(\n  {\n    ItemName: {\n      type: String,\n      required: true, // ItemName is mandatory\n      validate: {\n        validator: (value) => StringValidators(value)\n      },\n      message: \"Item Name should not contain invalid characters like /, \\\\, \\\", ;, ', +, `, or ^\"\n    },\n    HotelId: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"Hotels\", // Reference to the `Hotels` collection\n      required: true, // HotelId is mandatory\n    },\n    CategoryId: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"ItemCategory\", // Reference to the `ItemCategories` collection\n      required: true, // CategoryId is mandatory\n    },\n\n    // Child Relationship\n    InventoryStock: [\n      {\n        type: mongoose.Schema.Types.ObjectId,\n        ref: \"InventoryStock\", // Reference to `InventoryStock` collection\n      },\n    ],\n    PurchasedStock: [\n      {\n        type: mongoose.Schema.Types.ObjectId,\n        ref: \"PurchasedStock\", // Reference to `PurchasedStock` collection\n      },\n    ],\n    StockReport: [\n      {\n        type: mongoose.Schema.Types.ObjectId,\n        ref: \"StockReport\", // Reference to `StockReport` collection\n      },\n    ],\n  },\n  {\n    timestamps: true, // Automatically manage `createdAt` and `updatedAt` fields\n  }\n);\n\n// Add pre-remove middleware\nitemSchema.pre('remove', async function(next) {\n  try {\n    // Check for and delete inventory stock\n    const InventoryStock = mongoose.model('InventoryStock');\n    await InventoryStock.deleteMany({ ItemId: this._id });\n\n    // Delete purchased stock records\n    const PurchasedStock = mongoose.model('PurchasedStock');\n    await PurchasedStock.deleteMany({ ItemId: this._id });\n\n    // Delete stock reports\n    const StockReport = mongoose.model('StockReport');\n    await StockReport.deleteMany({ ItemId: this._id });\n\n    // Update purchased invoices to remove item reference\n    const PurchasedInvoice = mongoose.model('PurchasedInvoice');\n    await PurchasedInvoice.updateMany(\n      { ItemId: this._id },\n      { $unset: { ItemId: 1 } }\n    );\n    \n    next();\n  } catch (error) {\n    next(error);\n  }\n});\n\n// Add pre-deleteMany middleware\nitemSchema.pre('deleteMany', async function(next) {\n  try {\n    // Get items to be deleted\n    const Items = mongoose.model('Items');\n    const items = await Items.find(this.getFilter());\n    const itemIds = items.map(item => item._id);\n\n    if (itemIds.length > 0) {\n      // Run cleanup operations in parallel\n      await Promise.all([\n        // Delete inventory records\n        mongoose.model('InventoryStock').deleteMany({ ItemId: { $in: itemIds } }),\n        // Delete purchased stock records\n        mongoose.model('PurchasedStock').deleteMany({ ItemId: { $in: itemIds } }),\n        // Delete stock reports\n        mongoose.model('StockReport').deleteMany({ ItemId: { $in: itemIds } }),\n        // Update purchased invoices\n        mongoose.model('PurchasedInvoice').updateMany(\n          { ItemId: { $in: itemIds } },\n          { $unset: { ItemId: 1 } }\n        )\n      ]);\n    }\n    \n    next();\n  } catch (error) {\n    next(error);\n  }\n});\n\nexport default mongoose.models.Items || mongoose.model(\"Items\", itemSchema);\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1870, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1876, "column": 0}, "map": {"version":3,"sources":["file:///home/shado/Workspace/Eatofy/src/app/lib/models/KotPrinterSettings.js"],"sourcesContent":["import mongoose from \"mongoose\";\nimport BooleanValidator from \"../utils/BooleanValidator\";\n\nexport const kotPrinterSettingsSchema = new mongoose.Schema(\n  {\n    Visibility: {\n      type: Boolean,\n      default: false, // Determines if the Invoice printer settings are enabled\n      validate: {\n        validator: (value) => BooleanValidator(value)\n      },\n      message: \"Visibility should be either true or false\"\n    },\n    NetworkIP: {\n      type: String,\n      default: null, // IP address for network printers\n    },\n    Encoding: {\n      type: String,\n      default: null, // Encoding for the printer\n    },\n    BluetoothMac: {\n      type: String,\n      default: null, // MAC address for Bluetooth printers\n    },\n    HotelId: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"Hotels\", // Reference to the Hotels model\n      required: true,\n      unique: true\n    },\n    Status: {\n      type: String,\n      default: \"Active\", // Status of the invoice printer settings\n    },\n  },\n  {\n    timestamps: true, // Automatically manage createdAt and updatedAt fields\n  }\n);\n\n// Add pre-remove middleware\nkotPrinterSettingsSchema.pre('remove', async function(next) {\n  try {\n    // Since printer settings are critical, we should verify no active orders exist\n    const Orders = mongoose.model('Orders');\n    const activeOrders = await Orders.find({\n      HotelId: this.HotelId,\n      Status: { $in: ['Ordered', 'Accepted'] }\n    });\n\n    if (activeOrders.length > 0) {\n      throw new Error('Cannot delete KOT printer settings while active orders exist');\n    }\n    \n    next();\n  } catch (error) {\n    next(error);\n  }\n});\n\n// Add pre-deleteMany middleware\nkotPrinterSettingsSchema.pre('deleteMany', async function(next) {\n  try {\n    // Get the settings that will be deleted\n    const KotPrinterSettings = mongoose.model('KotPrinterSettings');\n    const settings = await KotPrinterSettings.find(this.getFilter());\n    const hotelIds = settings.map(setting => setting.HotelId);\n\n    if (hotelIds.length > 0) {\n      // Check for active orders\n      const Orders = mongoose.model('Orders');\n      const activeOrders = await Orders.find({\n        HotelId: { $in: hotelIds },\n        Status: { $in: ['Ordered', 'Accepted'] }\n      });\n\n      if (activeOrders.length > 0) {\n        throw new Error('Cannot delete KOT printer settings while active orders exist');\n      }\n    }\n    \n    next();\n  } catch (error) {\n    next(error);\n  }\n});\n\nexport default mongoose.models.KotPrinterSettings || mongoose.model(\"KotPrinterSettings\", kotPrinterSettingsSchema);\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,MAAM,2BAA2B,IAAI,iGAAA,CAAA,UAAQ,CAAC,MAAM,CACzD;IACE,YAAY;QACV,MAAM;QACN,SAAS;QACT,UAAU;YACR,WAAW,CAAC,QAAU,CAAA,GAAA,2JAAA,CAAA,UAAgB,AAAD,EAAE;QACzC;QACA,SAAS;IACX;IACA,WAAW;QACT,MAAM;QACN,SAAS;IACX;IACA,UAAU;QACR,MAAM;QACN,SAAS;IACX;IACA,cAAc;QACZ,MAAM;QACN,SAAS;IACX;IACA,SAAS;QACP,MAAM,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,KAAK;QACL,UAAU;QACV,QAAQ;IACV;IACA,QAAQ;QACN,MAAM;QACN,SAAS;IACX;AACF,GACA;IACE,YAAY;AACd;AAGF,4BAA4B;AAC5B,yBAAyB,GAAG,CAAC,UAAU,eAAe,IAAI;IACxD,IAAI;QACF,+EAA+E;QAC/E,MAAM,SAAS,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;QAC9B,MAAM,eAAe,MAAM,OAAO,IAAI,CAAC;YACrC,SAAS,IAAI,CAAC,OAAO;YACrB,QAAQ;gBAAE,KAAK;oBAAC;oBAAW;iBAAW;YAAC;QACzC;QAEA,IAAI,aAAa,MAAM,GAAG,GAAG;YAC3B,MAAM,IAAI,MAAM;QAClB;QAEA;IACF,EAAE,OAAO,OAAO;QACd,KAAK;IACP;AACF;AAEA,gCAAgC;AAChC,yBAAyB,GAAG,CAAC,cAAc,eAAe,IAAI;IAC5D,IAAI;QACF,wCAAwC;QACxC,MAAM,qBAAqB,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;QAC1C,MAAM,WAAW,MAAM,mBAAmB,IAAI,CAAC,IAAI,CAAC,SAAS;QAC7D,MAAM,WAAW,SAAS,GAAG,CAAC,CAAA,UAAW,QAAQ,OAAO;QAExD,IAAI,SAAS,MAAM,GAAG,GAAG;YACvB,0BAA0B;YAC1B,MAAM,SAAS,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;YAC9B,MAAM,eAAe,MAAM,OAAO,IAAI,CAAC;gBACrC,SAAS;oBAAE,KAAK;gBAAS;gBACzB,QAAQ;oBAAE,KAAK;wBAAC;wBAAW;qBAAW;gBAAC;YACzC;YAEA,IAAI,aAAa,MAAM,GAAG,GAAG;gBAC3B,MAAM,IAAI,MAAM;YAClB;QACF;QAEA;IACF,EAAE,OAAO,OAAO;QACd,KAAK;IACP;AACF;uCAEe,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,kBAAkB,IAAI,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,sBAAsB"}},
    {"offset": {"line": 1971, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1977, "column": 0}, "map": {"version":3,"sources":["file:///home/shado/Workspace/Eatofy/src/app/lib/models/MenuCategory.js"],"sourcesContent":["import mongoose from \"mongoose\";\nimport StringValidators from \"../utils/StringValidator\";\n\nexport const menuCategorySchema = new mongoose.Schema(\n  {\n    CategoryName: {\n      type: String,\n      required: true,\n      validate: {\n        validator: (value) => StringValidators(value)\n      },\n      message: \"Category Name should not contain invalid characters like /, \\\\, \\\", ;, ', +, `, or ^\"\n    },\n    HotelId: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"Hotels\", // References the `Hotels` collection\n      required: true,\n    },\n\n    // Child Relationship\n    Dishes: [\n      {\n        type: mongoose.Schema.Types.ObjectId,\n        ref: \"Dishes\", // References the `Dishes` collection\n      },\n    ],\n  },\n  { timestamps: true }\n);\n\n// Unique constraint on HotelId and CategoryName\nmenuCategorySchema.index({ HotelId: 1, CategoryName: 1 }, { unique: true });\n\n// Add pre-remove middleware\nmenuCategorySchema.pre('remove', async function(next) {\n  try {\n    // Check if dish has any active menus\n    const Dishes = mongoose.model('Dishes');\n    const activeDishes = await Dishes.find({ CategoryId: this._id });\n\n    if (activeDishes.length > 0) {\n      // Delete all related menus first\n      await Dishes.deleteMany({ CategoryId: this._id });\n    }\n\n    next();\n  } catch (error) {\n    next(error);\n  }\n});\n\n// Add pre-deleteMany middleware\nmenuCategorySchema.pre('deleteMany', async function(next) {\n  try {\n    // Get the dishes that will be deleted\n    const Categories = mongoose.model('MenuCategory');\n    const categories = await Categories.find(this.getFilter());\n    const Ids = categories.map(category => category._id);\n\n    // Delete all related menus\n    if (Ids.length > 0) {\n      const Dishes = mongoose.model('Dishes');\n      await Dishes.deleteMany({ CategoryId: { $in: Ids } });\n    }\n\n    next();\n  } catch (error) {\n    next(error);\n  }\n});\n\n\nexport default mongoose.models.MenuCategory \n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,MAAM,qBAAqB,IAAI,iGAAA,CAAA,UAAQ,CAAC,MAAM,CACnD;IACE,cAAc;QACZ,MAAM;QACN,UAAU;QACV,UAAU;YACR,WAAW,CAAC,QAAU,CAAA,GAAA,0JAAA,CAAA,UAAgB,AAAD,EAAE;QACzC;QACA,SAAS;IACX;IACA,SAAS;QACP,MAAM,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,KAAK;QACL,UAAU;IACZ;IAEA,qBAAqB;IACrB,QAAQ;QACN;YACE,MAAM,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;YACpC,KAAK;QACP;KACD;AACH,GACA;IAAE,YAAY;AAAK;AAGrB,gDAAgD;AAChD,mBAAmB,KAAK,CAAC;IAAE,SAAS;IAAG,cAAc;AAAE,GAAG;IAAE,QAAQ;AAAK;AAEzE,4BAA4B;AAC5B,mBAAmB,GAAG,CAAC,UAAU,eAAe,IAAI;IAClD,IAAI;QACF,qCAAqC;QACrC,MAAM,SAAS,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;QAC9B,MAAM,eAAe,MAAM,OAAO,IAAI,CAAC;YAAE,YAAY,IAAI,CAAC,GAAG;QAAC;QAE9D,IAAI,aAAa,MAAM,GAAG,GAAG;YAC3B,iCAAiC;YACjC,MAAM,OAAO,UAAU,CAAC;gBAAE,YAAY,IAAI,CAAC,GAAG;YAAC;QACjD;QAEA;IACF,EAAE,OAAO,OAAO;QACd,KAAK;IACP;AACF;AAEA,gCAAgC;AAChC,mBAAmB,GAAG,CAAC,cAAc,eAAe,IAAI;IACtD,IAAI;QACF,sCAAsC;QACtC,MAAM,aAAa,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;QAClC,MAAM,aAAa,MAAM,WAAW,IAAI,CAAC,IAAI,CAAC,SAAS;QACvD,MAAM,MAAM,WAAW,GAAG,CAAC,CAAA,WAAY,SAAS,GAAG;QAEnD,2BAA2B;QAC3B,IAAI,IAAI,MAAM,GAAG,GAAG;YAClB,MAAM,SAAS,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;YAC9B,MAAM,OAAO,UAAU,CAAC;gBAAE,YAAY;oBAAE,KAAK;gBAAI;YAAE;QACrD;QAEA;IACF,EAAE,OAAO,OAAO;QACd,KAAK;IACP;AACF;uCAGe,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,YAAY"}},
    {"offset": {"line": 2057, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2063, "column": 0}, "map": {"version":3,"sources":["file:///home/shado/Workspace/Eatofy/src/app/lib/models/Menus.js"],"sourcesContent":["import mongoose from \"mongoose\";\nimport FloatValidator from \"../utils/FloatValidator\";\n\nexport const menusSchema = new mongoose.Schema(\n  {\n    HotelId: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"Hotels\", // Reference to the `Hotels` collection\n      required: true, // HotelId is mandatory\n    },\n    SectionId: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"Sections\", // Reference to `Sections` collection\n      required: true,\n    },\n    DishId: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"Dishes\", // Reference to `Dishes` collection\n      required: true,\n    },\n    Price: {\n      type: Number,\n      required: true, // Price is mandatory\n      validate: {\n        validator: (value) => FloatValidator(value)\n      },\n      message: \"Price must be a non-negative number and must be in decimal format(100.00).\"\n    },\n\n    // Child Relationship\n    Menu: [\n      {\n        type: mongoose.Schema.Types.ObjectId,\n        ref: \"Orders\", // Reference to `Orders` collection\n      },\n    ],\n  },\n  {\n    timestamps: true, // Automatically manage `createdAt` and `updatedAt` fields\n  }\n);\n\n// Unique constraint on SectionId and DishId\nmenusSchema.index({ SectionId: 1, DishId: 1 }, { unique: true });\n\n// Add pre-remove middleware\nmenusSchema.pre('remove', async function(next) {\n  try {\n    // Delete all related orders\n    const Orders = mongoose.model('Orders');\n    await Orders.deleteMany({ MenuId: this._id });\n    \n    next();\n  } catch (error) {\n    next(error);\n  }\n});\n\n// Add pre-deleteMany middleware\nmenusSchema.pre('deleteMany', async function(next) {\n  try {\n    // Get the menus that will be deleted\n    const Menus = mongoose.model('Menus');\n    const menus = await Menus.find(this.getFilter());\n    \n    // Get all menu IDs\n    const menuIds = menus.map(menu => menu._id);\n    \n    // Delete all related orders\n    if (menuIds.length > 0) {\n      const Orders = mongoose.model('Orders');\n      await Orders.deleteMany({ MenuId: { $in: menuIds } });\n    }\n    \n    next();\n  } catch (error) {\n    next(error);\n  }\n});\n\nexport default mongoose.models.Menus || mongoose.model(\"Menus\", menusSchema);\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,MAAM,cAAc,IAAI,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAC5C;IACE,SAAS;QACP,MAAM,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,KAAK;QACL,UAAU;IACZ;IACA,WAAW;QACT,MAAM,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,KAAK;QACL,UAAU;IACZ;IACA,QAAQ;QACN,MAAM,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,KAAK;QACL,UAAU;IACZ;IACA,OAAO;QACL,MAAM;QACN,UAAU;QACV,UAAU;YACR,WAAW,CAAC,QAAU,CAAA,GAAA,yJAAA,CAAA,UAAc,AAAD,EAAE;QACvC;QACA,SAAS;IACX;IAEA,qBAAqB;IACrB,MAAM;QACJ;YACE,MAAM,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;YACpC,KAAK;QACP;KACD;AACH,GACA;IACE,YAAY;AACd;AAGF,4CAA4C;AAC5C,YAAY,KAAK,CAAC;IAAE,WAAW;IAAG,QAAQ;AAAE,GAAG;IAAE,QAAQ;AAAK;AAE9D,4BAA4B;AAC5B,YAAY,GAAG,CAAC,UAAU,eAAe,IAAI;IAC3C,IAAI;QACF,4BAA4B;QAC5B,MAAM,SAAS,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;QAC9B,MAAM,OAAO,UAAU,CAAC;YAAE,QAAQ,IAAI,CAAC,GAAG;QAAC;QAE3C;IACF,EAAE,OAAO,OAAO;QACd,KAAK;IACP;AACF;AAEA,gCAAgC;AAChC,YAAY,GAAG,CAAC,cAAc,eAAe,IAAI;IAC/C,IAAI;QACF,qCAAqC;QACrC,MAAM,QAAQ,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;QAC7B,MAAM,QAAQ,MAAM,MAAM,IAAI,CAAC,IAAI,CAAC,SAAS;QAE7C,mBAAmB;QACnB,MAAM,UAAU,MAAM,GAAG,CAAC,CAAA,OAAQ,KAAK,GAAG;QAE1C,4BAA4B;QAC5B,IAAI,QAAQ,MAAM,GAAG,GAAG;YACtB,MAAM,SAAS,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;YAC9B,MAAM,OAAO,UAAU,CAAC;gBAAE,QAAQ;oBAAE,KAAK;gBAAQ;YAAE;QACrD;QAEA;IACF,EAAE,OAAO,OAAO;QACd,KAAK;IACP;AACF;uCAEe,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,IAAI,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,SAAS"}},
    {"offset": {"line": 2148, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2154, "column": 0}, "map": {"version":3,"sources":["file:///home/shado/Workspace/Eatofy/src/app/lib/models/Notifications.js"],"sourcesContent":["import mongoose from \"mongoose\";\n\nexport const notificationSchema = new mongoose.Schema(\n  {\n    HotelId: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"Hotels\", // Reference to the Hotels model\n      required: true,\n    },\n    Type: {\n      type: String,\n      default: \"Unread\", // Notification type, default is \"Unread\"\n    },\n    Title: {\n      type: String,\n      required: true, // The title of the notification\n    },\n    Description: {\n      type: String,\n      required: false, // The description of the notification (optional)\n    }\n  },\n  {\n    timestamps: true, // Automatically manage createdAt and updatedAt fields\n  }\n);\n\n// Unique constraint on HotelId and Description\nnotificationSchema.index({ HotelId: 1, Description: 1 }, { unique: true });\n\nexport default mongoose.models.Notifications \n"],"names":[],"mappings":";;;;AAAA;;AAEO,MAAM,qBAAqB,IAAI,iGAAA,CAAA,UAAQ,CAAC,MAAM,CACnD;IACE,SAAS;QACP,MAAM,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,KAAK;QACL,UAAU;IACZ;IACA,MAAM;QACJ,MAAM;QACN,SAAS;IACX;IACA,OAAO;QACL,MAAM;QACN,UAAU;IACZ;IACA,aAAa;QACX,MAAM;QACN,UAAU;IACZ;AACF,GACA;IACE,YAAY;AACd;AAGF,+CAA+C;AAC/C,mBAAmB,KAAK,CAAC;IAAE,SAAS;IAAG,aAAa;AAAE,GAAG;IAAE,QAAQ;AAAK;uCAEzD,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,aAAa"}},
    {"offset": {"line": 2189, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2195, "column": 0}, "map": {"version":3,"sources":["file:///home/shado/Workspace/Eatofy/src/app/lib/models/Orders.js"],"sourcesContent":["import mongoose from \"mongoose\";\nimport FloatValidator from \"../utils/FloatValidator\";\n\nexport const ordersSchema = new mongoose.Schema(\n  {\n    Quantity: {\n      type: Number,\n      required: true,\n      min: [1, 'Quantity must be at least 1'],\n      validate: {\n        validator: function(value) {\n          return !isNaN(value) && FloatValidator(value);\n        },\n        message: props => `${props.value} is not a valid quantity. Quantity must be a positive number.`\n      }\n    },\n    Note: {\n      type: String,\n      default: null\n    },\n    TotalAmount: {\n      type: Number,\n      required: true,\n      validate: {\n        validator: (value) => FloatValidator(value)\n      },\n      message: \"Total Amount must be a non-negative number.\"\n    },\n    MenuId: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"Menus\",\n      required: true,\n    },\n    BillId: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"Bills\",\n      required: true,\n    },\n    Status: {\n      type: String,\n      default: \"Ordered\",\n      validate: {\n        validator: (value) => {\n          return [\"Ordered\", \"Done\", \"Accepted\", \"Rejected\", \"Cancelled\"].includes(value)\n        }\n      },\n      message: \"Status must be one of: 'Ordered', 'Done', 'Accepted', 'Rejected', 'Cancelled'.\"\n    },\n    Reason: {\n      type: String,\n      default: null\n    },\n    HotelId: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"Hotels\",\n      required: true,\n    }\n  },\n  {\n    timestamps: true\n  }\n);\n\n// Pre-remove middleware for single document\nordersSchema.pre('deleteOne', { document: true }, async function(next) {\n  try {\n\n    // Update menu if needed\n    if (this.MenuId) {\n      const Menus = mongoose.model('Menus');\n      await Menus.findByIdAndUpdate(this.MenuId, {\n        $pull: { Orders: this._id }\n      });\n    }\n\n    // Update bill if needed\n    if (this.BillId) {\n      const Bills = mongoose.model('Bills');\n      await Bills.findByIdAndUpdate(this.BillId, {\n        $pull: { Orders: this._id }\n      });\n    }\n\n\n    next();\n  } catch (error) {\n    next(error);\n  }\n});\n\n// Pre-deleteMany middleware for multiple documents\nordersSchema.pre('deleteMany', async function(next) {\n  try {\n    const Orders = mongoose.model('Orders');\n    const orders = await Orders.find(this.getFilter());\n\n    if (orders.length > 0) {\n      const menuIds = orders.map(order => order.MenuId).filter(Boolean);\n\n      if (menuIds.length > 0) {\n        const Menus = mongoose.model('Menus');\n        await Menus.updateMany(\n          { _id: { $in: menuIds } },\n          { $pull: { Orders: { $in: orders.map(order => order._id) } } }\n        );\n      }\n    }\n    next();\n  } catch (error) {\n    next(error);\n  }\n});\n\nexport default mongoose.models.Orders || mongoose.model(\"Orders\", ordersSchema);\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 2324, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2330, "column": 0}, "map": {"version":3,"sources":["file:///home/shado/Workspace/Eatofy/src/app/lib/models/PurchasedInvoice.js"],"sourcesContent":["import mongoose from \"mongoose\";\nimport FloatValidator from \"../utils/FloatValidator\";\nimport { PaymentModeValidator, PaymentStatusValidator } from \"../utils/SpecialStringsValidator\";\n\nexport const purchasedInvoiceSchema = new mongoose.Schema(\n  {\n    InvoiceNo: {\n      type: String,\n      default: null, // Invoice number is optional\n    },\n    Date: {\n      type: String, // Date of the invoice\n      required: true,\n    },\n    PaymentMode: {\n      type: String,\n      default: \"Cash\",\n      validate: {\n        validator: (value) => PaymentModeValidator(value)\n      },\n      message: \"Payment Mode must be one of:- 'Cash', 'UPI', 'Credit-Card', 'Due', 'Part'.\"\n    },\n    AmountPaid: {\n      type: Number,\n      required: true, // Paid amount is mandatory\n      validate: {\n        validator: (value) => FloatValidator(value)\n      },\n      message: \"Amount Paid must be a non-negative number.\"\n    },\n    BalanceAmount: {\n      type: Number,\n      default: 0.0, // Default balance amount is 0.00\n    },\n    PaymentStatus: {\n      type: String,\n      default: \"Paid\",\n      validate: {\n        validator: (value) => PaymentStatusValidator(value)\n      },\n      message: \"Payment Status must be one of:- 'Paid', 'Unpaid', 'Part-Paid'.\"\n    },\n    SupplierId: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"Suppliers\", // Reference to the `Suppliers` collection\n      required: true,\n    },\n    HotelId: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"Hotels\", // Reference to the `Hotels` collection\n      required: true,\n    },\n    Cash: {\n      type: Number,\n      default: 0.0\n    },\n    UPI: {\n      type: Number,\n      default: 0.0\n    },\n    CreditCard: {\n      type: Number,\n      default: 0.0\n    },\n\n    // Child Relationship\n    Stock: [\n      {\n        type: mongoose.Schema.Types.ObjectId,\n        ref: \"PurchasedStock\", // Reference to `PurchasedStock` collection\n      },\n    ],\n  },\n  {\n    timestamps: true, // Automatically manage `createdAt` and `updatedAt` fields\n  }\n);\n\n// Add pre-remove middleware\npurchasedInvoiceSchema.pre('remove', async function(next) {\n  try {\n    // Check payment status\n    if (this.PaymentStatus === 'Unpaid' || this.PaymentStatus === 'Part-Paid') {\n      throw new Error('Cannot delete invoice with pending payments');\n    }\n\n    // Check for and delete related menus\n    const PurchasedStock = mongoose.model('PurchasedStock');\n    await PurchasedStock.deleteMany({ InvoiceId: this._id });\n\n    next();\n  } catch (error) {\n    next(error);\n  }\n});\n\n// Add pre-deleteMany middleware\npurchasedInvoiceSchema.pre('deleteMany', async function(next) {\n  try {\n    // Get the sections that will be deleted\n    const PurchasedInvoice = mongoose.model('PurchasedInvoice');\n    const invoices = await PurchasedInvoice.find(this.getFilter());\n    const invoicesIds = invoices.map(invoice => invoice._id);\n\n    if (invoicesIds.length > 0) {\n      // Delete all related menus\n      const PurchasedStock = mongoose.model('PurchasedStock');\n      await PurchasedStock.deleteMany({ InvoiceId: { $in: invoicesIds } });\n    }\n\n    next();\n  } catch (error) {\n    next(error);\n  }\n});\n\n\nexport default mongoose.models.PurchasedInvoice \n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAEO,MAAM,yBAAyB,IAAI,iGAAA,CAAA,UAAQ,CAAC,MAAM,CACvD;IACE,WAAW;QACT,MAAM;QACN,SAAS;IACX;IACA,MAAM;QACJ,MAAM;QACN,UAAU;IACZ;IACA,aAAa;QACX,MAAM;QACN,SAAS;QACT,UAAU;YACR,WAAW,CAAC,QAAU,CAAA,GAAA,kKAAA,CAAA,uBAAoB,AAAD,EAAE;QAC7C;QACA,SAAS;IACX;IACA,YAAY;QACV,MAAM;QACN,UAAU;QACV,UAAU;YACR,WAAW,CAAC,QAAU,CAAA,GAAA,yJAAA,CAAA,UAAc,AAAD,EAAE;QACvC;QACA,SAAS;IACX;IACA,eAAe;QACb,MAAM;QACN,SAAS;IACX;IACA,eAAe;QACb,MAAM;QACN,SAAS;QACT,UAAU;YACR,WAAW,CAAC,QAAU,CAAA,GAAA,kKAAA,CAAA,yBAAsB,AAAD,EAAE;QAC/C;QACA,SAAS;IACX;IACA,YAAY;QACV,MAAM,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,KAAK;QACL,UAAU;IACZ;IACA,SAAS;QACP,MAAM,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,KAAK;QACL,UAAU;IACZ;IACA,MAAM;QACJ,MAAM;QACN,SAAS;IACX;IACA,KAAK;QACH,MAAM;QACN,SAAS;IACX;IACA,YAAY;QACV,MAAM;QACN,SAAS;IACX;IAEA,qBAAqB;IACrB,OAAO;QACL;YACE,MAAM,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;YACpC,KAAK;QACP;KACD;AACH,GACA;IACE,YAAY;AACd;AAGF,4BAA4B;AAC5B,uBAAuB,GAAG,CAAC,UAAU,eAAe,IAAI;IACtD,IAAI;QACF,uBAAuB;QACvB,IAAI,IAAI,CAAC,aAAa,KAAK,YAAY,IAAI,CAAC,aAAa,KAAK,aAAa;YACzE,MAAM,IAAI,MAAM;QAClB;QAEA,qCAAqC;QACrC,MAAM,iBAAiB,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;QACtC,MAAM,eAAe,UAAU,CAAC;YAAE,WAAW,IAAI,CAAC,GAAG;QAAC;QAEtD;IACF,EAAE,OAAO,OAAO;QACd,KAAK;IACP;AACF;AAEA,gCAAgC;AAChC,uBAAuB,GAAG,CAAC,cAAc,eAAe,IAAI;IAC1D,IAAI;QACF,wCAAwC;QACxC,MAAM,mBAAmB,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;QACxC,MAAM,WAAW,MAAM,iBAAiB,IAAI,CAAC,IAAI,CAAC,SAAS;QAC3D,MAAM,cAAc,SAAS,GAAG,CAAC,CAAA,UAAW,QAAQ,GAAG;QAEvD,IAAI,YAAY,MAAM,GAAG,GAAG;YAC1B,2BAA2B;YAC3B,MAAM,iBAAiB,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;YACtC,MAAM,eAAe,UAAU,CAAC;gBAAE,WAAW;oBAAE,KAAK;gBAAY;YAAE;QACpE;QAEA;IACF,EAAE,OAAO,OAAO;QACd,KAAK;IACP;AACF;uCAGe,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,gBAAgB"}},
    {"offset": {"line": 2448, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2454, "column": 0}, "map": {"version":3,"sources":["file:///home/shado/Workspace/Eatofy/src/app/lib/models/PurchasedStock.js"],"sourcesContent":["import mongoose from \"mongoose\";\nimport FloatValidator from \"../utils/FloatValidator\";\n\nexport const purchasedStockSchema = new mongoose.Schema(\n  {\n    InvoiceId: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"PurchasedInvoice\", // Reference to the `PurchasedInvoice` collection\n      required: true,\n    },\n    ItemId: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"Items\", // Reference to the `Items` collection\n      required: true,\n    },\n    Quantity: {\n      type: Number,\n      required: true, // Quantity is mandatory\n      validate: {\n        validator: (value) => FloatValidator(value)\n      },\n      message: \"Quantity must be a non-negative number.\"\n    },\n    UnitPrice: {\n      type: Number,\n      required: true, // Unit Price is mandatory\n      validate: {\n        validator: (value) => FloatValidator(value)\n      },\n      message: \"Unit Price must be a non-negative number.\"\n    },\n    TotalPrice: {\n      type: Number,\n      required: true, // Total Price is mandatory\n      validate: {\n        validator: (value) => FloatValidator(value)\n      },\n      message: \"Total Price must be a non-negative number.\"\n    },\n  },\n  {\n    timestamps: true, // Automatically manage `createdAt` and `updatedAt` fields\n  }\n);\n\n// Pre-remove middleware for single document\npurchasedStockSchema.pre('deleteOne', { document: true }, async function(next) {\n  try {\n\n    // Update menu if needed\n    if (this.InvoiceId) {\n      const PurchasedInvoice = mongoose.model('PurchasedInvoice');\n      await PurchasedInvoice.findByIdAndUpdate(this.InvoiceId, {\n        $pull: { Stock: this._id }\n      });\n    }\n\n    next();\n  } catch (error) {\n    next(error);\n  }\n});\n\n// Pre-deleteMany middleware for multiple documents\npurchasedStockSchema.pre('deleteMany', async function(next) {\n  try {\n    const PurchasedStock = mongoose.model('PurchasedStock');\n    const stock = await PurchasedStock.find(this.getFilter());\n\n    if (stock.length > 0) {\n      const stockIds = stock.map(item => item.InvoiceId).filter(Boolean);\n\n      if (stockIds.length > 0) {\n        const PurchasedInvoice = mongoose.model('PurchasedInvoice');\n        await PurchasedInvoice.updateMany(\n          { _id: { $in: stockIds } },\n          { $pull: { Stock: { $in: stock.map(item => item._id) } } }\n        );\n      }\n    }\n    next();\n  } catch (error) {\n    next(error);\n  }\n});\n\n// Unique constraint on InvoiceId and ItemId\npurchasedStockSchema.index({ InvoiceId: 1, ItemId: 1 }, { unique: true });\n\nexport default mongoose.models.PurchasedStock \n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,MAAM,uBAAuB,IAAI,iGAAA,CAAA,UAAQ,CAAC,MAAM,CACrD;IACE,WAAW;QACT,MAAM,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,KAAK;QACL,UAAU;IACZ;IACA,QAAQ;QACN,MAAM,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,KAAK;QACL,UAAU;IACZ;IACA,UAAU;QACR,MAAM;QACN,UAAU;QACV,UAAU;YACR,WAAW,CAAC,QAAU,CAAA,GAAA,yJAAA,CAAA,UAAc,AAAD,EAAE;QACvC;QACA,SAAS;IACX;IACA,WAAW;QACT,MAAM;QACN,UAAU;QACV,UAAU;YACR,WAAW,CAAC,QAAU,CAAA,GAAA,yJAAA,CAAA,UAAc,AAAD,EAAE;QACvC;QACA,SAAS;IACX;IACA,YAAY;QACV,MAAM;QACN,UAAU;QACV,UAAU;YACR,WAAW,CAAC,QAAU,CAAA,GAAA,yJAAA,CAAA,UAAc,AAAD,EAAE;QACvC;QACA,SAAS;IACX;AACF,GACA;IACE,YAAY;AACd;AAGF,4CAA4C;AAC5C,qBAAqB,GAAG,CAAC,aAAa;IAAE,UAAU;AAAK,GAAG,eAAe,IAAI;IAC3E,IAAI;QAEF,wBAAwB;QACxB,IAAI,IAAI,CAAC,SAAS,EAAE;YAClB,MAAM,mBAAmB,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;YACxC,MAAM,iBAAiB,iBAAiB,CAAC,IAAI,CAAC,SAAS,EAAE;gBACvD,OAAO;oBAAE,OAAO,IAAI,CAAC,GAAG;gBAAC;YAC3B;QACF;QAEA;IACF,EAAE,OAAO,OAAO;QACd,KAAK;IACP;AACF;AAEA,mDAAmD;AACnD,qBAAqB,GAAG,CAAC,cAAc,eAAe,IAAI;IACxD,IAAI;QACF,MAAM,iBAAiB,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;QACtC,MAAM,QAAQ,MAAM,eAAe,IAAI,CAAC,IAAI,CAAC,SAAS;QAEtD,IAAI,MAAM,MAAM,GAAG,GAAG;YACpB,MAAM,WAAW,MAAM,GAAG,CAAC,CAAA,OAAQ,KAAK,SAAS,EAAE,MAAM,CAAC;YAE1D,IAAI,SAAS,MAAM,GAAG,GAAG;gBACvB,MAAM,mBAAmB,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;gBACxC,MAAM,iBAAiB,UAAU,CAC/B;oBAAE,KAAK;wBAAE,KAAK;oBAAS;gBAAE,GACzB;oBAAE,OAAO;wBAAE,OAAO;4BAAE,KAAK,MAAM,GAAG,CAAC,CAAA,OAAQ,KAAK,GAAG;wBAAE;oBAAE;gBAAE;YAE7D;QACF;QACA;IACF,EAAE,OAAO,OAAO;QACd,KAAK;IACP;AACF;AAEA,4CAA4C;AAC5C,qBAAqB,KAAK,CAAC;IAAE,WAAW;IAAG,QAAQ;AAAE,GAAG;IAAE,QAAQ;AAAK;uCAExD,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,cAAc"}},
    {"offset": {"line": 2554, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2560, "column": 0}, "map": {"version":3,"sources":["file:///home/shado/Workspace/Eatofy/src/app/lib/models/Sections.js"],"sourcesContent":["import mongoose from \"mongoose\";\nimport { OrderTypeValidator } from \"../utils/SpecialStringsValidator\";\nimport StringValidators from \"../utils/StringValidator\";\n\nexport const SectionsSchema = new mongoose.Schema(\n  {\n    SectionName: {\n      type: String,\n      required: true,\n      validate: {\n        validator: (value) => StringValidators(value)\n      },\n      message: \"Section Name should not contain invalid characters like /, \\\\, \\\", ;, ', +, `, or ^\"\n\n    },\n    HotelId: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"Hotels\", // Reference to the Hotels collection\n      required: true,\n    },\n    Type: {\n      type: String,\n      default: \"Dine-In\",\n      validate: {\n        validator: (value) => OrderTypeValidator(value)\n      },\n      message: \"Section Type must be one of:- 'Takeaway', 'Delivery', 'Dine-In', 'Swiggy', 'Zomato', 'QR-Orders'.\"\n    },\n\n    // Children Relationship\n    Menus: [\n      {\n        type: mongoose.Schema.Types.ObjectId,\n        ref: \"Menus\", // Reference to the Menus collection\n      },\n    ],\n    Tables: [\n      {\n        type: mongoose.Schema.Types.ObjectId,\n        ref: \"Tables\", // Reference to the Tables collection\n      },\n    ],\n  },\n  { timestamps: true }\n);\n\n// Unique constraint on HotelId and SectionName\nSectionsSchema.index({ HotelId: 1, SectionName: 1 }, { unique: true });\n\n// Add pre-remove middleware\nSectionsSchema.pre('remove', async function(next) {\n  try {\n    // Check for and delete related menus\n    const Menus = mongoose.model('Menus');\n    await Menus.deleteMany({ SectionId: this._id });\n\n    // Check for and delete related tables\n    const Tables = mongoose.model('Tables');\n    await Tables.deleteMany({ SectionId: this._id });\n\n    next();\n  } catch (error) {\n    next(error);\n  }\n});\n\n// Add pre-deleteMany middleware\nSectionsSchema.pre('deleteMany', async function(next) {\n  try {\n    // Get the sections that will be deleted\n    const Sections = mongoose.model('Sections');\n    const sections = await Sections.find(this.getFilter());\n    const sectionIds = sections.map(section => section._id);\n\n    if (sectionIds.length > 0) {\n      // Delete all related menus\n      const Menus = mongoose.model('Menus');\n      await Menus.deleteMany({ SectionId: { $in: sectionIds } });\n\n      // Update tables to remove section references\n      const Tables = mongoose.model('Tables');\n      await Tables.deleteMany({ SectionId: { $in: sectionIds } });\n    }\n\n    next();\n  } catch (error) {\n    next(error);\n  }\n});\n\nexport default mongoose.models.Sections || mongoose.model(\"Sections\", SectionsSchema);\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAEO,MAAM,iBAAiB,IAAI,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAC/C;IACE,aAAa;QACX,MAAM;QACN,UAAU;QACV,UAAU;YACR,WAAW,CAAC,QAAU,CAAA,GAAA,0JAAA,CAAA,UAAgB,AAAD,EAAE;QACzC;QACA,SAAS;IAEX;IACA,SAAS;QACP,MAAM,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,KAAK;QACL,UAAU;IACZ;IACA,MAAM;QACJ,MAAM;QACN,SAAS;QACT,UAAU;YACR,WAAW,CAAC,QAAU,CAAA,GAAA,kKAAA,CAAA,qBAAkB,AAAD,EAAE;QAC3C;QACA,SAAS;IACX;IAEA,wBAAwB;IACxB,OAAO;QACL;YACE,MAAM,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;YACpC,KAAK;QACP;KACD;IACD,QAAQ;QACN;YACE,MAAM,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;YACpC,KAAK;QACP;KACD;AACH,GACA;IAAE,YAAY;AAAK;AAGrB,+CAA+C;AAC/C,eAAe,KAAK,CAAC;IAAE,SAAS;IAAG,aAAa;AAAE,GAAG;IAAE,QAAQ;AAAK;AAEpE,4BAA4B;AAC5B,eAAe,GAAG,CAAC,UAAU,eAAe,IAAI;IAC9C,IAAI;QACF,qCAAqC;QACrC,MAAM,QAAQ,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;QAC7B,MAAM,MAAM,UAAU,CAAC;YAAE,WAAW,IAAI,CAAC,GAAG;QAAC;QAE7C,sCAAsC;QACtC,MAAM,SAAS,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;QAC9B,MAAM,OAAO,UAAU,CAAC;YAAE,WAAW,IAAI,CAAC,GAAG;QAAC;QAE9C;IACF,EAAE,OAAO,OAAO;QACd,KAAK;IACP;AACF;AAEA,gCAAgC;AAChC,eAAe,GAAG,CAAC,cAAc,eAAe,IAAI;IAClD,IAAI;QACF,wCAAwC;QACxC,MAAM,WAAW,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;QAChC,MAAM,WAAW,MAAM,SAAS,IAAI,CAAC,IAAI,CAAC,SAAS;QACnD,MAAM,aAAa,SAAS,GAAG,CAAC,CAAA,UAAW,QAAQ,GAAG;QAEtD,IAAI,WAAW,MAAM,GAAG,GAAG;YACzB,2BAA2B;YAC3B,MAAM,QAAQ,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;YAC7B,MAAM,MAAM,UAAU,CAAC;gBAAE,WAAW;oBAAE,KAAK;gBAAW;YAAE;YAExD,6CAA6C;YAC7C,MAAM,SAAS,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;YAC9B,MAAM,OAAO,UAAU,CAAC;gBAAE,WAAW;oBAAE,KAAK;gBAAW;YAAE;QAC3D;QAEA;IACF,EAAE,OAAO,OAAO;QACd,KAAK;IACP;AACF;uCAEe,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,QAAQ,IAAI,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,YAAY"}},
    {"offset": {"line": 2662, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2668, "column": 0}, "map": {"version":3,"sources":["file:///home/shado/Workspace/Eatofy/src/app/lib/models/StaffAttendance.js"],"sourcesContent":["import mongoose from \"mongoose\";\nimport { AttendanceValidator } from \"../utils/SpecialStringsValidator\";\n\nexport const staffAttendanceSchema = new mongoose.Schema(\n  {\n    Date: {\n      type: String,\n      required: true,\n    },\n    Arrival: {\n      type: String,\n      default: \"09:00 AM\"\n    },\n    Departure: {\n      type: String,\n      default: \"05:00 PM\"\n    },\n    Type: {\n      type: String,\n      default: \"Absent\", // Default attendance status is \"Absent\"\n      validate: {\n        validator: (value) => AttendanceValidator(value)\n      },\n      message: \"Attendance must be one of:- 'Present', 'Absent', 'Half-Day'.\"\n    },\n    Note: {\n      type: String,\n      default: null\n    },\n    StaffId: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"Staffs\", // Reference to the Staff model\n      required: true,\n    },\n    HotelId: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"Hotels\", // Reference to the Hotels collection\n    },\n  },\n  {\n    timestamps: true, // Automatically manage `createdAt` and `updatedAt`\n  }\n);\n\n// Unique constraint on InvoiceId and ItemId\nstaffAttendanceSchema.index({ Date: 1, StaffId: 1 }, { unique: true });\n\nexport default mongoose.models.StaffAttendance || mongoose.model('StaffAttendance', staffAttendanceSchema);\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,MAAM,wBAAwB,IAAI,iGAAA,CAAA,UAAQ,CAAC,MAAM,CACtD;IACE,MAAM;QACJ,MAAM;QACN,UAAU;IACZ;IACA,SAAS;QACP,MAAM;QACN,SAAS;IACX;IACA,WAAW;QACT,MAAM;QACN,SAAS;IACX;IACA,MAAM;QACJ,MAAM;QACN,SAAS;QACT,UAAU;YACR,WAAW,CAAC,QAAU,CAAA,GAAA,kKAAA,CAAA,sBAAmB,AAAD,EAAE;QAC5C;QACA,SAAS;IACX;IACA,MAAM;QACJ,MAAM;QACN,SAAS;IACX;IACA,SAAS;QACP,MAAM,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,KAAK;QACL,UAAU;IACZ;IACA,SAAS;QACP,MAAM,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,KAAK;IACP;AACF,GACA;IACE,YAAY;AACd;AAGF,4CAA4C;AAC5C,sBAAsB,KAAK,CAAC;IAAE,MAAM;IAAG,SAAS;AAAE,GAAG;IAAE,QAAQ;AAAK;uCAErD,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,eAAe,IAAI,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,mBAAmB"}},
    {"offset": {"line": 2721, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2735, "column": 0}, "map": {"version":3,"sources":["file:///home/shado/Workspace/Eatofy/src/app/lib/models/Staffs.js"],"sourcesContent":["import mongoose from \"mongoose\";\nimport bcrypt from \"bcryptjs\";\nimport StringValidators from \"../utils/StringValidator\";\n\nexport const staffSchema = new mongoose.Schema(\n  {\n    FirstName: {\n      type: String,\n      required: true,\n      validate: {\n        validator: (value) => StringValidators(value)\n      },\n      message: \"First Name should not contain invalid characters like /, \\\\, \\\", ;, ', +, `, or ^\"\n    },\n    LastName: {\n      type: String,\n      required: true,\n      validate: {\n        validator: (value) => StringValidators(value)\n      },\n      message: \"Last Name should not contain invalid characters like /, \\\\, \\\", ;, ', +, `, or ^\"\n    },\n    Address: {\n      type: String,\n      required: true,\n      validate: {\n        validator: (value) => StringValidators(value)\n      },\n      message: \"Address should not contain invalid characters like /, \\\\, \\\", ;, ', +, `, or ^\"\n    },\n    Contact: {\n      type: String,\n      required: true,\n      validate: {\n        validator: (value) => StringValidators(value)\n      },\n      message: \"Contact should not contain invalid characters like /, \\\\, \\\", ;, ', +, `, or ^\"\n    },\n    Email: {\n      type: String,\n      unique: true,\n      required: true,\n      validate: {\n        validator: (value) => StringValidators(value)\n      },\n      message: \"Email should not contain invalid characters like /, \\\\, \\\", ;, ', +, `, or ^\"\n    },\n    Password: {\n      type: String,\n      required: true,\n      minlength: 6,\n    },\n    SaltPassword: {\n      type: String,\n      required: true,\n    },\n    DepartmentName: {\n      type: String,\n      required: true,\n      validate: {\n        validator: (value) => StringValidators(value)\n      },\n      message: \"Department Name should not contain invalid characters like /, \\\\, \\\", ;, ', +, `, or ^\"\n    },\n    Designation: {\n      type: String,\n      required: true,\n      validate: {\n        validator: (value) => StringValidators(value)\n      },\n      message: \"Designation should not contain invalid characters like /, \\\\, \\\", ;, ', +, `, or ^\"\n    },\n    Salary: {\n      type: Number,\n      default: 0.0\n    },\n    Incentive: {\n      type: Number,\n      default: 0.0\n    },\n    HotelId: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"Hotels\", // Reference to the Hotels collection\n    },\n    Role: {\n      type: String,\n      required: true,\n      enum: ['Owner', 'Backoffice', 'Waiter'],\n      default: 'Waiter',\n      validate: {\n        validator: (value) => {\n          return value === \"Owner\" || value === \"Backoffice\" || value === \"Waiter\"\n        }\n      },\n      message: \"Role should not contain invalid characters like /, \\\\, \\\", ;, ', +, `, or ^\"\n    },\n  },\n  {\n    timestamps: true, // Automatically manage `createdAt` and `updatedAt`\n  }\n);\n\n// Unique constraint on InvoiceId and ItemId\nstaffSchema.index({ Contact: 1, HotelId: 1 }, { unique: true });\nstaffSchema.index({ Email: 1, HotelId: 1 }, { unique: true });\n\n// Instance methods\nstaffSchema.methods = {\n  authenticate: async function(plainText) {\n    return await bcrypt.compare(plainText, this.Password);\n  }\n};\n\n// Pre-save hook to hash password\nstaffSchema.pre('save', async function(next) {\n  try {\n\n    if (this.isModified('Password')) {\n      const salt = await bcrypt.genSalt(10);\n      this.Password = await bcrypt.hash(this.Password, salt);\n      this.SaltPassword = salt\n    }\n    next();\n  } catch (error) {\n    console.error('Error in pre-save hook:', error);\n    next(error);\n  }\n});\n\n// Pre-delete middleware for single document\nstaffSchema.pre('deleteOne', { document: true }, async function(next) {\n  try {\n    const Bills = mongoose.model('Bills');\n\n    // Check for active bills\n    const activeBills = await Bills.find({\n      WaiterId: this._id,\n      Status: 'Open'\n    });\n\n    if (activeBills.length > 0) {\n      throw new Error('Cannot delete staff with active bills');\n    }\n\n    // Run cleanup operations in parallel\n    await Promise.all([\n      Bills.deleteMany({ WaiterId: this._id }),\n      mongoose.model('StaffAttendance').deleteMany({ StaffId: this._id })\n    ]);\n\n    next();\n  } catch (error) {\n    next(error);\n  }\n});\n\n// Pre-delete middleware for multiple documents\nstaffSchema.pre('deleteMany', async function(next) {\n  try {\n    const Staffs = mongoose.model('Staffs');\n    const Bills = mongoose.model('Bills');\n\n    // Get staff members to be deleted\n    const staffMembers = await Staffs.find(this.getFilter());\n\n    if (staffMembers.length > 0) {\n      const staffIds = staffMembers.map(staff => staff._id);\n\n      // Check for active bills\n      const activeBills = await Bills.find({\n        WaiterId: { $in: staffIds },\n        Status: 'Open'\n      });\n\n      if (activeBills.length > 0) {\n        throw new Error('Cannot delete staff members with active bills');\n      }\n\n      // Run cleanup operations in parallel\n      await Promise.all([\n        Bills.deleteMany({ WaiterId: { $in: staffIds } }),\n        mongoose.model('StaffAttendance').deleteMany({ StaffId: { $in: staffIds } })\n      ]);\n    }\n\n    next();\n  } catch (error) {\n    next(error);\n  }\n});\n\nexport default mongoose.models.Staffs || mongoose.model(\"Staffs\", staffSchema);\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 2943, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2949, "column": 0}, "map": {"version":3,"sources":["file:///home/shado/Workspace/Eatofy/src/app/lib/models/StockReport.js"],"sourcesContent":["import mongoose from \"mongoose\";\nimport { StockStatusValidator } from \"../utils/SpecialStringsValidator\";\nimport StringValidators from \"../utils/StringValidator\";\nimport FloatValidator from \"../utils/FloatValidator\";\n\nexport const StockReportSchema = new mongoose.Schema(\n  {\n    HotelId: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"Hotels\", // Reference to the `Hotels` collection\n      required: true,\n    },\n    ItemId: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"Items\", // Reference to the `Items` collection\n      required: true,\n    },\n    Quantity: {\n      type: Number,\n      required: true, // Quantity is mandatory\n      validate: {\n        validator: (value) => FloatValidator(value)\n      },\n      message: \"Quantity must be a non-negative number.\"\n    },\n    Unit: {\n      type: String, // KG, LTR, etc.\n      required: true,\n      validate: {\n        validator: (value) => StringValidators(value)\n      },\n      message: \"Unit should not contain invalid characters like /, \\\\, \\\", ;, ', +, `, or ^\"\n    },\n    Status: {\n      type: String,\n      default: \"Available\", // Default status is \"Available\"\n      validate: {\n        validator: (value) => StockStatusValidator(value)\n      },\n      message: \"Stock Status must be one of:- 'Available', 'Low Stock', 'Unavailable'.\"\n    },\n    Date: {\n      type: String, // Date of the stock report\n      required: true,\n    },\n  },\n  {\n    timestamps: true, // Automatically manage `createdAt` and `updatedAt`\n  }\n);\n\nexport default mongoose.models.StockReport \n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;;;;;AAEO,MAAM,oBAAoB,IAAI,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAClD;IACE,SAAS;QACP,MAAM,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,KAAK;QACL,UAAU;IACZ;IACA,QAAQ;QACN,MAAM,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,KAAK;QACL,UAAU;IACZ;IACA,UAAU;QACR,MAAM;QACN,UAAU;QACV,UAAU;YACR,WAAW,CAAC,QAAU,CAAA,GAAA,yJAAA,CAAA,UAAc,AAAD,EAAE;QACvC;QACA,SAAS;IACX;IACA,MAAM;QACJ,MAAM;QACN,UAAU;QACV,UAAU;YACR,WAAW,CAAC,QAAU,CAAA,GAAA,0JAAA,CAAA,UAAgB,AAAD,EAAE;QACzC;QACA,SAAS;IACX;IACA,QAAQ;QACN,MAAM;QACN,SAAS;QACT,UAAU;YACR,WAAW,CAAC,QAAU,CAAA,GAAA,kKAAA,CAAA,uBAAoB,AAAD,EAAE;QAC7C;QACA,SAAS;IACX;IACA,MAAM;QACJ,MAAM;QACN,UAAU;IACZ;AACF,GACA;IACE,YAAY;AACd;uCAGa,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,WAAW"}},
    {"offset": {"line": 3004, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3010, "column": 0}, "map": {"version":3,"sources":["file:///home/shado/Workspace/Eatofy/src/app/lib/utils/IntegerValidator.js"],"sourcesContent":["export default function IntegerValidator(value) {\n  return Number(value) === value && value % 1 === 0;\n}\n"],"names":[],"mappings":";;;AAAe,SAAS,iBAAiB,KAAK;IAC5C,OAAO,OAAO,WAAW,SAAS,QAAQ,MAAM;AAClD"}},
    {"offset": {"line": 3016, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3022, "column": 0}, "map": {"version":3,"sources":["file:///home/shado/Workspace/Eatofy/src/app/lib/models/Subscription.js"],"sourcesContent":["import mongoose from \"mongoose\";\nimport FloatValidator from \"../utils/FloatValidator\";\nimport IntegerValidator from \"../utils/IntegerValidator\";\nimport StringValidators from \"../utils/StringValidator\";\n\nexport const SubscriptionSchema = new mongoose.Schema(\n  {\n    SubscriptionName: {\n      type: String,\n      unique: true,\n      required: true,\n      validate: {\n        validator: (value) => StringValidators(value)\n      },\n      message: \"SubscriptionName should not contain invalid characters like /, \\\\, \\\", ;, ', +, `, or ^\"\n    },\n    Price: {\n      type: Number,\n      required: true,\n      validate: {\n        validator: (value) => FloatValidator(value)\n      },\n      message: \"Price must be a non-negative number and must be in decimal format(100.00).\"\n    },\n    Validity: {\n      type: Number,\n      required: true,\n      validate: {\n        validator: (value) => IntegerValidator(value)\n      },\n      message: \"Validity must be a non-negative number.\"\n    },\n  },\n  { timestamps: true }\n);\n\nexport default mongoose.models.Subscriptions \n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;;;;;AAEO,MAAM,qBAAqB,IAAI,iGAAA,CAAA,UAAQ,CAAC,MAAM,CACnD;IACE,kBAAkB;QAChB,MAAM;QACN,QAAQ;QACR,UAAU;QACV,UAAU;YACR,WAAW,CAAC,QAAU,CAAA,GAAA,0JAAA,CAAA,UAAgB,AAAD,EAAE;QACzC;QACA,SAAS;IACX;IACA,OAAO;QACL,MAAM;QACN,UAAU;QACV,UAAU;YACR,WAAW,CAAC,QAAU,CAAA,GAAA,yJAAA,CAAA,UAAc,AAAD,EAAE;QACvC;QACA,SAAS;IACX;IACA,UAAU;QACR,MAAM;QACN,UAAU;QACV,UAAU;YACR,WAAW,CAAC,QAAU,CAAA,GAAA,2JAAA,CAAA,UAAgB,AAAD,EAAE;QACzC;QACA,SAAS;IACX;AACF,GACA;IAAE,YAAY;AAAK;uCAGN,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,aAAa"}},
    {"offset": {"line": 3064, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3070, "column": 0}, "map": {"version":3,"sources":["file:///home/shado/Workspace/Eatofy/src/app/lib/models/Suppliers.js"],"sourcesContent":["import mongoose from \"mongoose\";\nimport StringValidators from \"../utils/StringValidator\";\n\nexport const supplierSchema = new mongoose.Schema(\n  {\n    SupplierName: {\n      type: String,\n      required: true, // SupplierName is mandatory\n      validate: {\n        validator: (value) => StringValidators(value)\n      },\n      message: \"Supplier Name should not contain invalid characters like /, \\\\, \\\", ;, ', +, `, or ^\"\n    },\n    SupplierType: {\n      type: String,\n      required: true, // SupplierType is mandatory\n      validate: {\n        validator: (value) => StringValidators(value)\n      },\n      message: \"Supplier Type should not contain invalid characters like /, \\\\, \\\", ;, ', +, `, or ^\"\n    },\n    Contact: {\n      type: String,\n      required: true, // Contact is mandatory\n      validate: {\n        validator: (value) => StringValidators(value)\n      },\n      message: \"Contact should not contain invalid characters like /, \\\\, \\\", ;, ', +, `, or ^ & must be of 10 characters.\"\n    },\n    Email: {\n      type: String,\n      default: null\n    },\n    GSTIN: {\n      type: String,\n      required: true, // GSTIN is mandatory\n      validate: {\n        validator: (value) => StringValidators(value)\n      },\n      message: \"GSTIN should not contain invalid characters like /, \\\\, \\\", ;, ', +, `, or ^\"\n\n    },\n    Address: {\n      type: String,\n      required: true, // Address is mandatory\n      validate: {\n        validator: (value) => StringValidators(value)\n      },\n      message: \"Address should not contain invalid characters like /, \\\\, \\\", ;, ', +, `, or ^\"\n\n    },\n    HotelId: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"Hotels\", // Reference to the `Hotels` collection\n      required: true, // Hotel reference is optional\n    },\n\n    // Child Relationship\n    StockInvoice: [\n      {\n        type: mongoose.Schema.Types.ObjectId,\n        ref: \"PurchasedInvoice\", // Reference to `PurchasedInvoice` collection\n      },\n    ],\n  },\n  {\n    timestamps: true, // Automatically manage `createdAt` and `updatedAt` fields\n  }\n);\n\n// Unique constraint on HotelId and Contact\nsupplierSchema.index({ HotelId: 1, Contact: 1 }, { unique: true });\n\n// Add pre-remove middleware\nsupplierSchema.pre('remove', async function(next) {\n  try {\n\n    // Check for and delete related menus\n    const PurchasedInvoice = mongoose.model('PurchasedInvoice');\n    await PurchasedInvoice.deleteMany({ SupplierId: this._id });\n\n    next();\n  } catch (error) {\n    next(error);\n  }\n});\n\n// Add pre-deleteMany middleware\nsupplierSchema.pre('deleteMany', async function(next) {\n  try {\n    // Get the sections that will be deleted\n    const Suppliers = mongoose.model('Suppliers');\n    const suppliers = await Suppliers.find(this.getFilter());\n    const supplierIds = suppliers.map(supplier => supplier._id);\n\n    if (supplierIds.length > 0) {\n      // Delete all related menus\n      const PurchasedInvoice = mongoose.model('PurchasedInvoice');\n      await PurchasedInvoice.deleteMany({ SupplierId: { $in: supplierIds } });\n    }\n\n    next();\n  } catch (error) {\n    next(error);\n  }\n});\nexport default mongoose.models.Suppliers \n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,MAAM,iBAAiB,IAAI,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAC/C;IACE,cAAc;QACZ,MAAM;QACN,UAAU;QACV,UAAU;YACR,WAAW,CAAC,QAAU,CAAA,GAAA,0JAAA,CAAA,UAAgB,AAAD,EAAE;QACzC;QACA,SAAS;IACX;IACA,cAAc;QACZ,MAAM;QACN,UAAU;QACV,UAAU;YACR,WAAW,CAAC,QAAU,CAAA,GAAA,0JAAA,CAAA,UAAgB,AAAD,EAAE;QACzC;QACA,SAAS;IACX;IACA,SAAS;QACP,MAAM;QACN,UAAU;QACV,UAAU;YACR,WAAW,CAAC,QAAU,CAAA,GAAA,0JAAA,CAAA,UAAgB,AAAD,EAAE;QACzC;QACA,SAAS;IACX;IACA,OAAO;QACL,MAAM;QACN,SAAS;IACX;IACA,OAAO;QACL,MAAM;QACN,UAAU;QACV,UAAU;YACR,WAAW,CAAC,QAAU,CAAA,GAAA,0JAAA,CAAA,UAAgB,AAAD,EAAE;QACzC;QACA,SAAS;IAEX;IACA,SAAS;QACP,MAAM;QACN,UAAU;QACV,UAAU;YACR,WAAW,CAAC,QAAU,CAAA,GAAA,0JAAA,CAAA,UAAgB,AAAD,EAAE;QACzC;QACA,SAAS;IAEX;IACA,SAAS;QACP,MAAM,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,KAAK;QACL,UAAU;IACZ;IAEA,qBAAqB;IACrB,cAAc;QACZ;YACE,MAAM,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;YACpC,KAAK;QACP;KACD;AACH,GACA;IACE,YAAY;AACd;AAGF,2CAA2C;AAC3C,eAAe,KAAK,CAAC;IAAE,SAAS;IAAG,SAAS;AAAE,GAAG;IAAE,QAAQ;AAAK;AAEhE,4BAA4B;AAC5B,eAAe,GAAG,CAAC,UAAU,eAAe,IAAI;IAC9C,IAAI;QAEF,qCAAqC;QACrC,MAAM,mBAAmB,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;QACxC,MAAM,iBAAiB,UAAU,CAAC;YAAE,YAAY,IAAI,CAAC,GAAG;QAAC;QAEzD;IACF,EAAE,OAAO,OAAO;QACd,KAAK;IACP;AACF;AAEA,gCAAgC;AAChC,eAAe,GAAG,CAAC,cAAc,eAAe,IAAI;IAClD,IAAI;QACF,wCAAwC;QACxC,MAAM,YAAY,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;QACjC,MAAM,YAAY,MAAM,UAAU,IAAI,CAAC,IAAI,CAAC,SAAS;QACrD,MAAM,cAAc,UAAU,GAAG,CAAC,CAAA,WAAY,SAAS,GAAG;QAE1D,IAAI,YAAY,MAAM,GAAG,GAAG;YAC1B,2BAA2B;YAC3B,MAAM,mBAAmB,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;YACxC,MAAM,iBAAiB,UAAU,CAAC;gBAAE,YAAY;oBAAE,KAAK;gBAAY;YAAE;QACvE;QAEA;IACF,EAAE,OAAO,OAAO;QACd,KAAK;IACP;AACF;uCACe,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,SAAS"}},
    {"offset": {"line": 3180, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3186, "column": 0}, "map": {"version":3,"sources":["file:///home/shado/Workspace/Eatofy/src/app/lib/models/Tables.js"],"sourcesContent":["import mongoose from \"mongoose\";\nimport StringValidators from \"../utils/StringValidator\";\nimport { TableStatusValidator } from \"../utils/SpecialStringsValidator\";\n\nexport const tableSchema = new mongoose.Schema(\n  {\n    TableName: {\n      type: String,\n      required: true,\n      validate: {\n        validator: (value) => StringValidators(value)\n      },\n      message: \"Table Name should not contain invalid characters like /, \\\\, \\\", ;, ', +, `, or ^\"\n    },\n    SectionId: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"Sections\", // Reference to the Sections collection\n      required: true,\n    },\n    HotelId: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"Hotels\", // Reference to the Hotels collection\n      required: true,\n    },\n    PersonsOccupiable: {\n      type: Number,\n      default: 4,\n    },\n    Status: {\n      type: String,\n      default: \"Open\",\n      validate: {\n        validator: (value) => TableStatusValidator(value)\n      },\n      message: \"Table Status must be one of:- 'Booked', 'Bill Pending', 'Open'.\"\n    },\n\n    // Child Relationship\n    Bills: [\n      {\n        type: mongoose.Schema.Types.ObjectId,\n        ref: \"Bills\", // Reference to the Bills collection\n      },\n    ],\n  },\n  { timestamps: true }\n);\n\n// Add pre-remove middleware\ntableSchema.pre('remove', async function(next) {\n  try {\n    // Check if table has any active bills\n    const Bills = mongoose.model('Bills');\n    const activeBills = await Bills.find({\n      TableId: this._id,\n      Status: 'Open'\n    });\n\n    if (activeBills.length > 0) {\n      throw new Error('Cannot delete table with active bills');\n    }\n\n    // Update completed bills to remove table reference\n    await Bills.deleteMany({ TableId: this._id, Status: 'Closed' });\n\n    next();\n  } catch (error) {\n    next(error);\n  }\n});\n\n// Add pre-deleteMany middleware\ntableSchema.pre('deleteMany', async function(next) {\n  try {\n    // Get the tables that will be deleted\n    const Tables = mongoose.model('Tables');\n    const tables = await Tables.find(this.getFilter());\n    const tableIds = tables.map(table => table._id);\n\n    // Check for active bills on any table\n    const Bills = mongoose.model('Bills');\n    const activeBills = await Bills.find({\n      TableId: { $in: tableIds },\n      Status: 'Open'\n    });\n\n    if (activeBills.length > 0) {\n      throw new Error('Cannot delete tables with active bills');\n    }\n\n    // Update completed bills to remove table references\n    await Bills.deleteMany({ TableId: { $in: tableIds } });\n\n    next();\n  } catch (error) {\n    next(error);\n  }\n});\n\nexport default mongoose.models.Tables || mongoose.model(\"Tables\", tableSchema);\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAEO,MAAM,cAAc,IAAI,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAC5C;IACE,WAAW;QACT,MAAM;QACN,UAAU;QACV,UAAU;YACR,WAAW,CAAC,QAAU,CAAA,GAAA,0JAAA,CAAA,UAAgB,AAAD,EAAE;QACzC;QACA,SAAS;IACX;IACA,WAAW;QACT,MAAM,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,KAAK;QACL,UAAU;IACZ;IACA,SAAS;QACP,MAAM,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,KAAK;QACL,UAAU;IACZ;IACA,mBAAmB;QACjB,MAAM;QACN,SAAS;IACX;IACA,QAAQ;QACN,MAAM;QACN,SAAS;QACT,UAAU;YACR,WAAW,CAAC,QAAU,CAAA,GAAA,kKAAA,CAAA,uBAAoB,AAAD,EAAE;QAC7C;QACA,SAAS;IACX;IAEA,qBAAqB;IACrB,OAAO;QACL;YACE,MAAM,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;YACpC,KAAK;QACP;KACD;AACH,GACA;IAAE,YAAY;AAAK;AAGrB,4BAA4B;AAC5B,YAAY,GAAG,CAAC,UAAU,eAAe,IAAI;IAC3C,IAAI;QACF,sCAAsC;QACtC,MAAM,QAAQ,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;QAC7B,MAAM,cAAc,MAAM,MAAM,IAAI,CAAC;YACnC,SAAS,IAAI,CAAC,GAAG;YACjB,QAAQ;QACV;QAEA,IAAI,YAAY,MAAM,GAAG,GAAG;YAC1B,MAAM,IAAI,MAAM;QAClB;QAEA,mDAAmD;QACnD,MAAM,MAAM,UAAU,CAAC;YAAE,SAAS,IAAI,CAAC,GAAG;YAAE,QAAQ;QAAS;QAE7D;IACF,EAAE,OAAO,OAAO;QACd,KAAK;IACP;AACF;AAEA,gCAAgC;AAChC,YAAY,GAAG,CAAC,cAAc,eAAe,IAAI;IAC/C,IAAI;QACF,sCAAsC;QACtC,MAAM,SAAS,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;QAC9B,MAAM,SAAS,MAAM,OAAO,IAAI,CAAC,IAAI,CAAC,SAAS;QAC/C,MAAM,WAAW,OAAO,GAAG,CAAC,CAAA,QAAS,MAAM,GAAG;QAE9C,sCAAsC;QACtC,MAAM,QAAQ,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;QAC7B,MAAM,cAAc,MAAM,MAAM,IAAI,CAAC;YACnC,SAAS;gBAAE,KAAK;YAAS;YACzB,QAAQ;QACV;QAEA,IAAI,YAAY,MAAM,GAAG,GAAG;YAC1B,MAAM,IAAI,MAAM;QAClB;QAEA,oDAAoD;QACpD,MAAM,MAAM,UAAU,CAAC;YAAE,SAAS;gBAAE,KAAK;YAAS;QAAE;QAEpD;IACF,EAAE,OAAO,OAAO;QACd,KAAK;IACP;AACF;uCAEe,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,MAAM,IAAI,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,UAAU"}},
    {"offset": {"line": 3289, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3295, "column": 0}, "map": {"version":3,"sources":["file:///home/shado/Workspace/Eatofy/src/app/lib/models/VatSettings.js"],"sourcesContent":["import mongoose from \"mongoose\";\nimport BooleanValidator from \"../utils/BooleanValidator\";\n\nexport const vatSettingsSchema = new mongoose.Schema(\n  {\n    Visibility: {\n      type: Boolean,\n      default: false, // Determines whether VAT is enabled\n      validate: {\n        validator: (value) => BooleanValidator(value)\n      },\n      message: \"Visibility should be either true or false\"\n    },\n    VATPercent: {\n      type: Number,\n      default: 0.0, // Percentage value of VAT\n    },\n    HotelId: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"Hotels\", // Reference to the Hotels model\n      required: true,\n      unique: true\n    },\n  },\n  {\n    timestamps: true, // Automatically manage createdAt and updatedAt fields\n  }\n);\n\n// Add pre-remove middleware\nvatSettingsSchema.pre('remove', async function(next) {\n  try {\n    // Update all bills to remove VAT references\n    const Bills = mongoose.model('Bills');\n    await Bills.updateMany(\n      { HotelId: this.HotelId },\n      { \n        $set: { \n          VatRate: '0 %',\n          VatAmount: 0\n        } \n      }\n    );\n    \n    next();\n  } catch (error) {\n    next(error);\n  }\n});\n\n// Add pre-deleteMany middleware\nvatSettingsSchema.pre('deleteMany', async function(next) {\n  try {\n    // Get the settings that will be deleted\n    const VatSettings = mongoose.model('VatSettings');\n    const settings = await VatSettings.find(this.getFilter());\n    const hotelIds = settings.map(setting => setting.HotelId);\n\n    if (hotelIds.length > 0) {\n      // Update all bills to remove VAT references\n      const Bills = mongoose.model('Bills');\n      await Bills.updateMany(\n        { HotelId: { $in: hotelIds } },\n        { \n          $set: { \n            VatRate: '0 %',\n            VatAmount: 0\n          } \n        }\n      );\n    }\n    \n    next();\n  } catch (error) {\n    next(error);\n  }\n});\n\nexport default mongoose.models.VatSettings || mongoose.model(\"VatSettings\", vatSettingsSchema);\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,MAAM,oBAAoB,IAAI,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAClD;IACE,YAAY;QACV,MAAM;QACN,SAAS;QACT,UAAU;YACR,WAAW,CAAC,QAAU,CAAA,GAAA,2JAAA,CAAA,UAAgB,AAAD,EAAE;QACzC;QACA,SAAS;IACX;IACA,YAAY;QACV,MAAM;QACN,SAAS;IACX;IACA,SAAS;QACP,MAAM,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,KAAK;QACL,UAAU;QACV,QAAQ;IACV;AACF,GACA;IACE,YAAY;AACd;AAGF,4BAA4B;AAC5B,kBAAkB,GAAG,CAAC,UAAU,eAAe,IAAI;IACjD,IAAI;QACF,4CAA4C;QAC5C,MAAM,QAAQ,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;QAC7B,MAAM,MAAM,UAAU,CACpB;YAAE,SAAS,IAAI,CAAC,OAAO;QAAC,GACxB;YACE,MAAM;gBACJ,SAAS;gBACT,WAAW;YACb;QACF;QAGF;IACF,EAAE,OAAO,OAAO;QACd,KAAK;IACP;AACF;AAEA,gCAAgC;AAChC,kBAAkB,GAAG,CAAC,cAAc,eAAe,IAAI;IACrD,IAAI;QACF,wCAAwC;QACxC,MAAM,cAAc,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;QACnC,MAAM,WAAW,MAAM,YAAY,IAAI,CAAC,IAAI,CAAC,SAAS;QACtD,MAAM,WAAW,SAAS,GAAG,CAAC,CAAA,UAAW,QAAQ,OAAO;QAExD,IAAI,SAAS,MAAM,GAAG,GAAG;YACvB,4CAA4C;YAC5C,MAAM,QAAQ,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;YAC7B,MAAM,MAAM,UAAU,CACpB;gBAAE,SAAS;oBAAE,KAAK;gBAAS;YAAE,GAC7B;gBACE,MAAM;oBACJ,SAAS;oBACT,WAAW;gBACb;YACF;QAEJ;QAEA;IACF,EAAE,OAAO,OAAO;QACd,KAAK;IACP;AACF;uCAEe,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,WAAW,IAAI,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,eAAe"}},
    {"offset": {"line": 3370, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3376, "column": 0}, "map": {"version":3,"sources":["file:///home/shado/Workspace/Eatofy/src/app/lib/models/EatofyStaff.js"],"sourcesContent":["import mongoose from \"mongoose\";\nimport StringValidators from \"../utils/StringValidator\";\nimport bcrypt from \"bcryptjs\";\n\nconst RoleEnums = [\"Administration\", \"Management\", \"Sales\"]\n\nexport const EatofyStaffSchema = new mongoose.Schema(\n  {\n    FirstName: {\n      type: String,\n      required: true,\n      validate: {\n        validator: (value) => StringValidators(value),\n        message: \"First Name should not contain invalid characters like /, \\\\, \\\", ;, ', +, `, or ^\"\n      }\n    },\n    LastName: {\n      type: String,\n      required: true,\n      validate: {\n        validator: (value) => StringValidators(value),\n        message: \"Last Name should not contain invalid characters like /, \\\\, \\\", ;, ', +, `, or ^\"\n      }\n    },\n    Email: {\n      type: String,\n      unique: true,\n      required: true,\n      validate: {\n        validator: (value) => StringValidators(value),\n        message: \"Email should not contain invalid characters like /, \\\\, \\\", ;, ', +, `, or ^\"\n      }\n    },\n    Password: {\n      type: String,\n      required: true,\n      minlength: 6,\n    },\n    Role: {\n      type: String,\n      default: 'Administration',\n      enum: {\n        values: RoleEnums,\n        message: \"Role must be one of: \" + RoleEnums.join(\", \")\n      },\n      required: true\n    },\n    isActive: {\n      type: Boolean,\n      default: true\n    },\n    lastLogin: {\n      type: Date,\n      default: null\n    }\n  },\n  { timestamps: true }\n);\n\n// Instance methods\nEatofyStaffSchema.methods = {\n  authenticate: async function(plainText) {\n    return await bcrypt.compare(plainText, this.Password);\n  }\n};\n\n// Pre-save hook to hash password\nEatofyStaffSchema.pre('save', async function(next) {\n  try {\n    if (this.isModified('Password')) {\n      const salt = await bcrypt.genSalt(10);\n      this.Password = await bcrypt.hash(this.Password, salt);\n    }\n    next();\n  } catch (error) {\n    console.error('Error in pre-save hook:', error);\n    next(error);\n  }\n});\n\nexport default mongoose.models.EatofyStaff || mongoose.model('EatofyStaff', EatofyStaffSchema);\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAEA,MAAM,YAAY;IAAC;IAAkB;IAAc;CAAQ;AAEpD,MAAM,oBAAoB,IAAI,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAClD;IACE,WAAW;QACT,MAAM;QACN,UAAU;QACV,UAAU;YACR,WAAW,CAAC,QAAU,CAAA,GAAA,0JAAA,CAAA,UAAgB,AAAD,EAAE;YACvC,SAAS;QACX;IACF;IACA,UAAU;QACR,MAAM;QACN,UAAU;QACV,UAAU;YACR,WAAW,CAAC,QAAU,CAAA,GAAA,0JAAA,CAAA,UAAgB,AAAD,EAAE;YACvC,SAAS;QACX;IACF;IACA,OAAO;QACL,MAAM;QACN,QAAQ;QACR,UAAU;QACV,UAAU;YACR,WAAW,CAAC,QAAU,CAAA,GAAA,0JAAA,CAAA,UAAgB,AAAD,EAAE;YACvC,SAAS;QACX;IACF;IACA,UAAU;QACR,MAAM;QACN,UAAU;QACV,WAAW;IACb;IACA,MAAM;QACJ,MAAM;QACN,SAAS;QACT,MAAM;YACJ,QAAQ;YACR,SAAS,0BAA0B,UAAU,IAAI,CAAC;QACpD;QACA,UAAU;IACZ;IACA,UAAU;QACR,MAAM;QACN,SAAS;IACX;IACA,WAAW;QACT,MAAM;QACN,SAAS;IACX;AACF,GACA;IAAE,YAAY;AAAK;AAGrB,mBAAmB;AACnB,kBAAkB,OAAO,GAAG;IAC1B,cAAc,eAAe,SAAS;QACpC,OAAO,MAAM,8IAAA,CAAA,UAAM,CAAC,OAAO,CAAC,WAAW,IAAI,CAAC,QAAQ;IACtD;AACF;AAEA,iCAAiC;AACjC,kBAAkB,GAAG,CAAC,QAAQ,eAAe,IAAI;IAC/C,IAAI;QACF,IAAI,IAAI,CAAC,UAAU,CAAC,aAAa;YAC/B,MAAM,OAAO,MAAM,8IAAA,CAAA,UAAM,CAAC,OAAO,CAAC;YAClC,IAAI,CAAC,QAAQ,GAAG,MAAM,8IAAA,CAAA,UAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;QACnD;QACA;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;QACzC,KAAK;IACP;AACF;uCAEe,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,WAAW,IAAI,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,eAAe"}},
    {"offset": {"line": 3462, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3468, "column": 0}, "map": {"version":3,"sources":["file:///home/shado/Workspace/Eatofy/src/instrumentation.js"],"sourcesContent":["import connect from '@/app/lib/db'\nimport mongoose from 'mongoose';\nimport { billsSchema } from './app/lib/models/Bills';\nimport { cashDrawerSchema } from './app/lib/models/CashDrawer';\nimport { customerSchema } from './app/lib/models/Customers';\nimport { dishesSchema } from './app/lib/models/Dishes';\nimport { eatocoinsSettingsSchema } from './app/lib/models/EatoCoinsSettings';\nimport { ebillEmailSettingsSchema } from './app/lib/models/EbillEmailSettings';\nimport { expensesSchema } from './app/lib/models/Expenses';\nimport { gstSettingsSchema } from './app/lib/models/GstSettings';\nimport { HotelSubscriptionSchema } from './app/lib/models/HotelSubscription';\nimport { HotelSchema } from './app/lib/models/Hotels';\nimport { inventoryStockSchema } from './app/lib/models/InventoryStock';\nimport { invoicePrinterSettingsSchema } from './app/lib/models/InvoicePrinterSettings';\nimport { itemCategorySchema } from './app/lib/models/ItemCategories';\nimport { itemSchema } from './app/lib/models/Items';\nimport { kotPrinterSettingsSchema } from './app/lib/models/KotPrinterSettings';\nimport { menuCategorySchema } from './app/lib/models/MenuCategory';\nimport { menusSchema } from './app/lib/models/Menus';\nimport { notificationSchema } from './app/lib/models/Notifications';\nimport { ordersSchema } from './app/lib/models/Orders';\nimport { purchasedInvoiceSchema } from './app/lib/models/PurchasedInvoice';\nimport { purchasedStockSchema } from './app/lib/models/PurchasedStock';\nimport { ReservationSchema } from './app/lib/models/Reservation';\nimport { SectionsSchema } from './app/lib/models/Sections';\nimport { staffAttendanceSchema } from './app/lib/models/StaffAttendance';\nimport { staffSchema } from './app/lib/models/Staffs';\nimport { StockReportSchema } from './app/lib/models/StockReport';\nimport { SubscriptionSchema } from './app/lib/models/Subscription';\nimport { supplierSchema } from './app/lib/models/Suppliers';\nimport { tableSchema } from './app/lib/models/Tables';\nimport { vatSettingsSchema } from './app/lib/models/VatSettings';\nimport { EatofyStaffSchema } from './app/lib/models/EatofyStaff';\n\nexport async function register() {\n  try {\n    await connect();\n    await initializeModels();\n    console.log(\"✅ Database connected and models initialized successfully\");\n  } catch (error) {\n    console.error(\"❌ Error initializing database:\", error);\n  }\n}\n\nasync function initializeModels() {\n  const modelDefinitions = [\n    { name: 'EatofyStaff', schema: EatofyStaffSchema },\n    { name: 'Hotels', schema: HotelSchema },\n    { name: 'Subscriptions', schema: SubscriptionSchema },\n    { name: 'HotelSubscription', schema: HotelSubscriptionSchema },\n    { name: 'Sections', schema: SectionsSchema },\n    { name: 'Tables', schema: tableSchema },\n    { name: 'Reservations', schema: ReservationSchema },\n    { name: 'MenuCategory', schema: menuCategorySchema },\n    { name: 'Dishes', schema: dishesSchema },\n    { name: 'Menus', schema: menusSchema },\n    { name: 'Suppliers', schema: supplierSchema },\n    { name: 'ItemCategory', schema: itemCategorySchema },\n    { name: 'Items', schema: itemSchema },\n    { name: 'PurchasedInvoice', schema: purchasedInvoiceSchema },\n    { name: 'PurchasedStock', schema: purchasedStockSchema },\n    { name: 'InventoryStock', schema: inventoryStockSchema },\n    { name: 'StockReport', schema: StockReportSchema },\n    { name: 'Staffs', schema: staffSchema },\n    { name: 'StaffAttendance', schema: staffAttendanceSchema },\n    { name: 'Customers', schema: customerSchema },\n    { name: 'Orders', schema: ordersSchema },\n    { name: 'Bills', schema: billsSchema },\n    { name: 'Expenses', schema: expensesSchema },\n    { name: 'GstSettings', schema: gstSettingsSchema },\n    { name: 'VatSettings', schema: vatSettingsSchema },\n    { name: 'EatoCoinsSettings', schema: eatocoinsSettingsSchema },\n    { name: 'KotPrinterSettings', schema: kotPrinterSettingsSchema },\n    { name: 'InvoicePrinterSettings', schema: invoicePrinterSettingsSchema },\n    { name: 'EbillEmailSettings', schema: ebillEmailSettingsSchema },\n    { name: 'Notifications', schema: notificationSchema },\n    { name: 'CashDrawer', schema: cashDrawerSchema }\n  ];\n\n  for (const { name, schema } of modelDefinitions) {\n    try {\n      // Check if model exists, if not create it\n      mongoose.models[name] || mongoose.model(name, schema);\n\n      // For Eatofy Staff, ensure at least one admin exists\n      if (name === 'EatofyStaff') {\n        const EatofyStaff = mongoose.model(name);\n        const adminExists = await EatofyStaff.exists({});\n\n        if (!adminExists) {\n          await EatofyStaff.create({\n            FirstName: 'Super',\n            LastName: 'Admin',\n            Email: 'admin@eatofy.com',\n            Password: 'admin123', // Will be hashed by pre-save hook\n            Role: 'Administration'\n          });\n          console.log(`✅ Created default root admin: admin@eatofy.com`);\n        }\n      }\n\n      console.log(`✅ Model initialized: ${name}`);\n    } catch (error) {\n      console.error(`❌ Error initializing model ${name}:`, error);\n    }\n  }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 3698, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}