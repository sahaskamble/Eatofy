{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 47, "column": 0}, "map": {"version":3,"sources":["file:///home/batman/Workspace/Eatofy/src/app/lib/crud/BaseCrud.js"],"sourcesContent":["export class BaseCrud {\n  constructor(model) {\n    this.model = model;\n  }\n\n  // Create a new document\n  async create(data) {\n    try {\n      const doc = new this.model(data);\n      await doc.save();\n      return {\n        returncode: 200,\n        message: \"Data Created Successfully\",\n        output: doc\n      };\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      };\n    }\n  }\n\n  // Read all documents with optional filters\n  async readMany(filters = {}, options = {}) {\n    try {\n      const {\n        sort = {},\n        populate = [],\n        select = '',\n        skip = 0,\n        limit = 0,\n        lean = false\n      } = options;\n\n      let query = this.model.find(filters);\n\n      // Apply population\n      if (populate.length > 0) {\n        query = query.populate(populate);\n      }\n\n      // Apply sorting\n      if (Object.keys(sort).length > 0) {\n        query = query.sort(sort);\n      }\n\n      // Apply selection\n      if (select) {\n        query = query.select(select);\n      }\n\n      // Apply pagination\n      if (skip > 0) {\n        query = query.skip(skip);\n      }\n      if (limit > 0) {\n        query = query.limit(limit);\n      }\n\n      // Execute query\n      const docs = lean ? await query.lean() : await query.exec();\n\n      return {\n        returncode: 200,\n        message: \"Data Fetched Successfully\",\n        output: docs\n      };\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      };\n    }\n  }\n\n  // Read a single document\n  async readOne(filters = {}, options = {}) {\n    try {\n      const { populate = [], select = '', lean = false } = options;\n\n      let query = this.model.findOne(filters);\n\n      // Apply population\n      if (populate.length > 0) {\n        query = query.populate(populate);\n      }\n\n      // Apply selection\n      if (select) {\n        query = query.select(select);\n      }\n\n      // Execute query\n      const doc = lean ? await query.lean() : await query.exec();\n\n      if (!doc) {\n        return {\n          returncode: 404,\n          message: \"Document Not Found\",\n          output: []\n        };\n      }\n\n      return {\n        returncode: 200,\n        message: \"Data Fetched Successfully\",\n        output: doc\n      };\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      };\n    }\n  }\n\n  // Update a document\n  async update(filters = {}, data = {}, options = { new: true }) {\n    try {\n      const doc = await this.model.findOneAndUpdate(filters, data, options);\n\n      if (!doc) {\n        return {\n          returncode: 404,\n          message: \"Document Not Found\",\n          output: []\n        };\n      }\n\n      return {\n        returncode: 200,\n        message: \"Data Updated Successfully\",\n        output: doc\n      };\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      };\n    }\n  }\n\n  // Delete a document\n  async delete(filters = {}) {\n    try {\n      console.log('BaseCrud.delete called with:', {\n        model: this.model.modelName,\n        filters\n      });\n\n      const doc = await this.model.deleteMany(filters);\n      console.log('BaseCrud.delete result:', doc);\n\n      if (!doc || doc.deletedCount === 0) {\n        console.log('BaseCrud.delete - No documents found');\n        return {\n          returncode: 404,\n          message: \"Document Not Found\",\n          output: []\n        };\n      }\n\n      return {\n        returncode: 200,\n        message: \"Data Deleted Successfully\",\n        output: doc\n      };\n    } catch (error) {\n      console.error('Error in BaseCrud.delete:', error);\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      };\n    }\n  }\n\n  // Check if document exists\n  async exists(filters = {}) {\n    try {\n      const exists = await this.model.exists(filters);\n      return {\n        returncode: 200,\n        message: exists ? \"Document Exists\" : \"Document Not Found\",\n        output: !!exists\n      };\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: false\n      };\n    }\n  }\n\n  // Count documents\n  async count(filters = {}) {\n    try {\n      const count = await this.model.countDocuments(filters);\n      return {\n        returncode: 200,\n        message: \"Count Retrieved Successfully\",\n        output: count\n      };\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: 0\n      };\n    }\n  }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 238, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 252, "column": 0}, "map": {"version":3,"sources":["file:///home/batman/Workspace/Eatofy/src/app/lib/utils/StringValidator.js"],"sourcesContent":["export default function StringValidators(value) {\n  // Ensure the input is a string\n  if (typeof value !== \"string\") {\n    return false;\n  }\n\n  if (value === null) {\n    return true;\n  }\n\n  // List of forbidden characters\n  const charList = ['/', '\\\\', '\"', ';', \"'\", '+', '`', '^'];\n  let validationFlag = true;\n\n  // Iterate over each character in the list\n  for (let char of charList) {\n\n    // Check if the forbidden character is present in the string\n    if (value.includes(char)) {\n      validationFlag = false;\n      break; // Stop checking further once an invalid character is found\n    }\n  }\n\n  return validationFlag;\n}\n"],"names":[],"mappings":";;;AAAe,SAAS,iBAAiB,KAAK;IAC5C,+BAA+B;IAC/B,IAAI,OAAO,UAAU,UAAU;QAC7B,OAAO;IACT;IAEA,IAAI,UAAU,MAAM;QAClB,OAAO;IACT;IAEA,+BAA+B;IAC/B,MAAM,WAAW;QAAC;QAAK;QAAM;QAAK;QAAK;QAAK;QAAK;QAAK;KAAI;IAC1D,IAAI,iBAAiB;IAErB,0CAA0C;IAC1C,KAAK,IAAI,QAAQ,SAAU;QAEzB,4DAA4D;QAC5D,IAAI,MAAM,QAAQ,CAAC,OAAO;YACxB,iBAAiB;YACjB,OAAO,2DAA2D;QACpE;IACF;IAEA,OAAO;AACT"}},
    {"offset": {"line": 285, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 291, "column": 0}, "map": {"version":3,"sources":["file:///home/batman/Workspace/Eatofy/src/app/lib/utils/SpecialStringsValidator.js"],"sourcesContent":["export function SubscriptionStatusValidator(value) {\n\n  let validation_flag = false;\n  var list = [\"Waiting\", \"On Going\", \"Expired\", \"About to Expire\"];\n\n  list.map((item) => {\n    if (value === item) {\n      validation_flag = true;\n    }\n  });\n\n  return validation_flag;\n}\n\nexport function PaymentStatusValidator(value) {\n\n  let validation_flag = false;\n  var list = [\"Paid\", \"Unpaid\", \"Part-Paid\"];\n\n  list.map((item) => {\n    if (value === item) {\n      validation_flag = true;\n    }\n  });\n\n  return validation_flag;\n}\n\nexport function PaymentModeValidator(value) {\n\n  let validation_flag = false;\n  var list = [\"Cash\", \"UPI\", \"Credit-Card\", \"Due\", \"Part\"];\n\n  list.map((item) => {\n    if (value === item) {\n      validation_flag = true;\n    }\n  });\n\n  return validation_flag;\n}\n\nexport function OrderTypeValidator(value) {\n\n  let validation_flag = false;\n  var list = [\"Takeaway\", \"Delivery\", \"Dine-In\", \"Swiggy\", \"Zomato\", \"QR-Orders\"];\n\n  list.map((item) => {\n    if (value === item) {\n      validation_flag = true;\n    }\n  });\n\n  return validation_flag;\n}\n\nexport function TableStatusValidator(value) {\n\n  let validation_flag = false;\n  var list = [\"Booked\", \"Bill Pending\", \"Open\"];\n\n  list.map((item) => {\n    if (value === item) {\n      validation_flag = true;\n    }\n  });\n\n  return validation_flag;\n}\n\nexport function StockStatusValidator(value) {\n\n  let validation_flag = false;\n  var list = [\"Available\", \"Low Stock\", \"Unavailable\"];\n\n  list.map((item) => {\n    if (value === item) {\n      validation_flag = true;\n    }\n  });\n\n  return validation_flag;\n}\n\nexport function AttendanceValidator(value) {\n\n  let validation_flag = false;\n  var list = [\"Absent\", \"Present\", \"Half-Day\"];\n\n  list.map((item) => {\n    if (value === item) {\n      validation_flag = true;\n    }\n  });\n\n  return validation_flag;\n}\n\nexport function ExpenseCategoryValidator(value) {\n\n  let validation_flag = false;\n  var list = [\"Salary\", \"Purchases\", \"Miscellaneous\"];\n\n  list.map((item) => {\n    if (value === item) {\n      validation_flag = true;\n    }\n  });\n\n  return validation_flag;\n}\n"],"names":[],"mappings":";;;;;;;;;;AAAO,SAAS,4BAA4B,KAAK;IAE/C,IAAI,kBAAkB;IACtB,IAAI,OAAO;QAAC;QAAW;QAAY;QAAW;KAAkB;IAEhE,KAAK,GAAG,CAAC,CAAC;QACR,IAAI,UAAU,MAAM;YAClB,kBAAkB;QACpB;IACF;IAEA,OAAO;AACT;AAEO,SAAS,uBAAuB,KAAK;IAE1C,IAAI,kBAAkB;IACtB,IAAI,OAAO;QAAC;QAAQ;QAAU;KAAY;IAE1C,KAAK,GAAG,CAAC,CAAC;QACR,IAAI,UAAU,MAAM;YAClB,kBAAkB;QACpB;IACF;IAEA,OAAO;AACT;AAEO,SAAS,qBAAqB,KAAK;IAExC,IAAI,kBAAkB;IACtB,IAAI,OAAO;QAAC;QAAQ;QAAO;QAAe;QAAO;KAAO;IAExD,KAAK,GAAG,CAAC,CAAC;QACR,IAAI,UAAU,MAAM;YAClB,kBAAkB;QACpB;IACF;IAEA,OAAO;AACT;AAEO,SAAS,mBAAmB,KAAK;IAEtC,IAAI,kBAAkB;IACtB,IAAI,OAAO;QAAC;QAAY;QAAY;QAAW;QAAU;QAAU;KAAY;IAE/E,KAAK,GAAG,CAAC,CAAC;QACR,IAAI,UAAU,MAAM;YAClB,kBAAkB;QACpB;IACF;IAEA,OAAO;AACT;AAEO,SAAS,qBAAqB,KAAK;IAExC,IAAI,kBAAkB;IACtB,IAAI,OAAO;QAAC;QAAU;QAAgB;KAAO;IAE7C,KAAK,GAAG,CAAC,CAAC;QACR,IAAI,UAAU,MAAM;YAClB,kBAAkB;QACpB;IACF;IAEA,OAAO;AACT;AAEO,SAAS,qBAAqB,KAAK;IAExC,IAAI,kBAAkB;IACtB,IAAI,OAAO;QAAC;QAAa;QAAa;KAAc;IAEpD,KAAK,GAAG,CAAC,CAAC;QACR,IAAI,UAAU,MAAM;YAClB,kBAAkB;QACpB;IACF;IAEA,OAAO;AACT;AAEO,SAAS,oBAAoB,KAAK;IAEvC,IAAI,kBAAkB;IACtB,IAAI,OAAO;QAAC;QAAU;QAAW;KAAW;IAE5C,KAAK,GAAG,CAAC,CAAC;QACR,IAAI,UAAU,MAAM;YAClB,kBAAkB;QACpB;IACF;IAEA,OAAO;AACT;AAEO,SAAS,yBAAyB,KAAK;IAE5C,IAAI,kBAAkB;IACtB,IAAI,OAAO;QAAC;QAAU;QAAa;KAAgB;IAEnD,KAAK,GAAG,CAAC,CAAC;QACR,IAAI,UAAU,MAAM;YAClB,kBAAkB;QACpB;IACF;IAEA,OAAO;AACT"}},
    {"offset": {"line": 419, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 425, "column": 0}, "map": {"version":3,"sources":["file:///home/batman/Workspace/Eatofy/src/app/lib/models/Tables.js"],"sourcesContent":["import mongoose from \"mongoose\";\nimport StringValidators from \"../utils/StringValidator\";\nimport { TableStatusValidator } from \"../utils/SpecialStringsValidator\";\n\nexport const tableSchema = new mongoose.Schema(\n  {\n    TableName: {\n      type: String,\n      required: true,\n      validate: {\n        validator: (value) => StringValidators(value)\n      },\n      message: \"Table Name should not contain invalid characters like /, \\\\, \\\", ;, ', +, `, or ^\"\n    },\n    SectionId: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"Sections\", // Reference to the Sections collection\n      required: true,\n    },\n    HotelId: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"Hotels\", // Reference to the Hotels collection\n      required: true,\n    },\n    PersonsOccupiable: {\n      type: Number,\n      default: 4,\n    },\n    Status: {\n      type: String,\n      default: \"Open\",\n      validate: {\n        validator: (value) => TableStatusValidator(value)\n      },\n      message: \"Table Status must be one of:- 'Booked', 'Bill Pending', 'Open'.\"\n    },\n\n    // Child Relationship\n    Bills: [\n      {\n        type: mongoose.Schema.Types.ObjectId,\n        ref: \"Bills\", // Reference to the Bills collection\n      },\n    ],\n  },\n  { timestamps: true }\n);\n\n// Add pre-remove middleware\ntableSchema.pre('remove', async function(next) {\n  try {\n    // Check if table has any active bills\n    const Bills = mongoose.model('Bills');\n    const activeBills = await Bills.find({\n      TableId: this._id,\n      Status: 'Open'\n    });\n\n    if (activeBills.length > 0) {\n      throw new Error('Cannot delete table with active bills');\n    }\n\n    // Update completed bills to remove table reference\n    await Bills.deleteMany({ TableId: this._id, Status: 'Closed' });\n\n    next();\n  } catch (error) {\n    next(error);\n  }\n});\n\n// Add pre-deleteMany middleware\ntableSchema.pre('deleteMany', async function(next) {\n  try {\n    // Get the tables that will be deleted\n    const Tables = mongoose.model('Tables');\n    const tables = await Tables.find(this.getFilter());\n    const tableIds = tables.map(table => table._id);\n\n    // Check for active bills on any table\n    const Bills = mongoose.model('Bills');\n    const activeBills = await Bills.find({\n      TableId: { $in: tableIds },\n      Status: 'Open'\n    });\n\n    if (activeBills.length > 0) {\n      throw new Error('Cannot delete tables with active bills');\n    }\n\n    // Update completed bills to remove table references\n    await Bills.deleteMany({ TableId: { $in: tableIds } });\n\n    next();\n  } catch (error) {\n    next(error);\n  }\n});\n\nexport default mongoose.models.Tables || mongoose.model(\"Tables\", tableSchema);\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAEO,MAAM,cAAc,IAAI,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAC5C;IACE,WAAW;QACT,MAAM;QACN,UAAU;QACV,UAAU;YACR,WAAW,CAAC,QAAU,CAAA,GAAA,+IAAA,CAAA,UAAgB,AAAD,EAAE;QACzC;QACA,SAAS;IACX;IACA,WAAW;QACT,MAAM,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,KAAK;QACL,UAAU;IACZ;IACA,SAAS;QACP,MAAM,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,KAAK;QACL,UAAU;IACZ;IACA,mBAAmB;QACjB,MAAM;QACN,SAAS;IACX;IACA,QAAQ;QACN,MAAM;QACN,SAAS;QACT,UAAU;YACR,WAAW,CAAC,QAAU,CAAA,GAAA,uJAAA,CAAA,uBAAoB,AAAD,EAAE;QAC7C;QACA,SAAS;IACX;IAEA,qBAAqB;IACrB,OAAO;QACL;YACE,MAAM,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;YACpC,KAAK;QACP;KACD;AACH,GACA;IAAE,YAAY;AAAK;AAGrB,4BAA4B;AAC5B,YAAY,GAAG,CAAC,UAAU,eAAe,IAAI;IAC3C,IAAI;QACF,sCAAsC;QACtC,MAAM,QAAQ,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;QAC7B,MAAM,cAAc,MAAM,MAAM,IAAI,CAAC;YACnC,SAAS,IAAI,CAAC,GAAG;YACjB,QAAQ;QACV;QAEA,IAAI,YAAY,MAAM,GAAG,GAAG;YAC1B,MAAM,IAAI,MAAM;QAClB;QAEA,mDAAmD;QACnD,MAAM,MAAM,UAAU,CAAC;YAAE,SAAS,IAAI,CAAC,GAAG;YAAE,QAAQ;QAAS;QAE7D;IACF,EAAE,OAAO,OAAO;QACd,KAAK;IACP;AACF;AAEA,gCAAgC;AAChC,YAAY,GAAG,CAAC,cAAc,eAAe,IAAI;IAC/C,IAAI;QACF,sCAAsC;QACtC,MAAM,SAAS,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;QAC9B,MAAM,SAAS,MAAM,OAAO,IAAI,CAAC,IAAI,CAAC,SAAS;QAC/C,MAAM,WAAW,OAAO,GAAG,CAAC,CAAA,QAAS,MAAM,GAAG;QAE9C,sCAAsC;QACtC,MAAM,QAAQ,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC;QAC7B,MAAM,cAAc,MAAM,MAAM,IAAI,CAAC;YACnC,SAAS;gBAAE,KAAK;YAAS;YACzB,QAAQ;QACV;QAEA,IAAI,YAAY,MAAM,GAAG,GAAG;YAC1B,MAAM,IAAI,MAAM;QAClB;QAEA,oDAAoD;QACpD,MAAM,MAAM,UAAU,CAAC;YAAE,SAAS;gBAAE,KAAK;YAAS;QAAE;QAEpD;IACF,EAAE,OAAO,OAAO;QACd,KAAK;IACP;AACF;uCAEe,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,MAAM,IAAI,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,UAAU"}},
    {"offset": {"line": 528, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 534, "column": 0}, "map": {"version":3,"sources":["file:///home/batman/Workspace/Eatofy/src/app/lib/models/Bills.js"],"sourcesContent":["import mongoose from \"mongoose\";\nimport { OrderTypeValidator, PaymentModeValidator, PaymentStatusValidator } from \"../utils/SpecialStringsValidator\";\n\nexport const billsSchema = new mongoose.Schema(\n  {\n    Type: {\n      type: String,\n      required: true, // Type of bill (e.g., Dine-in, Takeaway, Delivery)\n      validate: {\n        validator: (value) => OrderTypeValidator(value)\n      },\n      message: \"Bill Type must be one of:- 'Takeaway', 'Delivery', 'Dine-In', 'Swiggy', 'Zomato', 'QR-Orders'.\"\n    },\n    TableId: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"Tables\", // Reference to the Tables model (optional)\n    },\n    WaiterId: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"Staffs\", // Reference to the Staffs model (optional)\n    },\n    HotelId: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"Hotels\", // Reference to the Hotels model (optional)\n      required: true,\n    },\n    CustomerId: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"Customers\", // Reference to the Customers model (optional)\n    },\n    VatRate: {\n      type: String, // VAT rate (optional)\n      default: \"0 %\",\n    },\n    VatAmount: {\n      type: Number, // VAT amount (optional)\n      default: 0.0,\n    },\n    TotalAmount: {\n      type: Number,\n      default: 0.0, // Total bill amount\n    },\n    CGSTRate: {\n      type: String,\n      default: \"0 %\", // Central GST rate\n    },\n    SGSTRate: {\n      type: String,\n      default: \"0 %\", // State GST rate\n    },\n    SGSTAmount: {\n      type: Number,\n      default: 0.0, // State GST amount\n    },\n    CGSTAmount: {\n      type: Number,\n      default: 0.0, // Central GST amount\n    },\n    EatocoinsRate: {\n      type: String, // Rate of Eatocoins usage (optional)\n      default: \"0 %\",\n    },\n    EatocoinsAmount: {\n      type: Number, // Amount deducted using Eatocoins (optional)\n      default: 0.0,\n    },\n    MenuTotal: {\n      type: Number,\n      default: 0.0, // Total amount for menu items\n    },\n    Amount: {\n      type: Number,\n      default: 0.0, // Net bill amount\n    },\n    BalanceAmount: {\n      type: Number,\n      default: 0.0, // Balance to be paid\n    },\n    DeliveryChargesRate: {\n      type: String, // Rate for delivery charges (optional)\n      default: \"0 %\",\n    },\n    DeliveryChargesAmount: {\n      type: Number, // Delivery charges amount (optional)\n      default: 0.0,\n    },\n    DiscountRate: {\n      type: String, // Discount rate (optional)\n      default: \"0 %\",\n    },\n    DiscountPrice: {\n      type: Number, // Discount price (optional)\n      default: 0.0,\n    },\n    PaymentMode: {\n      type: String,\n      default: \"Cash\",\n      validate: {\n        validator: (value) => PaymentModeValidator(value)\n      },\n      message: \"Payment Mode must be one of:- 'Cash', 'UPI', 'Credit-Card', 'Due', 'Part'.\"\n    },\n    PaymentStatus: {\n      type: String,\n      default: \"Paid\",\n      validate: {\n        validator: (value) => PaymentStatusValidator(value)\n      },\n      message: \"Payment Status must be one of:- 'Paid', 'Unpaid', 'Part-Paid'.\"\n    },\n    Status: {\n      type: String,\n      default: \"Open\",\n      validate: {\n        validator: (value) => { [\"Open\", \"Closed\"].includes(value); }\n      },\n      message: \"Bil Status must be either 'Open' or 'Closed'.\"\n    },\n    Orders: [\n      {\n        type: mongoose.Schema.Types.ObjectId,\n        ref: \"Orders\", // Reference to the Orders model\n      },\n    ],\n  },\n  {\n    timestamps: true, // Automatically add createdAt and updatedAt fields\n  }\n);\n\n// Pre-remove middleware for single document\nbillsSchema.pre('deleteOne', { document: true }, async function(next) {\n  try {\n    const Orders = mongoose.model('Orders');\n\n    // Delete all related orders\n    await Orders.deleteMany({ BillId: this._id });\n\n    // Update table status if exists\n    if (this.TableId) {\n      const Tables = mongoose.model('Tables');\n      await Tables.findByIdAndUpdate(\n        this.TableId,\n        { Status: \"Available\" }\n      );\n    }\n\n    next();\n  } catch (error) {\n    next(error);\n  }\n});\n\n// Pre-deleteMany middleware for multiple documents\nbillsSchema.pre('deleteMany', async function(next) {\n  try {\n    const Bills = mongoose.model('Bills');\n    const bills = await Bills.find(this.getFilter());\n\n    if (bills.length > 0) {\n      const billIds = bills.map(bill => bill._id);\n      const tableIds = bills.filter(bill => bill.TableId).map(bill => bill.TableId);\n\n      // Delete all related orders\n      const Orders = mongoose.model('Orders');\n      await Orders.deleteMany({ BillId: { $in: billIds } });\n\n      // Update table statuses\n      if (tableIds.length > 0) {\n        const Tables = mongoose.model('Tables');\n        await Tables.updateMany(\n          { _id: { $in: tableIds } },\n          { Status: \"Available\" }\n        );\n      }\n    }\n\n    next();\n  } catch (error) {\n    next(error);\n  }\n});\n\nexport default mongoose.models.Bills || mongoose.model(\"Bills\", billsSchema);\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 725, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 731, "column": 0}, "map": {"version":3,"sources":["file:///home/batman/Workspace/Eatofy/src/app/lib/crud/Tables.js"],"sourcesContent":["import { BaseCrud } from \"./BaseCrud\";\nimport Tables from \"../models/Tables\";\nimport Bills from \"../models/Bills\";\n\nclass TablesCrud extends BaseCrud {\n  constructor() {\n    super(Tables);\n  }\n\n  async createTable(data) {\n    try {\n      const normalizedData = {\n        TableName: data.table_name,\n        PersonsOccupiable: data.persons_occupiable,\n        Status: \"Open\",\n        HotelId: data.hotel_id,\n        SectionId: data.section_id\n      };\n      const result = await this.create(normalizedData);\n      return result;\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      };\n    }\n  }\n\n  async readTables(hotel_id) {\n    try {\n      const result = await this.readMany(\n        { HotelId: hotel_id },\n        {\n          populate: [\n            {\n              path: 'SectionId',\n              select: 'SectionName Type'\n            }\n          ]\n        }\n      );\n      return result;\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      };\n    }\n  }\n\n  async readTable(table_id) {\n    try {\n      const result = await this.readOne(\n        { _id: table_id },\n        {\n          populate: [\n            {\n              path: 'SectionId',\n              select: 'SectionName Type'\n            }\n          ]\n        }\n      );\n      return result;\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      };\n    }\n  }\n\n  async readTablesBySection(section_id) {\n    try {\n      const result = await this.readMany(\n        { SectionId: section_id },\n        {\n          populate: [\n            {\n              path: 'SectionId',\n              select: 'SectionName Type Floor'\n            }\n          ]\n        }\n      );\n      return result;\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      };\n    }\n  }\n\n  async updateTableInfo(data) {\n    try {\n      const updateData = {\n        TableName: data.table_name,\n        Capacity: data.capacity\n      };\n      const result = await this.update(\n        { _id: data.table_id },\n        updateData,\n        { new: true }\n      );\n      return result;\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      };\n    }\n  }\n\n  async updateTableStatus(data) {\n    try {\n      // If setting to occupied, check if there are any open bills\n      if (data.status === \"Occupied\") {\n        const openBills = await Bills.findOne({\n          TableId: data.table_id,\n          Status: \"Open\"\n        });\n        if (!openBills) {\n          return {\n            returncode: 400,\n            message: \"Cannot occupy table without an open bill\",\n            output: []\n          };\n        }\n      }\n      const updateData = {\n        Status: data.status\n      };\n      const result = await this.update(\n        { _id: data.table_id },\n        updateData,\n        { new: true }\n      );\n      return result;\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      };\n    }\n  }\n\n  async updateTableSection(data) {\n    try {\n      // Check if table has any open bills before moving to new section\n      const openBills = await Bills.findOne({\n        TableId: data.table_id,\n        Status: \"Open\"\n      });\n      if (openBills) {\n        return {\n          returncode: 400,\n          message: \"Cannot move table with open bills to a new section\",\n          output: []\n        };\n      }\n      const updateData = {\n        SectionId: data.section_id\n      };\n      const result = await this.update(\n        { _id: data.table_id },\n        updateData,\n        { new: true }\n      );\n      return result;\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      };\n    }\n  }\n\n  async moveTablesBetweenSections(from_section_id, to_section_id) {\n    try {\n      // Check if any tables in the section have open bills\n      const tablesWithBills = await Bills.findOne({\n        Status: \"Open\",\n        TableId: { $in: (await this.readMany({ SectionId: from_section_id })).output.map(t => t._id) }\n      });\n      if (tablesWithBills) {\n        return {\n          returncode: 400,\n          message: \"Cannot move tables with open bills to a new section\",\n          output: []\n        };\n      }\n      const result = await this.update(\n        { SectionId: from_section_id },\n        { SectionId: to_section_id },\n        { new: true, multi: true }\n      );\n      return result;\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      };\n    }\n  }\n\n  async deleteTables(filter) {\n    try {\n      // Check if any tables are currently in use\n      const tables = await this.readMany(filter);\n      if (tables.returncode === 200) {\n        for (const table of tables.output) {\n          const openBills = await Bills.findOne({\n            TableId: table._id,\n            Status: \"Open\"\n          });\n          if (openBills) {\n            return {\n              returncode: 400,\n              message: `Table ${table.TableName} has open bills and cannot be deleted`,\n              output: []\n            };\n          }\n        }\n        // If no open bills, proceed with deletion\n        const result = await this.delete(filter);\n        return result;\n      }\n      return tables;\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      };\n    }\n  }\n\n  async doesTableExists(hotel_id, table_name) {\n    try {\n      const result = await this.readOne({\n        HotelId: hotel_id,\n        TableName: table_name\n      });\n      return result;\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      };\n    }\n  }\n\n}\n\nconst tablesCrud = new TablesCrud();\nexport default tablesCrud;\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 994, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1000, "column": 0}, "map": {"version":3,"sources":["file:///home/batman/Workspace/Eatofy/src/app/api/hotel/tables/fetch/controller.js"],"sourcesContent":["import tablesCrud from \"@/app/lib/crud/Tables\";\n\nexport async function fetch_tables(tokenData) {\n\ttry {\n\n\t\tconst hotel_id = await tokenData.hotelId;\n\t\tconst existing_tables = await tablesCrud.readTables(hotel_id);\n\n\t\tif (existing_tables.returncode === 200 && existing_tables.output.length === 0) {\n\t\t\treturn {\n\t\t\t\treturncode: 409,\n\t\t\t\tmessage: \"No Tables to be displayed\",\n\t\t\t\toutput: []\n\t\t\t};\n\t\t}\n\n\t\treturn existing_tables;\n\n\t} catch (error) {\n\t\treturn {\n\t\t\treturncode: 500,\n\t\t\tmessage: error.message,\n\t\t\toutput: []\n\t\t};\n\t}\n}\n"],"names":[],"mappings":";;;AAAA;;AAEO,eAAe,aAAa,SAAS;IAC3C,IAAI;QAEH,MAAM,WAAW,MAAM,UAAU,OAAO;QACxC,MAAM,kBAAkB,MAAM,qIAAA,CAAA,UAAU,CAAC,UAAU,CAAC;QAEpD,IAAI,gBAAgB,UAAU,KAAK,OAAO,gBAAgB,MAAM,CAAC,MAAM,KAAK,GAAG;YAC9E,OAAO;gBACN,YAAY;gBACZ,SAAS;gBACT,QAAQ,EAAE;YACX;QACD;QAEA,OAAO;IAER,EAAE,OAAO,OAAO;QACf,OAAO;YACN,YAAY;YACZ,SAAS,MAAM,OAAO;YACtB,QAAQ,EAAE;QACX;IACD;AACD"}},
    {"offset": {"line": 1025, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1063, "column": 0}, "map": {"version":3,"sources":["file:///home/batman/Workspace/Eatofy/src/app/lib/utils/jwt.js"],"sourcesContent":["import jwt from 'jsonwebtoken';\n\nconst JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key'; // In production, always use environment variable\nconst JWT_EXPIRES_IN = '24h';\n\nexport const createToken = (payload) => {\n  return jwt.sign(payload, JWT_SECRET, { expiresIn: JWT_EXPIRES_IN });\n};\n\nexport const verifyToken = (token) => {\n  try {\n    return jwt.verify(token, JWT_SECRET);\n  } catch (error) {\n    return null;\n  }\n};\n\nexport const updateToken = (token, newData) => {\n  try {\n    const decoded = jwt.verify(token, JWT_SECRET);\n    const updatedPayload = { ...decoded, ...newData };\n    // Remove the exp claim to generate a fresh expiration\n    delete updatedPayload.exp;\n    return jwt.sign(updatedPayload, JWT_SECRET, { expiresIn: JWT_EXPIRES_IN });\n  } catch (error) {\n    return null;\n  }\n};\n\nexport const decodeToken = (token) => {\n  try {\n    return jwt.decode(token);\n  } catch (error) {\n    return null;\n  }\n};\n"],"names":[],"mappings":";;;;;;AAAA;;AAEA,MAAM,aAAa,QAAQ,GAAG,CAAC,UAAU,IAAI,mBAAmB,iDAAiD;AACjH,MAAM,iBAAiB;AAEhB,MAAM,cAAc,CAAC;IAC1B,OAAO,uIAAA,CAAA,UAAG,CAAC,IAAI,CAAC,SAAS,YAAY;QAAE,WAAW;IAAe;AACnE;AAEO,MAAM,cAAc,CAAC;IAC1B,IAAI;QACF,OAAO,uIAAA,CAAA,UAAG,CAAC,MAAM,CAAC,OAAO;IAC3B,EAAE,OAAO,OAAO;QACd,OAAO;IACT;AACF;AAEO,MAAM,cAAc,CAAC,OAAO;IACjC,IAAI;QACF,MAAM,UAAU,uIAAA,CAAA,UAAG,CAAC,MAAM,CAAC,OAAO;QAClC,MAAM,iBAAiB;YAAE,GAAG,OAAO;YAAE,GAAG,OAAO;QAAC;QAChD,sDAAsD;QACtD,OAAO,eAAe,GAAG;QACzB,OAAO,uIAAA,CAAA,UAAG,CAAC,IAAI,CAAC,gBAAgB,YAAY;YAAE,WAAW;QAAe;IAC1E,EAAE,OAAO,OAAO;QACd,OAAO;IACT;AACF;AAEO,MAAM,cAAc,CAAC;IAC1B,IAAI;QACF,OAAO,uIAAA,CAAA,UAAG,CAAC,MAAM,CAAC;IACpB,EAAE,OAAO,OAAO;QACd,OAAO;IACT;AACF"}},
    {"offset": {"line": 1108, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1114, "column": 0}, "map": {"version":3,"sources":["file:///home/batman/Workspace/Eatofy/src/app/api/hotel/tables/fetch/route.js"],"sourcesContent":["import { fetch_tables } from './controller';\nimport { NextResponse } from 'next/server';\nimport { verifyToken } from '@/app/lib/utils/jwt';\n\nexport async function GET(request) {\n\ttry {\n\n\t\t// Get token from cookie\n\t\tconst token = request.cookies.get('hotel_auth_token')?.value;\n\t\tif (!token) {\n\t\t\treturn NextResponse.json({\n\t\t\t\treturncode: 401,\n\t\t\t\tmessage: \"No token provided\",\n\t\t\t\toutput: []\n\t\t\t}, { status: 401, statusText: \"No token provided\" });\n\t\t}\n\n\t\t// Verify the token\n\t\tconst userData = verifyToken(token);\n\t\tif (!userData) {\n\t\t\treturn NextResponse.json({\n\t\t\t\treturncode: 401,\n\t\t\t\tmessage: \"Invalid or expired token\",\n\t\t\t\toutput: []\n\t\t\t}, { status: 401, statusText: \"Invalid or expired token\" });\n\t\t}\n\n\t\tconst result = await fetch_tables(userData);\n\n\t\treturn NextResponse.json({\n\t\t\treturncode: result.returncode,\n\t\t\tmessage: result.message,\n\t\t\toutput: result.output\n\t\t}, {\n\t\t\tstatus: result.returncode,\n\t\t});\n\n\t} catch (error) {\n\t\treturn NextResponse.json(\n\t\t\t{\n\t\t\t\treturncode: 500,\n\t\t\t\tmessage: error.message,\n\t\t\t\toutput: []\n\t\t\t},\n\t\t\t{ status: 500 }\n\t\t);\n\t}\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEO,eAAe,IAAI,OAAO;IAChC,IAAI;QAEH,wBAAwB;QACxB,MAAM,QAAQ,QAAQ,OAAO,CAAC,GAAG,CAAC,qBAAqB;QACvD,IAAI,CAAC,OAAO;YACX,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACxB,YAAY;gBACZ,SAAS;gBACT,QAAQ,EAAE;YACX,GAAG;gBAAE,QAAQ;gBAAK,YAAY;YAAoB;QACnD;QAEA,mBAAmB;QACnB,MAAM,WAAW,CAAA,GAAA,mIAAA,CAAA,cAAW,AAAD,EAAE;QAC7B,IAAI,CAAC,UAAU;YACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACxB,YAAY;gBACZ,SAAS;gBACT,QAAQ,EAAE;YACX,GAAG;gBAAE,QAAQ;gBAAK,YAAY;YAA2B;QAC1D;QAEA,MAAM,SAAS,MAAM,CAAA,GAAA,6JAAA,CAAA,eAAY,AAAD,EAAE;QAElC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACxB,YAAY,OAAO,UAAU;YAC7B,SAAS,OAAO,OAAO;YACvB,QAAQ,OAAO,MAAM;QACtB,GAAG;YACF,QAAQ,OAAO,UAAU;QAC1B;IAED,EAAE,OAAO,OAAO;QACf,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACvB;YACC,YAAY;YACZ,SAAS,MAAM,OAAO;YACtB,QAAQ,EAAE;QACX,GACA;YAAE,QAAQ;QAAI;IAEhB;AACD"}},
    {"offset": {"line": 1167, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}