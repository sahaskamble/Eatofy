{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 47, "column": 0}, "map": {"version":3,"sources":["file:///home/batman/Workspace/Eatofy/src/app/lib/crud/BaseCrud.js"],"sourcesContent":["export class BaseCrud {\n  constructor(model) {\n    this.model = model;\n  }\n\n  // Create a new document\n  async create(data) {\n    try {\n      const doc = new this.model(data);\n      await doc.save();\n      return {\n        returncode: 200,\n        message: \"Data Created Successfully\",\n        output: doc\n      };\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      };\n    }\n  }\n\n  // Read all documents with optional filters\n  async readMany(filters = {}, options = {}) {\n    try {\n      const {\n        sort = {},\n        populate = [],\n        select = '',\n        skip = 0,\n        limit = 0,\n        lean = false\n      } = options;\n\n      let query = this.model.find(filters);\n\n      // Apply population\n      if (populate.length > 0) {\n        query = query.populate(populate);\n      }\n\n      // Apply sorting\n      if (Object.keys(sort).length > 0) {\n        query = query.sort(sort);\n      }\n\n      // Apply selection\n      if (select) {\n        query = query.select(select);\n      }\n\n      // Apply pagination\n      if (skip > 0) {\n        query = query.skip(skip);\n      }\n      if (limit > 0) {\n        query = query.limit(limit);\n      }\n\n      // Execute query\n      const docs = lean ? await query.lean() : await query.exec();\n\n      return {\n        returncode: 200,\n        message: \"Data Fetched Successfully\",\n        output: docs\n      };\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      };\n    }\n  }\n\n  // Read a single document\n  async readOne(filters = {}, options = {}) {\n    try {\n      const { populate = [], select = '', lean = false } = options;\n\n      let query = this.model.findOne(filters);\n\n      // Apply population\n      if (populate.length > 0) {\n        query = query.populate(populate);\n      }\n\n      // Apply selection\n      if (select) {\n        query = query.select(select);\n      }\n\n      // Execute query\n      const doc = lean ? await query.lean() : await query.exec();\n\n      if (!doc) {\n        return {\n          returncode: 404,\n          message: \"Document Not Found\",\n          output: []\n        };\n      }\n\n      return {\n        returncode: 200,\n        message: \"Data Fetched Successfully\",\n        output: doc\n      };\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      };\n    }\n  }\n\n  // Update a document\n  async update(filters = {}, data = {}, options = { new: true }) {\n    try {\n      const doc = await this.model.findOneAndUpdate(filters, data, options);\n\n      if (!doc) {\n        return {\n          returncode: 404,\n          message: \"Document Not Found\",\n          output: []\n        };\n      }\n\n      return {\n        returncode: 200,\n        message: \"Data Updated Successfully\",\n        output: doc\n      };\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      };\n    }\n  }\n\n  // Delete a document\n  async delete(filters = {}) {\n    try {\n      console.log('BaseCrud.delete called with:', {\n        model: this.model.modelName,\n        filters\n      });\n\n      const doc = await this.model.deleteMany(filters);\n      console.log('BaseCrud.delete result:', doc);\n\n      if (!doc || doc.deletedCount === 0) {\n        console.log('BaseCrud.delete - No documents found');\n        return {\n          returncode: 404,\n          message: \"Document Not Found\",\n          output: []\n        };\n      }\n\n      return {\n        returncode: 200,\n        message: \"Data Deleted Successfully\",\n        output: doc\n      };\n    } catch (error) {\n      console.error('Error in BaseCrud.delete:', error);\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      };\n    }\n  }\n\n  // Check if document exists\n  async exists(filters = {}) {\n    try {\n      const exists = await this.model.exists(filters);\n      return {\n        returncode: 200,\n        message: exists ? \"Document Exists\" : \"Document Not Found\",\n        output: !!exists\n      };\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: false\n      };\n    }\n  }\n\n  // Count documents\n  async count(filters = {}) {\n    try {\n      const count = await this.model.countDocuments(filters);\n      return {\n        returncode: 200,\n        message: \"Count Retrieved Successfully\",\n        output: count\n      };\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: 0\n      };\n    }\n  }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 238, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 252, "column": 0}, "map": {"version":3,"sources":["file:///home/batman/Workspace/Eatofy/src/app/lib/utils/StringValidator.js"],"sourcesContent":["export default function StringValidators(value) {\n  // Ensure the input is a string\n  if (typeof value !== \"string\") {\n    return false;\n  }\n\n  if (value === null) {\n    return true;\n  }\n\n  // List of forbidden characters\n  const charList = ['/', '\\\\', '\"', ';', \"'\", '+', '`', '^'];\n  let validationFlag = true;\n\n  // Iterate over each character in the list\n  for (let char of charList) {\n\n    // Check if the forbidden character is present in the string\n    if (value.includes(char)) {\n      validationFlag = false;\n      break; // Stop checking further once an invalid character is found\n    }\n  }\n\n  return validationFlag;\n}\n"],"names":[],"mappings":";;;AAAe,SAAS,iBAAiB,KAAK;IAC5C,+BAA+B;IAC/B,IAAI,OAAO,UAAU,UAAU;QAC7B,OAAO;IACT;IAEA,IAAI,UAAU,MAAM;QAClB,OAAO;IACT;IAEA,+BAA+B;IAC/B,MAAM,WAAW;QAAC;QAAK;QAAM;QAAK;QAAK;QAAK;QAAK;QAAK;KAAI;IAC1D,IAAI,iBAAiB;IAErB,0CAA0C;IAC1C,KAAK,IAAI,QAAQ,SAAU;QAEzB,4DAA4D;QAC5D,IAAI,MAAM,QAAQ,CAAC,OAAO;YACxB,iBAAiB;YACjB,OAAO,2DAA2D;QACpE;IACF;IAEA,OAAO;AACT"}},
    {"offset": {"line": 285, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 291, "column": 0}, "map": {"version":3,"sources":["file:///home/batman/Workspace/Eatofy/src/app/lib/models/Reservation.js"],"sourcesContent":["import mongoose from \"mongoose\";\n\nexport const ReservationSchema = new mongoose.Schema(\n  {\n    Date: {\n      type: String, // Storing date as a string for flexibility (e.g., \"YYYY-MM-DD\")\n      required: true,\n    },\n    Time: {\n      type: String, // Storing time as a string for flexibility (e.g., \"HH:mm\")\n      required: true,\n    },\n    Note: {\n      type: String,\n      default: null, // Optional note field\n    },\n    NoOfPersons: {\n      type: Number,\n      default: 0, // Optional number of persons\n    },\n    CustomerId: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"Customers\", // Reference to the `Customers` collection\n      required: true,\n    },\n    HotelId: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"Hotels\", // Reference to the `Hotels` collection\n      required: true,\n    },\n  },\n  { timestamps: true }\n);\n\nexport default mongoose.models.Reservations \n"],"names":[],"mappings":";;;;AAAA;;AAEO,MAAM,oBAAoB,IAAI,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAClD;IACE,MAAM;QACJ,MAAM;QACN,UAAU;IACZ;IACA,MAAM;QACJ,MAAM;QACN,UAAU;IACZ;IACA,MAAM;QACJ,MAAM;QACN,SAAS;IACX;IACA,aAAa;QACX,MAAM;QACN,SAAS;IACX;IACA,YAAY;QACV,MAAM,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,KAAK;QACL,UAAU;IACZ;IACA,SAAS;QACP,MAAM,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,KAAK;QACL,UAAU;IACZ;AACF,GACA;IAAE,YAAY;AAAK;uCAGN,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,YAAY"}},
    {"offset": {"line": 328, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 334, "column": 0}, "map": {"version":3,"sources":["file:///home/batman/Workspace/Eatofy/src/app/lib/models/Customers.js"],"sourcesContent":["import mongoose from \"mongoose\";\nimport StringValidators from \"../utils/StringValidator\";\nimport Reservation from \"./Reservation\";\n\nexport const customerSchema = new mongoose.Schema(\n  {\n    CustomerName: {\n      type: String,\n      required: true,\n      validate: {\n        validator: (value) => StringValidators(value)\n      },\n      message: \"Customer Name should not contain invalid characters like /, \\\\, \\\", ;, ', +, `, or ^\"\n    },\n    Contact: {\n      type: String,\n      required: false,\n    },\n    Email: {\n      type: String,\n      required: false,\n    },\n    HotelId: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"Hotels\", // Reference to the Hotel model\n      required: true,\n    },\n    EatocoinsWallet: {\n      type: Number,\n      default: 0, // Default to 0 if not provided\n    },\n    StreetAddress: {\n      type: String,\n      required: false,\n    },\n    Apartment: {\n      type: String,\n      required: false,\n    },\n    City: {\n      type: String,\n      required: false,\n    },\n    State: {\n      type: String,\n      required: false,\n    },\n    Landmark: {\n      type: String,\n      required: false,\n    },\n    ZipCode: {\n      type: String,\n      required: false,\n    },\n    Birthday: {\n      type: String,\n      required: false,\n    },\n    Anniversary: {\n      type: String,\n      required: false,\n    },\n\n    // Child Relationship\n    Bills: [{\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"Bills\", // Reference to the Bill model\n    }],\n    Reservation: [{\n      type: mongoose.Schema.Types.ObjectId,\n      ref: \"Reservations\", // Reference to the TableReservation model\n    }],\n  },\n  {\n    timestamps: true, // Automatically adds `createdAt` and `updatedAt` fields\n  }\n);\n\n// Add pre-remove middleware\ncustomerSchema.pre('remove', async function(next) {\n  try {\n    // Check for active bills\n    const Bills = mongoose.model('Bills');\n    const activeBills = await Bills.find({\n      CustomerId: this._id,\n      Status: 'Open'\n    });\n\n    if (activeBills.length > 0) {\n      throw new Error('Cannot delete customer with active bills');\n    }\n\n    // Update completed bills to remove customer reference\n    await Bills.deleteMany({ CustomerId: this._id });\n\n    // Delete any reservations\n    const Reservation = mongoose.model('Reservations');\n    await Reservation.deleteMany({ CustomerId: this._id });\n\n    next();\n  } catch (error) {\n    next(error);\n  }\n});\n\n// Add pre-deleteMany middleware\ncustomerSchema.pre('deleteMany', async function(next) {\n  try {\n    // Get customers to be deleted\n    const Customers = mongoose.model('Customers');\n    const customers = await Customers.find(this.getFilter());\n    const customerIds = customers.map(customer => customer._id);\n\n    if (customerIds.length > 0) {\n      // Check for active bills\n      const Bills = mongoose.model('Bills');\n      const activeBills = await Bills.find({\n        CustomerId: { $in: customerIds },\n        Status: 'Open'\n      });\n\n      if (activeBills.length > 0) {\n        throw new Error('Cannot delete customers with active bills');\n      }\n\n      // Update completed bills and delete reservations in parallel\n      await Promise.all([\n        Bills.deleteMany({ CustomerId: { $in: customerIds } }),\n        Reservation.deleteMany({ CustomerId: { $in: customerIds } })\n      ]);\n    }\n\n    next();\n  } catch (error) {\n    next(error);\n  }\n});\n\nexport default mongoose.models.Customers || mongoose.model(\"Customers\", customerSchema);\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 483, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 489, "column": 0}, "map": {"version":3,"sources":["file:///home/batman/Workspace/Eatofy/src/app/lib/crud/Customers.js"],"sourcesContent":["import { BaseCrud } from \"./BaseCrud\";\nimport Customers from \"../models/Customers\";\n\nclass CustomersCrud extends BaseCrud {\n  constructor() {\n    super(Customers);\n  }\n\n  async createCustomerBackup({ customer_id = null, customer_name, email, contact, hotel_id, street_address, apartment, city, state, landmark, zip_code, birthday, anniversary }) {\n    try {\n      const normalizedData = {\n        CustomerName: customer_name,\n        Email: email || null,\n        Contact: contact,\n        HotelId: hotel_id,\n        // Detailed address fields\n        StreetAddress: street_address || null,\n        Apartment: apartment || null,\n        City: city || null,\n        State: state || null,\n        Landmark: landmark || null,\n        ZipCode: zip_code || null,\n        Birthday: birthday || null,\n        Anniversary: anniversary || null\n      };\n\n      const exists = await this.readOne({\n        CustomerName: customer_name,\n        Contact: contact,\n        HotelId: hotel_id\n      });\n      customer_id = exists.output._id;\n\n      if (exists.output.length > 0) {\n        const updateData = {\n          CustomerName: customer_name,\n          Email: email || null,\n          Contact: contact,\n          StreetAddress: street_address || null,\n          Apartment: apartment || null,\n          City: city || null,\n          State: state || null,\n          Landmark: landmark || null,\n          ZipCode: zip_code || null,\n          Birthday: birthday || null,\n          Anniversary: anniversary || null\n        };\n\n        return await this.update(updateData);\n      }\n\n      return await this.create(normalizedData);\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      };\n    }\n  }\n\n  async createCustomer(data) {\n    try {\n      const normalizedData = {\n        CustomerName: data.customer_name,\n        Email: data.email,\n        Contact: data.contact,\n        HotelId: data.hotel_id,\n\n        // Detailed address fields\n        StreetAddress: data.street_address || null,\n        Apartment: data.apartment || null,\n        City: data.city || null,\n        State: data.state || null,\n        Landmark: data.landmark || null,\n        ZipCode: data.zip_code || null,\n        Birthday: data.birthday || null,\n        Anniversary: data.anniversary || null\n      };\n\n      const result = await this.create(normalizedData);\n      return result;\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      };\n    }\n  }\n\n  async readCustomers(hotel_id) {\n    try {\n      const result = await this.readMany(\n        { HotelId: hotel_id }\n      );\n      return result;\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      };\n    }\n  }\n\n  async readCustomerDetails(customer_id) {\n    try {\n      const result = await this.readOne(\n        { _id: customer_id }\n      );\n      return result;\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      };\n    }\n  }\n\n  async checkCustomer(customer_name, contact, hotel_id) {\n    try {\n      const result = await this.readOne({\n        CustomerName: customer_name,\n        Contact: contact,\n        HotelId: hotel_id\n      });\n      return result;\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      };\n    }\n  }\n\n  async updateCustomerInfo(data) {\n    try {\n      const updateData = {\n        CustomerName: data.name,\n        Email: data.email,\n        Contact: data.contact,\n        StreetAddress: data.street_address,\n        Apartment: data.apartment,\n        City: data.city,\n        State: data.state,\n        Landmark: data.landmark,\n        ZipCode: data.zip_code,\n        Birthday: data.birthday,\n        Anniversary: data.anniversary\n      };\n\n      const result = await this.update(\n        { _id: data.customer_id },\n        updateData,\n        { new: true }\n      );\n      return result;\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      };\n    }\n  }\n\n  async updateWallet(data) {\n    try {\n      const customer = await this.readOne({ _id: data.customer_id });\n      if (customer.returncode !== 200) {\n        return customer;\n      }\n\n      const updateData = {\n        EatocoinsWallet: data.wallet,\n      };\n\n      const result = await this.update(\n        { _id: data.customer_id },\n        updateData,\n        { new: true }\n      );\n      return result;\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      };\n    }\n  }\n\n  async deleteCustomers(filter) {\n    try {\n      // Check if any customers have open bills\n      const customers = await this.readMany(filter);\n\n      if (customers.returncode === 200) {\n        // If no open bills, proceed with deletion\n        const result = await this.delete(filter);\n        return result;\n      }\n\n      return {\n        returncode: 200,\n        message: \"No Customers Found.\",\n        output: []\n      };\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      };\n    }\n  }\n\n  async doesCustomerExist(hotel_id, email) {\n    try {\n      const result = await this.readOne({\n        HotelId: hotel_id,\n        Email: email\n      });\n      return result;\n    } catch (error) {\n      return {\n        returncode: 500,\n        message: error.message,\n        output: []\n      };\n    }\n  }\n}\n\nconst customersCrud = new CustomersCrud();\nexport default customersCrud;\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 713, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 719, "column": 0}, "map": {"version":3,"sources":["file:///home/batman/Workspace/Eatofy/src/app/api/sync/Customers/pull/controller.js"],"sourcesContent":["import customersCrud from \"@/app/lib/crud/Customers\";\n\nexport async function fetch_customers(tokenData) {\n\ttry {\n\n\t\tconst hotel_id = await tokenData.hotelId;\n\t\tconst existing_customers = await customersCrud.readCustomers(hotel_id);\n\n\t\tif (existing_customers.returncode === 200 && existing_customers.output.length === 0) {\n\t\t\treturn {\n\t\t\t\treturncode: 409,\n\t\t\t\tmessage: \"No Tables to be displayed\",\n\t\t\t\toutput: []\n\t\t\t};\n\t\t}\n\n\t\treturn existing_customers;\n\n\t} catch (error) {\n\t\treturn {\n\t\t\treturncode: 500,\n\t\t\tmessage: error.message,\n\t\t\toutput: []\n\t\t};\n\t}\n}\n"],"names":[],"mappings":";;;AAAA;;AAEO,eAAe,gBAAgB,SAAS;IAC9C,IAAI;QAEH,MAAM,WAAW,MAAM,UAAU,OAAO;QACxC,MAAM,qBAAqB,MAAM,wIAAA,CAAA,UAAa,CAAC,aAAa,CAAC;QAE7D,IAAI,mBAAmB,UAAU,KAAK,OAAO,mBAAmB,MAAM,CAAC,MAAM,KAAK,GAAG;YACpF,OAAO;gBACN,YAAY;gBACZ,SAAS;gBACT,QAAQ,EAAE;YACX;QACD;QAEA,OAAO;IAER,EAAE,OAAO,OAAO;QACf,OAAO;YACN,YAAY;YACZ,SAAS,MAAM,OAAO;YACtB,QAAQ,EAAE;QACX;IACD;AACD"}},
    {"offset": {"line": 744, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 782, "column": 0}, "map": {"version":3,"sources":["file:///home/batman/Workspace/Eatofy/src/app/lib/utils/jwt.js"],"sourcesContent":["import jwt from 'jsonwebtoken';\n\nconst JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key'; // In production, always use environment variable\nconst JWT_EXPIRES_IN = '24h';\n\nexport const createToken = (payload) => {\n  return jwt.sign(payload, JWT_SECRET, { expiresIn: JWT_EXPIRES_IN });\n};\n\nexport const verifyToken = (token) => {\n  try {\n    return jwt.verify(token, JWT_SECRET);\n  } catch (error) {\n    return null;\n  }\n};\n\nexport const updateToken = (token, newData) => {\n  try {\n    const decoded = jwt.verify(token, JWT_SECRET);\n    const updatedPayload = { ...decoded, ...newData };\n    // Remove the exp claim to generate a fresh expiration\n    delete updatedPayload.exp;\n    return jwt.sign(updatedPayload, JWT_SECRET, { expiresIn: JWT_EXPIRES_IN });\n  } catch (error) {\n    return null;\n  }\n};\n\nexport const decodeToken = (token) => {\n  try {\n    return jwt.decode(token);\n  } catch (error) {\n    return null;\n  }\n};\n"],"names":[],"mappings":";;;;;;AAAA;;AAEA,MAAM,aAAa,QAAQ,GAAG,CAAC,UAAU,IAAI,mBAAmB,iDAAiD;AACjH,MAAM,iBAAiB;AAEhB,MAAM,cAAc,CAAC;IAC1B,OAAO,uIAAA,CAAA,UAAG,CAAC,IAAI,CAAC,SAAS,YAAY;QAAE,WAAW;IAAe;AACnE;AAEO,MAAM,cAAc,CAAC;IAC1B,IAAI;QACF,OAAO,uIAAA,CAAA,UAAG,CAAC,MAAM,CAAC,OAAO;IAC3B,EAAE,OAAO,OAAO;QACd,OAAO;IACT;AACF;AAEO,MAAM,cAAc,CAAC,OAAO;IACjC,IAAI;QACF,MAAM,UAAU,uIAAA,CAAA,UAAG,CAAC,MAAM,CAAC,OAAO;QAClC,MAAM,iBAAiB;YAAE,GAAG,OAAO;YAAE,GAAG,OAAO;QAAC;QAChD,sDAAsD;QACtD,OAAO,eAAe,GAAG;QACzB,OAAO,uIAAA,CAAA,UAAG,CAAC,IAAI,CAAC,gBAAgB,YAAY;YAAE,WAAW;QAAe;IAC1E,EAAE,OAAO,OAAO;QACd,OAAO;IACT;AACF;AAEO,MAAM,cAAc,CAAC;IAC1B,IAAI;QACF,OAAO,uIAAA,CAAA,UAAG,CAAC,MAAM,CAAC;IACpB,EAAE,OAAO,OAAO;QACd,OAAO;IACT;AACF"}},
    {"offset": {"line": 827, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 833, "column": 0}, "map": {"version":3,"sources":["file:///home/batman/Workspace/Eatofy/src/app/api/sync/Customers/pull/route.js"],"sourcesContent":["import { fetch_customers } from './controller';\nimport { NextResponse } from 'next/server';\nimport { verifyToken } from '@/app/lib/utils/jwt';\n\nexport async function GET(request) {\n\ttry {\n\n\t\t// Get token from cookie\n\t\tconst token = request.cookies.get('hotel_auth_token')?.value;\n\t\tif (!token) {\n\t\t\treturn NextResponse.json({\n\t\t\t\treturncode: 401,\n\t\t\t\tmessage: \"No token provided\",\n\t\t\t\toutput: []\n\t\t\t}, { status: 401, statusText: \"No token provided\" });\n\t\t}\n\n\t\t// Verify the token\n\t\tconst userData = verifyToken(token);\n\t\tif (!userData) {\n\t\t\treturn NextResponse.json({\n\t\t\t\treturncode: 401,\n\t\t\t\tmessage: \"Invalid or expired token\",\n\t\t\t\toutput: []\n\t\t\t}, { status: 401, statusText: \"Invalid or expired token\" });\n\t\t}\n\n\t\tconst result = await fetch_customers(userData);\n\n\t\treturn NextResponse.json({\n\t\t\treturncode: result.returncode,\n\t\t\tmessage: result.message,\n\t\t\toutput: result.output\n\t\t}, {\n\t\t\tstatus: result.returncode,\n\t\t});\n\n\t} catch (error) {\n\t\treturn NextResponse.json(\n\t\t\t{\n\t\t\t\treturncode: 500,\n\t\t\t\tmessage: error.message,\n\t\t\t\toutput: []\n\t\t\t},\n\t\t\t{ status: 500 }\n\t\t);\n\t}\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEO,eAAe,IAAI,OAAO;IAChC,IAAI;QAEH,wBAAwB;QACxB,MAAM,QAAQ,QAAQ,OAAO,CAAC,GAAG,CAAC,qBAAqB;QACvD,IAAI,CAAC,OAAO;YACX,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACxB,YAAY;gBACZ,SAAS;gBACT,QAAQ,EAAE;YACX,GAAG;gBAAE,QAAQ;gBAAK,YAAY;YAAoB;QACnD;QAEA,mBAAmB;QACnB,MAAM,WAAW,CAAA,GAAA,mIAAA,CAAA,cAAW,AAAD,EAAE;QAC7B,IAAI,CAAC,UAAU;YACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACxB,YAAY;gBACZ,SAAS;gBACT,QAAQ,EAAE;YACX,GAAG;gBAAE,QAAQ;gBAAK,YAAY;YAA2B;QAC1D;QAEA,MAAM,SAAS,MAAM,CAAA,GAAA,8JAAA,CAAA,kBAAe,AAAD,EAAE;QAErC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACxB,YAAY,OAAO,UAAU;YAC7B,SAAS,OAAO,OAAO;YACvB,QAAQ,OAAO,MAAM;QACtB,GAAG;YACF,QAAQ,OAAO,UAAU;QAC1B;IAED,EAAE,OAAO,OAAO;QACf,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACvB;YACC,YAAY;YACZ,SAAS,MAAM,OAAO;YACtB,QAAQ,EAAE;QACX,GACA;YAAE,QAAQ;QAAI;IAEhB;AACD"}},
    {"offset": {"line": 886, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}