{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/batman/Workspace/Eatofy/src/app/hotel/%28dashboard%29/dashboard/page.js"],"sourcesContent":["'use client';\n\nimport { useHotelAuth } from '../../contexts/AuthContext';\nimport { useEffect, useState } from 'react';\nimport {\n  ChartBarIcon,\n  UserGroupIcon,\n  BanknotesIcon,\n  CalendarDaysIcon,\n} from '@heroicons/react/24/outline';\nimport {\n  AreaChart,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  PieChart,\n  Pie,\n  Cell,\n  Legend,\n} from 'recharts';\n\nconst COLORS = ['#FF9999', '#FFB366', '#FFCC66', '#FFB366'];\nconst REVENUE_COLOR = '#FF8080';\nconst ORDERS_COLOR = '#FFB366';\n\nexport default function Dashboard() {\n  const { user } = useHotelAuth();\n  const [dashboardData, setDashboardData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [dateRange, setDateRange] = useState('today');\n  const [customDates, setCustomDates] = useState({\n    from: '',\n    to: ''\n  });\n\n  const getDateRange = (range) => {\n    const today = new Date();\n    today.setHours(23, 59, 59, 999);\n    const from = new Date();\n    from.setHours(0, 0, 0, 0);\n\n    switch (range) {\n      case 'today':\n        return { from, to: today };\n      \n      case 'yesterday': {\n        const yesterday = new Date(today);\n        yesterday.setDate(yesterday.getDate() - 1);\n        yesterday.setHours(0, 0, 0, 0);\n        return { \n          from: yesterday, \n          to: new Date(yesterday.setHours(23, 59, 59, 999))\n        };\n      }\n      \n      case 'week': {\n        const weekStart = new Date(from);\n        weekStart.setDate(weekStart.getDate() - 7);\n        return { from: weekStart, to: today };\n      }\n      \n      case 'month': {\n        const monthStart = new Date(from);\n        monthStart.setDate(monthStart.getDate() - 30);\n        return { from: monthStart, to: today };\n      }\n      \n      case 'year': {\n        const yearStart = new Date(from);\n        yearStart.setFullYear(yearStart.getFullYear() - 1);\n        return { from: yearStart, to: today };\n      }\n      \n      case 'custom':\n        return {\n          from: new Date(`${customDates.from}T00:00:00`),\n          to: new Date(`${customDates.to}T23:59:59`)\n        };\n      \n      default:\n        return { from, to: today };\n    }\n  };\n\n  const fetchDashboardData = async () => {\n    try {\n      setLoading(true);\n      const { from, to } = getDateRange(dateRange);\n\n      const response = await fetch('/api/hotel/dashboard', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          from: from.toISOString().split('T')[0],\n          to: to.toISOString().split('T')[0],\n        }),\n      });\n\n      const data = await response.json();\n      \n      if (data.returncode === 200) {\n        console.log(data.output);\n        setDashboardData(data.output);\n      }\n    } catch (error) {\n      console.error('Error fetching dashboard data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (dateRange === 'custom' && (!customDates.from || !customDates.to)) {\n      return;\n    }\n    fetchDashboardData();\n  }, [dateRange, customDates]);\n\n  const stats = [\n    { \n      name: 'Total Orders', \n      icon: CalendarDaysIcon, \n      value: loading ? '---' : dashboardData?.Orders?.All_Order || 0,\n      // change: '+4.75%' \n    },\n    { \n      name: 'Total Revenue', \n      icon: BanknotesIcon, \n      value: loading ? '$---' : `â‚¹${dashboardData?.Amount?.All_Order?.toLocaleString() || 0}`,\n      // change: '+54.02%' \n    },\n    { \n      name: 'Dine-In Orders', \n      icon: UserGroupIcon, \n      value: loading ? '---' : dashboardData?.Orders?.Dine_In || 0,\n      // change: '-1.39%' \n    },\n    { \n      name: 'Online Orders', \n      icon: ChartBarIcon, \n      value: loading ? '---' : ((dashboardData?.Orders?.Swiggy || 0) + (dashboardData?.Orders?.Zomato || 0)),\n      // change: '+10.18%' \n    }\n  ];\n\n  const formatChartData = (data) => {\n    if (!data?.Chart?.All_Order) return [];\n    return data.Chart.All_Order.Date.map((date, index) => ({\n      date,\n      orders: data.Chart.All_Order.Count[index],\n      amount: data.Chart.All_Order.Amount[index],\n    }));\n  };\n\n  const formatPieChartData = (data) => {\n    if (!data?.Orders) return [];\n    return [\n      { name: 'Dine-In', value: data.Orders.Dine_In || 0 },\n      { name: 'Takeaway', value: data.Orders.Takeaway || 0 },\n      { name: 'Swiggy', value: data.Orders.Swiggy || 0 },\n      { name: 'Zomato', value: data.Orders.Zomato || 0 },\n    ].filter(item => item.value > 0);\n  };\n\n  const formatOrderId = (originalId, index) => {\n    const shortId = String(index + 1).padStart(4, '0');\n    return `ORDER${shortId}`;\n  };\n\n  const hasData = (data) => {\n    return data?.Orders?.All_Order > 0 || data?.Amount?.All_Order > 0;\n  };\n\n  return (\n    <div className='p-4'>\n      <div className=\"mb-8 flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-2xl font-semibold text-gray-900\">\n            Welcome back, {user[0]?.hotelName}\n          </h1>\n          <p className=\"mt-2 text-sm text-gray-700\">\n            Here&apos;s what&apos;s happening with your hotel today.\n          </p>\n        </div>\n\n        <div className=\"flex items-center gap-3 bg-white p-2 rounded-lg shadow-sm border border-gray-100\">\n          <select\n            value={dateRange}\n            onChange={(e) => setDateRange(e.target.value)}\n            className=\"text-sm font-medium text-gray-700 bg-transparent border-0 cursor-pointer focus:ring-0 focus:outline-none pr-8\"\n          >\n            <option value=\"today\">Today</option>\n            <option value=\"yesterday\">Yesterday</option>\n            <option value=\"week\">Last 7 Days</option>\n            <option value=\"month\">Last 30 Days</option>\n            <option value=\"year\">Last Year</option>\n            <option value=\"custom\">Custom Range</option>\n          </select>\n\n          {dateRange === 'custom' && (\n            <div className=\"flex items-center gap-2\">\n              <div className=\"h-4 w-px bg-gray-300\"></div>\n              <input\n                type=\"date\"\n                value={customDates.from}\n                onChange={(e) => setCustomDates(prev => ({ ...prev, from: e.target.value }))}\n                className=\"text-sm border-0 py-1 px-2 rounded focus:ring-1 focus:ring-red-500\"\n              />\n              <span className=\"text-gray-500\">-</span>\n              <input\n                type=\"date\"\n                value={customDates.to}\n                onChange={(e) => setCustomDates(prev => ({ ...prev, to: e.target.value }))}\n                className=\"text-sm border-0 py-1 px-2 rounded focus:ring-1 focus:ring-red-500\"\n              />\n            </div>\n          )}\n        </div>\n      </div>\n\n      <div className=\"mt-4\">\n        <div className=\"grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-4\">\n          {stats.map((item) => (\n            <dl\n              key={item.name}\n              className=\"relative bg-white pt-5 px-4 sm:pt-6 sm:px-6 shadow rounded-lg overflow-hidden\"\n            >\n              <dt>\n                <div className=\"absolute bg-red-500 rounded-md p-3\">\n                  <item.icon className=\"h-6 w-6 text-white\" aria-label='icons' aria-hidden=\"true\" />\n                </div>\n                <p className=\"ml-16 text-sm font-medium text-gray-500 truncate\">\n                  {item.name}\n                </p>\n              </dt>\n              <dd className=\"ml-16 flex items-baseline sm:pb-7\">\n                <p className=\"text-2xl font-semibold text-gray-900\">\n                  {item.value}\n                </p>\n                {/* <p\n                  className={`ml-2 flex items-baseline text-sm font-semibold ${\n                    item.change.startsWith('+') ? 'text-green-600' : 'text-red-600'\n                  }`}\n                >\n                  {item.change}\n                </p> */}\n              </dd>\n            </dl>\n          ))}\n        </div>\n      </div>\n\n      <div className=\"mt-8 grid grid-cols-1 gap-8\">\n        {/* Large Sales Trend Chart */}\n        <div className=\"bg-white shadow rounded-lg p-6\">\n          <div className=\"flex justify-between items-center mb-4\">\n            <h2 className=\"text-lg font-medium text-gray-900\">\n              Sales Analytics\n            </h2>\n            <div className=\"flex gap-2 text-sm\">\n              <span className=\"flex items-center\">\n                <span className=\"h-3 w-3 rounded-full bg-[#FF8080] mr-1\"></span>\n                Revenue\n              </span>\n              <span className=\"flex items-center\">\n                <span className=\"h-3 w-3 rounded-full bg-[#FFB366] mr-1\"></span>\n                Orders\n              </span>\n            </div>\n          </div>\n          {loading ? (\n            <div className=\"text-sm text-gray-500\">Loading...</div>\n          ) : (\n            <div \n              className={`transition-all duration-500 ease-in-out ${\n                hasData(dashboardData) ? 'h-[500px]' : 'h-[200px]'\n              }`}\n            >\n              {hasData(dashboardData) ? (\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <AreaChart\n                    data={formatChartData(dashboardData)}\n                    margin={{\n                      top: 10,\n                      right: 30,\n                      left: 10,\n                      bottom: 0,\n                    }}\n                  >\n                    <defs>\n                      <linearGradient id=\"colorRevenue\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                        <stop offset=\"5%\" stopColor=\"#FF8080\" stopOpacity={0.8}/>\n                        <stop offset=\"95%\" stopColor=\"#FF8080\" stopOpacity={0}/>\n                      </linearGradient>\n                      <linearGradient id=\"colorOrders\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                        <stop offset=\"5%\" stopColor=\"#FFB366\" stopOpacity={0.8}/>\n                        <stop offset=\"95%\" stopColor=\"#FFB366\" stopOpacity={0}/>\n                      </linearGradient>\n                    </defs>\n                    <CartesianGrid strokeDasharray=\"3 3\" opacity={0.1} />\n                    <XAxis \n                      dataKey=\"date\"\n                      tick={{ fontSize: 12 }}\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { day: '2-digit', month: 'short' })}\n                    />\n                    <YAxis \n                      yAxisId=\"left\"\n                      tick={{ fontSize: 12 }}\n                      tickFormatter={(value) => `â‚¹${value.toLocaleString()}`}\n                      label={{ value: 'Revenue (â‚¹)', angle: -90, position: 'insideLeft', offset: -5 }}\n                    />\n                    <YAxis \n                      yAxisId=\"right\" \n                      orientation=\"right\"\n                      tick={{ fontSize: 12 }}\n                      label={{ value: 'Orders', angle: 90, position: 'insideRight', offset: 10 }}\n                    />\n                    <Tooltip \n                      contentStyle={{ \n                        backgroundColor: 'rgba(255, 255, 255, 0.9)',\n                        borderRadius: '8px',\n                        border: 'none',\n                        boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)'\n                      }}\n                      formatter={(value, name) => {\n                        if (name === 'amount') return [`â‚¹${value.toLocaleString()}`, 'Revenue'];\n                        return [value, 'Orders'];\n                      }}\n                      labelFormatter={(label) => new Date(label).toLocaleDateString('en-US', { \n                        day: 'numeric', \n                        month: 'short',\n                        year: 'numeric'\n                      })}\n                    />\n                    <Area\n                      yAxisId=\"right\"\n                      type=\"monotone\"\n                      dataKey=\"orders\"\n                      stroke=\"#FFB366\"\n                      fillOpacity={1}\n                      fill=\"url(#colorOrders)\"\n                      name=\"orders\"\n                    />\n                    <Area\n                      yAxisId=\"left\"\n                      type=\"monotone\"\n                      dataKey=\"amount\"\n                      stroke=\"#FF8080\"\n                      fillOpacity={1}\n                      fill=\"url(#colorRevenue)\"\n                      name=\"amount\"\n                    />\n                  </AreaChart>\n                </ResponsiveContainer>\n              ) : (\n                <div className=\"h-full flex items-center justify-center text-gray-500\">\n                  <div className=\"text-center\">\n                    <p className=\"text-lg mb-2\">No data available</p>\n                    <p className=\"text-sm\">Select a different date range to view sales analytics</p>\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n\n        {/* Two Column Layout for Pie Chart and Recent Orders */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Order Distribution Pie Chart */}\n          <div className=\"bg-white shadow rounded-lg p-6\">\n            <h2 className=\"text-lg font-medium text-gray-900 mb-4\">\n              Order Distribution\n            </h2>\n            {loading ? (\n              <div className=\"text-sm text-gray-500\">Loading...</div>\n            ) : (\n              <div \n                className={`transition-all duration-500 ease-in-out ${\n                  hasData(dashboardData) ? 'h-[300px]' : 'h-[150px]'\n                }`}\n              >\n                {hasData(dashboardData) ? (\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <PieChart>\n                      <Pie\n                        data={formatPieChartData(dashboardData)}\n                        cx=\"50%\"\n                        cy=\"50%\"\n                        innerRadius={60}\n                        outerRadius={80}\n                        paddingAngle={5}\n                        dataKey=\"value\"\n                      >\n                        {formatPieChartData(dashboardData).map((entry, index) => (\n                          <Cell \n                            key={`cell-${index}`} \n                            fill={COLORS[index % COLORS.length]}\n                            stroke=\"none\"\n                          />\n                        ))}\n                      </Pie>\n                      <Tooltip \n                        formatter={(value, name) => [`${value} orders (${((value / dashboardData?.Orders?.All_Order) * 100).toFixed(1)}%)`, name]}\n                        contentStyle={{\n                          backgroundColor: 'rgba(255, 255, 255, 0.9)',\n                          borderRadius: '8px',\n                          border: 'none',\n                          boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)'\n                        }}\n                      />\n                      <Legend \n                        verticalAlign=\"bottom\" \n                        height={36}\n                        formatter={(value, entry) => {\n                          const { payload } = entry;\n                          return `${value} (${payload.value} orders)`;\n                        }}\n                      />\n                    </PieChart>\n                  </ResponsiveContainer>\n                ) : (\n                  <div className=\"h-full flex items-center justify-center text-gray-500\">\n                    <div className=\"text-center\">\n                      <p className=\"text-lg mb-2\">No orders to display</p>\n                      <p className=\"text-sm\">Select a different date range to view order distribution</p>\n                    </div>\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n\n          {/* Recent Orders Table */}\n          <div className=\"bg-white shadow rounded-lg p-6\">\n            <div className=\"flex justify-between items-center mb-4\">\n              <h2 className=\"text-lg font-medium text-gray-900\">\n                Recent Orders\n              </h2>\n              <span className=\"text-sm text-gray-500\">Last 5 orders</span>\n            </div>\n            {loading ? (\n              <div className=\"text-sm text-gray-500\">Loading...</div>\n            ) : dashboardData?.Table?.All?.length > 0 ? (\n              <div className=\"overflow-x-auto\">\n                <table className=\"min-w-full divide-y divide-gray-200\">\n                  <thead>\n                    <tr>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Order ID</th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Type</th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Amount</th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"divide-y divide-gray-200\">\n                    {dashboardData.Table.All.slice(0, 5).map((order, index) => (\n                      <tr key={index}>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                          {formatOrderId(order._id, index)}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                          {order.Type}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                          â‚¹{order.TotalAmount}\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            ) : (\n              <div className=\"text-sm text-gray-500\">No recent orders to display.</div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1057, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}